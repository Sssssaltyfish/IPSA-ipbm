// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_to_dataplane.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_controller_5fto_5fdataplane_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_controller_5fto_5fdataplane_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/port_undef.inc>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_controller_5fto_5fdataplane_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_controller_5fto_5fdataplane_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
        entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField
        aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
        schema[52] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
        field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
        serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_controller_5fto_5fdataplane_2eproto;
namespace rp4 {
class Action;
struct ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionProc;
struct ActionProcDefaultTypeInternal;
extern ActionProcDefaultTypeInternal _ActionProc_default_instance_;
class ClearActionReq;
struct ClearActionReqDefaultTypeInternal;
extern ClearActionReqDefaultTypeInternal _ClearActionReq_default_instance_;
class ClearActionResp;
struct ClearActionRespDefaultTypeInternal;
extern ClearActionRespDefaultTypeInternal _ClearActionResp_default_instance_;
class ClearOldConfigReq;
struct ClearOldConfigReqDefaultTypeInternal;
extern ClearOldConfigReqDefaultTypeInternal
    _ClearOldConfigReq_default_instance_;
class ClearOldConfigResp;
struct ClearOldConfigRespDefaultTypeInternal;
extern ClearOldConfigRespDefaultTypeInternal
    _ClearOldConfigResp_default_instance_;
class ClearParserReq;
struct ClearParserReqDefaultTypeInternal;
extern ClearParserReqDefaultTypeInternal _ClearParserReq_default_instance_;
class ClearParserResp;
struct ClearParserRespDefaultTypeInternal;
extern ClearParserRespDefaultTypeInternal _ClearParserResp_default_instance_;
class ClearRelationExpReq;
struct ClearRelationExpReqDefaultTypeInternal;
extern ClearRelationExpReqDefaultTypeInternal
    _ClearRelationExpReq_default_instance_;
class ClearRelationExpResp;
struct ClearRelationExpRespDefaultTypeInternal;
extern ClearRelationExpRespDefaultTypeInternal
    _ClearRelationExpResp_default_instance_;
class ClearResMapReq;
struct ClearResMapReqDefaultTypeInternal;
extern ClearResMapReqDefaultTypeInternal _ClearResMapReq_default_instance_;
class ClearResMapResp;
struct ClearResMapRespDefaultTypeInternal;
extern ClearResMapRespDefaultTypeInternal _ClearResMapResp_default_instance_;
class ClearStageReq;
struct ClearStageReqDefaultTypeInternal;
extern ClearStageReqDefaultTypeInternal _ClearStageReq_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class DelActionReq;
struct DelActionReqDefaultTypeInternal;
extern DelActionReqDefaultTypeInternal _DelActionReq_default_instance_;
class DelActionResp;
struct DelActionRespDefaultTypeInternal;
extern DelActionRespDefaultTypeInternal _DelActionResp_default_instance_;
class ExpTreeNode;
struct ExpTreeNodeDefaultTypeInternal;
extern ExpTreeNodeDefaultTypeInternal _ExpTreeNode_default_instance_;
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
class GateEntry;
struct GateEntryDefaultTypeInternal;
extern GateEntryDefaultTypeInternal _GateEntry_default_instance_;
class GatewayParam;
struct GatewayParamDefaultTypeInternal;
extern GatewayParamDefaultTypeInternal _GatewayParam_default_instance_;
class HeaderInfo;
struct HeaderInfoDefaultTypeInternal;
extern HeaderInfoDefaultTypeInternal _HeaderInfo_default_instance_;
class InsertActionReq;
struct InsertActionReqDefaultTypeInternal;
extern InsertActionReqDefaultTypeInternal _InsertActionReq_default_instance_;
class InsertActionResp;
struct InsertActionRespDefaultTypeInternal;
extern InsertActionRespDefaultTypeInternal _InsertActionResp_default_instance_;
class InsertRelationExpReq;
struct InsertRelationExpReqDefaultTypeInternal;
extern InsertRelationExpReqDefaultTypeInternal
    _InsertRelationExpReq_default_instance_;
class InsertRelationExpResp;
struct InsertRelationExpRespDefaultTypeInternal;
extern InsertRelationExpRespDefaultTypeInternal
    _InsertRelationExpResp_default_instance_;
class InsertSramEntryReq;
struct InsertSramEntryReqDefaultTypeInternal;
extern InsertSramEntryReqDefaultTypeInternal
    _InsertSramEntryReq_default_instance_;
class InsertSramEntryResp;
struct InsertSramEntryRespDefaultTypeInternal;
extern InsertSramEntryRespDefaultTypeInternal
    _InsertSramEntryResp_default_instance_;
class InsertTcamEntryReq;
struct InsertTcamEntryReqDefaultTypeInternal;
extern InsertTcamEntryReqDefaultTypeInternal
    _InsertTcamEntryReq_default_instance_;
class InsertTcamEntryResp;
struct InsertTcamEntryRespDefaultTypeInternal;
extern InsertTcamEntryRespDefaultTypeInternal
    _InsertTcamEntryResp_default_instance_;
class ModParserEntryReq;
struct ModParserEntryReqDefaultTypeInternal;
extern ModParserEntryReqDefaultTypeInternal
    _ModParserEntryReq_default_instance_;
class ModParserEntryResp;
struct ModParserEntryRespDefaultTypeInternal;
extern ModParserEntryRespDefaultTypeInternal
    _ModParserEntryResp_default_instance_;
class ModResMapReq;
struct ModResMapReqDefaultTypeInternal;
extern ModResMapReqDefaultTypeInternal _ModResMapReq_default_instance_;
class ModResMapResp;
struct ModResMapRespDefaultTypeInternal;
extern ModResMapRespDefaultTypeInternal _ModResMapResp_default_instance_;
class Parameter;
struct ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class ParserLevelReq;
struct ParserLevelReqDefaultTypeInternal;
extern ParserLevelReqDefaultTypeInternal _ParserLevelReq_default_instance_;
class ParserLevelResp;
struct ParserLevelRespDefaultTypeInternal;
extern ParserLevelRespDefaultTypeInternal _ParserLevelResp_default_instance_;
class Prim;
struct PrimDefaultTypeInternal;
extern PrimDefaultTypeInternal _Prim_default_instance_;
class RelationExp;
struct RelationExpDefaultTypeInternal;
extern RelationExpDefaultTypeInternal _RelationExp_default_instance_;
class SetActionProcReq;
struct SetActionProcReqDefaultTypeInternal;
extern SetActionProcReqDefaultTypeInternal _SetActionProcReq_default_instance_;
class SetActionProcResp;
struct SetActionProcRespDefaultTypeInternal;
extern SetActionProcRespDefaultTypeInternal
    _SetActionProcResp_default_instance_;
class SetDefaultGateEntryReq;
struct SetDefaultGateEntryReqDefaultTypeInternal;
extern SetDefaultGateEntryReqDefaultTypeInternal
    _SetDefaultGateEntryReq_default_instance_;
class SetDefaultGateEntryResp;
struct SetDefaultGateEntryRespDefaultTypeInternal;
extern SetDefaultGateEntryRespDefaultTypeInternal
    _SetDefaultGateEntryResp_default_instance_;
class SetFieldInfoReq;
struct SetFieldInfoReqDefaultTypeInternal;
extern SetFieldInfoReqDefaultTypeInternal _SetFieldInfoReq_default_instance_;
class SetFieldInfoResp;
struct SetFieldInfoRespDefaultTypeInternal;
extern SetFieldInfoRespDefaultTypeInternal _SetFieldInfoResp_default_instance_;
class SetMemConfigReq;
struct SetMemConfigReqDefaultTypeInternal;
extern SetMemConfigReqDefaultTypeInternal _SetMemConfigReq_default_instance_;
class SetMemConfigResp;
struct SetMemConfigRespDefaultTypeInternal;
extern SetMemConfigRespDefaultTypeInternal _SetMemConfigResp_default_instance_;
class SetMetadataReq;
struct SetMetadataReqDefaultTypeInternal;
extern SetMetadataReqDefaultTypeInternal _SetMetadataReq_default_instance_;
class SetMetadataResp;
struct SetMetadataRespDefaultTypeInternal;
extern SetMetadataRespDefaultTypeInternal _SetMetadataResp_default_instance_;
class SetMissActIdReq;
struct SetMissActIdReqDefaultTypeInternal;
extern SetMissActIdReqDefaultTypeInternal _SetMissActIdReq_default_instance_;
class SetMissActIdResp;
struct SetMissActIdRespDefaultTypeInternal;
extern SetMissActIdRespDefaultTypeInternal _SetMissActIdResp_default_instance_;
class SetNoTableReq;
struct SetNoTableReqDefaultTypeInternal;
extern SetNoTableReqDefaultTypeInternal _SetNoTableReq_default_instance_;
class SetNoTableResp;
struct SetNoTableRespDefaultTypeInternal;
extern SetNoTableRespDefaultTypeInternal _SetNoTableResp_default_instance_;
} // namespace rp4
PROTOBUF_NAMESPACE_OPEN
template <>::rp4::Action* Arena::CreateMaybeMessage<::rp4::Action>(Arena*);
template <>
::rp4::ActionProc* Arena::CreateMaybeMessage<::rp4::ActionProc>(Arena*);
template <>
::rp4::ClearActionReq* Arena::CreateMaybeMessage<::rp4::ClearActionReq>(Arena*);
template <>
::rp4::ClearActionResp*
Arena::CreateMaybeMessage<::rp4::ClearActionResp>(Arena*);
template <>
::rp4::ClearOldConfigReq*
Arena::CreateMaybeMessage<::rp4::ClearOldConfigReq>(Arena*);
template <>
::rp4::ClearOldConfigResp*
Arena::CreateMaybeMessage<::rp4::ClearOldConfigResp>(Arena*);
template <>
::rp4::ClearParserReq* Arena::CreateMaybeMessage<::rp4::ClearParserReq>(Arena*);
template <>
::rp4::ClearParserResp*
Arena::CreateMaybeMessage<::rp4::ClearParserResp>(Arena*);
template <>
::rp4::ClearRelationExpReq*
Arena::CreateMaybeMessage<::rp4::ClearRelationExpReq>(Arena*);
template <>
::rp4::ClearRelationExpResp*
Arena::CreateMaybeMessage<::rp4::ClearRelationExpResp>(Arena*);
template <>
::rp4::ClearResMapReq* Arena::CreateMaybeMessage<::rp4::ClearResMapReq>(Arena*);
template <>
::rp4::ClearResMapResp*
Arena::CreateMaybeMessage<::rp4::ClearResMapResp>(Arena*);
template <>
::rp4::ClearStageReq* Arena::CreateMaybeMessage<::rp4::ClearStageReq>(Arena*);
template <>::rp4::Data* Arena::CreateMaybeMessage<::rp4::Data>(Arena*);
template <>
::rp4::DelActionReq* Arena::CreateMaybeMessage<::rp4::DelActionReq>(Arena*);
template <>
::rp4::DelActionResp* Arena::CreateMaybeMessage<::rp4::DelActionResp>(Arena*);
template <>
::rp4::ExpTreeNode* Arena::CreateMaybeMessage<::rp4::ExpTreeNode>(Arena*);
template <>
::rp4::FieldInfo* Arena::CreateMaybeMessage<::rp4::FieldInfo>(Arena*);
template <>
::rp4::GateEntry* Arena::CreateMaybeMessage<::rp4::GateEntry>(Arena*);
template <>
::rp4::GatewayParam* Arena::CreateMaybeMessage<::rp4::GatewayParam>(Arena*);
template <>
::rp4::HeaderInfo* Arena::CreateMaybeMessage<::rp4::HeaderInfo>(Arena*);
template <>
::rp4::InsertActionReq*
Arena::CreateMaybeMessage<::rp4::InsertActionReq>(Arena*);
template <>
::rp4::InsertActionResp*
Arena::CreateMaybeMessage<::rp4::InsertActionResp>(Arena*);
template <>
::rp4::InsertRelationExpReq*
Arena::CreateMaybeMessage<::rp4::InsertRelationExpReq>(Arena*);
template <>
::rp4::InsertRelationExpResp*
Arena::CreateMaybeMessage<::rp4::InsertRelationExpResp>(Arena*);
template <>
::rp4::InsertSramEntryReq*
Arena::CreateMaybeMessage<::rp4::InsertSramEntryReq>(Arena*);
template <>
::rp4::InsertSramEntryResp*
Arena::CreateMaybeMessage<::rp4::InsertSramEntryResp>(Arena*);
template <>
::rp4::InsertTcamEntryReq*
Arena::CreateMaybeMessage<::rp4::InsertTcamEntryReq>(Arena*);
template <>
::rp4::InsertTcamEntryResp*
Arena::CreateMaybeMessage<::rp4::InsertTcamEntryResp>(Arena*);
template <>
::rp4::ModParserEntryReq*
Arena::CreateMaybeMessage<::rp4::ModParserEntryReq>(Arena*);
template <>
::rp4::ModParserEntryResp*
Arena::CreateMaybeMessage<::rp4::ModParserEntryResp>(Arena*);
template <>
::rp4::ModResMapReq* Arena::CreateMaybeMessage<::rp4::ModResMapReq>(Arena*);
template <>
::rp4::ModResMapResp* Arena::CreateMaybeMessage<::rp4::ModResMapResp>(Arena*);
template <>
::rp4::Parameter* Arena::CreateMaybeMessage<::rp4::Parameter>(Arena*);
template <>
::rp4::ParserLevelReq* Arena::CreateMaybeMessage<::rp4::ParserLevelReq>(Arena*);
template <>
::rp4::ParserLevelResp*
Arena::CreateMaybeMessage<::rp4::ParserLevelResp>(Arena*);
template <>::rp4::Prim* Arena::CreateMaybeMessage<::rp4::Prim>(Arena*);
template <>
::rp4::RelationExp* Arena::CreateMaybeMessage<::rp4::RelationExp>(Arena*);
template <>
::rp4::SetActionProcReq*
Arena::CreateMaybeMessage<::rp4::SetActionProcReq>(Arena*);
template <>
::rp4::SetActionProcResp*
Arena::CreateMaybeMessage<::rp4::SetActionProcResp>(Arena*);
template <>
::rp4::SetDefaultGateEntryReq*
Arena::CreateMaybeMessage<::rp4::SetDefaultGateEntryReq>(Arena*);
template <>
::rp4::SetDefaultGateEntryResp*
Arena::CreateMaybeMessage<::rp4::SetDefaultGateEntryResp>(Arena*);
template <>
::rp4::SetFieldInfoReq*
Arena::CreateMaybeMessage<::rp4::SetFieldInfoReq>(Arena*);
template <>
::rp4::SetFieldInfoResp*
Arena::CreateMaybeMessage<::rp4::SetFieldInfoResp>(Arena*);
template <>
::rp4::SetMemConfigReq*
Arena::CreateMaybeMessage<::rp4::SetMemConfigReq>(Arena*);
template <>
::rp4::SetMemConfigResp*
Arena::CreateMaybeMessage<::rp4::SetMemConfigResp>(Arena*);
template <>
::rp4::SetMetadataReq* Arena::CreateMaybeMessage<::rp4::SetMetadataReq>(Arena*);
template <>
::rp4::SetMetadataResp*
Arena::CreateMaybeMessage<::rp4::SetMetadataResp>(Arena*);
template <>
::rp4::SetMissActIdReq*
Arena::CreateMaybeMessage<::rp4::SetMissActIdReq>(Arena*);
template <>
::rp4::SetMissActIdResp*
Arena::CreateMaybeMessage<::rp4::SetMissActIdResp>(Arena*);
template <>
::rp4::SetNoTableReq* Arena::CreateMaybeMessage<::rp4::SetNoTableReq>(Arena*);
template <>
::rp4::SetNoTableResp* Arena::CreateMaybeMessage<::rp4::SetNoTableResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rp4 {

enum Res : int {
    OK = 0,
    FAIL = 1,
    Res_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    Res_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Res_IsValid(int value);
constexpr Res Res_MIN = OK;
constexpr Res Res_MAX = FAIL;
constexpr int Res_ARRAYSIZE = Res_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Res_descriptor();
template <typename T> inline const std::string& Res_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Res>::value || ::std::is_integral<T>::value,
                  "Incorrect type passed to function Res_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(Res_descriptor(),
                                                         enum_t_value);
}
inline bool Res_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                      Res* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Res>(
        Res_descriptor(), name, value);
}
enum FieldType : int {
    FD = 0,
    VALID = 1,
    HIT = 2,
    MISS = 3,
    FieldType_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    FieldType_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FieldType_IsValid(int value);
constexpr FieldType FieldType_MIN = FD;
constexpr FieldType FieldType_MAX = MISS;
constexpr int FieldType_ARRAYSIZE = FieldType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor();
template <typename T> inline const std::string& FieldType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FieldType>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function FieldType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(FieldType_descriptor(),
                                                         enum_t_value);
}
inline bool FieldType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                            FieldType* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldType>(
        FieldType_descriptor(), name, value);
}
enum ParameterType : int {
    CONSTANT = 0,
    HEADER = 1,
    FIELD = 2,
    PARAM = 3,
    OPERATOR = 4,
    ParameterType_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    ParameterType_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParameterType_IsValid(int value);
constexpr ParameterType ParameterType_MIN = CONSTANT;
constexpr ParameterType ParameterType_MAX = OPERATOR;
constexpr int ParameterType_ARRAYSIZE = ParameterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor();
template <typename T>
inline const std::string& ParameterType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParameterType>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function ParameterType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        ParameterType_descriptor(), enum_t_value);
}
inline bool ParameterType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                                ParameterType* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParameterType>(
        ParameterType_descriptor(), name, value);
}
enum RelationCode : int {
    GT = 0,
    GTE = 1,
    LT = 2,
    LTE = 3,
    EQ = 4,
    NEQ = 5,
    RelationCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    RelationCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RelationCode_IsValid(int value);
constexpr RelationCode RelationCode_MIN = GT;
constexpr RelationCode RelationCode_MAX = NEQ;
constexpr int RelationCode_ARRAYSIZE = RelationCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationCode_descriptor();
template <typename T>
inline const std::string& RelationCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RelationCode>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function RelationCode_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        RelationCode_descriptor(), enum_t_value);
}
inline bool RelationCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                               RelationCode* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RelationCode>(
        RelationCode_descriptor(), name, value);
}
enum GateEntryType : int {
    TABLE = 0,
    STAGE = 1,
    GateEntryType_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    GateEntryType_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GateEntryType_IsValid(int value);
constexpr GateEntryType GateEntryType_MIN = TABLE;
constexpr GateEntryType GateEntryType_MAX = STAGE;
constexpr int GateEntryType_ARRAYSIZE = GateEntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GateEntryType_descriptor();
template <typename T>
inline const std::string& GateEntryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GateEntryType>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function GateEntryType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
        GateEntryType_descriptor(), enum_t_value);
}
inline bool GateEntryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                                GateEntryType* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GateEntryType>(
        GateEntryType_descriptor(), name, value);
}
enum MatchType : int {
    EXACT = 0,
    TERNARY = 1,
    LPM = 2,
    MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MatchType_IsValid(int value);
constexpr MatchType MatchType_MIN = EXACT;
constexpr MatchType MatchType_MAX = LPM;
constexpr int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor();
template <typename T> inline const std::string& MatchType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MatchType>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function MatchType_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(MatchType_descriptor(),
                                                         enum_t_value);
}
inline bool MatchType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                            MatchType* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchType>(
        MatchType_descriptor(), name, value);
}
enum OpCode : int {
    ADD = 0,
    SUB = 1,
    SET_FIELD = 2,
    COPY_FIELD = 3,
    SHIFT_LEFT = 4,
    SHIFT_RIGHT = 5,
    BIT_AND = 6,
    BIT_OR = 7,
    BIT_XOR = 8,
    BIT_NEG = 9,
    OpCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
    OpCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
        std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpCode_IsValid(int value);
constexpr OpCode OpCode_MIN = ADD;
constexpr OpCode OpCode_MAX = BIT_NEG;
constexpr int OpCode_ARRAYSIZE = OpCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpCode_descriptor();
template <typename T> inline const std::string& OpCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OpCode>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function OpCode_Name.");
    return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(OpCode_descriptor(),
                                                         enum_t_value);
}
inline bool OpCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
                         OpCode* value) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpCode>(
        OpCode_descriptor(), name, value);
}
// ===================================================================

class HeaderInfo final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.HeaderInfo)
                                                                  */
{
public:
    inline HeaderInfo() : HeaderInfo(nullptr) {}
    ~HeaderInfo() override;
    explicit constexpr HeaderInfo(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    HeaderInfo(const HeaderInfo& from);
    HeaderInfo(HeaderInfo&& from) noexcept : HeaderInfo() {
        *this = ::std::move(from);
    }

    inline HeaderInfo& operator=(const HeaderInfo& from) {
        CopyFrom(from);
        return *this;
    }
    inline HeaderInfo& operator=(HeaderInfo&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const HeaderInfo& default_instance() {
        return *internal_default_instance();
    }
    static inline const HeaderInfo* internal_default_instance() {
        return reinterpret_cast<const HeaderInfo*>(
            &_HeaderInfo_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(HeaderInfo& a, HeaderInfo& b) { a.Swap(&b); }
    inline void Swap(HeaderInfo* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(HeaderInfo* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline HeaderInfo* New() const final { return new HeaderInfo(); }

    HeaderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<HeaderInfo>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const HeaderInfo& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const HeaderInfo& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(HeaderInfo* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.HeaderInfo";
    }

protected:
    explicit HeaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                        bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHeaderIdFieldNumber = 1,
        kHeaderLengthFieldNumber = 2,
        kHeaderOffsetFieldNumber = 3,
    };
    // int32 headerId = 1;
    void clear_headerid();
    ::PROTOBUF_NAMESPACE_ID::int32 headerid() const;
    void set_headerid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_headerid() const;
    void _internal_set_headerid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 headerLength = 2;
    void clear_headerlength();
    ::PROTOBUF_NAMESPACE_ID::int32 headerlength() const;
    void set_headerlength(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_headerlength() const;
    void _internal_set_headerlength(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 headerOffset = 3;
    void clear_headeroffset();
    ::PROTOBUF_NAMESPACE_ID::int32 headeroffset() const;
    void set_headeroffset(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_headeroffset() const;
    void _internal_set_headeroffset(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.HeaderInfo)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 headerid_;
    ::PROTOBUF_NAMESPACE_ID::int32 headerlength_;
    ::PROTOBUF_NAMESPACE_ID::int32 headeroffset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetMetadataReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetMetadataReq)
                                                                      */
{
public:
    inline SetMetadataReq() : SetMetadataReq(nullptr) {}
    ~SetMetadataReq() override;
    explicit constexpr SetMetadataReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetMetadataReq(const SetMetadataReq& from);
    SetMetadataReq(SetMetadataReq&& from) noexcept : SetMetadataReq() {
        *this = ::std::move(from);
    }

    inline SetMetadataReq& operator=(const SetMetadataReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetMetadataReq& operator=(SetMetadataReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetMetadataReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetMetadataReq* internal_default_instance() {
        return reinterpret_cast<const SetMetadataReq*>(
            &_SetMetadataReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(SetMetadataReq& a, SetMetadataReq& b) { a.Swap(&b); }
    inline void Swap(SetMetadataReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetMetadataReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetMetadataReq* New() const final { return new SetMetadataReq(); }

    SetMetadataReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetMetadataReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetMetadataReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetMetadataReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetMetadataReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetMetadataReq";
    }

protected:
    explicit SetMetadataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHeaderInfosFieldNumber = 1,
    };
    // repeated .rp4.HeaderInfo headerInfos = 1;
    int headerinfos_size() const;

private:
    int _internal_headerinfos_size() const;

public:
    void clear_headerinfos();
    ::rp4::HeaderInfo* mutable_headerinfos(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::HeaderInfo>*
    mutable_headerinfos();

private:
    const ::rp4::HeaderInfo& _internal_headerinfos(int index) const;
    ::rp4::HeaderInfo* _internal_add_headerinfos();

public:
    const ::rp4::HeaderInfo& headerinfos(int index) const;
    ::rp4::HeaderInfo* add_headerinfos();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::HeaderInfo>&
    headerinfos() const;

    // @@protoc_insertion_point(class_scope:rp4.SetMetadataReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::HeaderInfo> headerinfos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetMetadataResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetMetadataResp)
                                                                       */
{
public:
    inline SetMetadataResp() : SetMetadataResp(nullptr) {}
    ~SetMetadataResp() override;
    explicit constexpr SetMetadataResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetMetadataResp(const SetMetadataResp& from);
    SetMetadataResp(SetMetadataResp&& from) noexcept : SetMetadataResp() {
        *this = ::std::move(from);
    }

    inline SetMetadataResp& operator=(const SetMetadataResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetMetadataResp& operator=(SetMetadataResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetMetadataResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetMetadataResp* internal_default_instance() {
        return reinterpret_cast<const SetMetadataResp*>(
            &_SetMetadataResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(SetMetadataResp& a, SetMetadataResp& b) { a.Swap(&b); }
    inline void Swap(SetMetadataResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetMetadataResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetMetadataResp* New() const final { return new SetMetadataResp(); }

    SetMetadataResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetMetadataResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetMetadataResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetMetadataResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetMetadataResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetMetadataResp";
    }

protected:
    explicit SetMetadataResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetMetadataResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearStageReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearStageReq)
                                                                     */
{
public:
    inline ClearStageReq() : ClearStageReq(nullptr) {}
    ~ClearStageReq() override;
    explicit constexpr ClearStageReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearStageReq(const ClearStageReq& from);
    ClearStageReq(ClearStageReq&& from) noexcept : ClearStageReq() {
        *this = ::std::move(from);
    }

    inline ClearStageReq& operator=(const ClearStageReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearStageReq& operator=(ClearStageReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearStageReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearStageReq* internal_default_instance() {
        return reinterpret_cast<const ClearStageReq*>(
            &_ClearStageReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;

    friend void swap(ClearStageReq& a, ClearStageReq& b) { a.Swap(&b); }
    inline void Swap(ClearStageReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearStageReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearStageReq* New() const final { return new ClearStageReq(); }

    ClearStageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearStageReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearStageReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearStageReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearStageReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearStageReq";
    }

protected:
    explicit ClearStageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearStageReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ParserLevelReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ParserLevelReq)
                                                                      */
{
public:
    inline ParserLevelReq() : ParserLevelReq(nullptr) {}
    ~ParserLevelReq() override;
    explicit constexpr ParserLevelReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ParserLevelReq(const ParserLevelReq& from);
    ParserLevelReq(ParserLevelReq&& from) noexcept : ParserLevelReq() {
        *this = ::std::move(from);
    }

    inline ParserLevelReq& operator=(const ParserLevelReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ParserLevelReq& operator=(ParserLevelReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ParserLevelReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ParserLevelReq* internal_default_instance() {
        return reinterpret_cast<const ParserLevelReq*>(
            &_ParserLevelReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    friend void swap(ParserLevelReq& a, ParserLevelReq& b) { a.Swap(&b); }
    inline void Swap(ParserLevelReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ParserLevelReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ParserLevelReq* New() const final { return new ParserLevelReq(); }

    ParserLevelReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ParserLevelReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ParserLevelReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ParserLevelReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ParserLevelReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ParserLevelReq";
    }

protected:
    explicit ParserLevelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
        kParserLevelFieldNumber = 2,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 parserLevel = 2;
    void clear_parserlevel();
    ::PROTOBUF_NAMESPACE_ID::int32 parserlevel() const;
    void set_parserlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_parserlevel() const;
    void _internal_set_parserlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ParserLevelReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 parserlevel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ParserLevelResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ParserLevelResp)
                                                                       */
{
public:
    inline ParserLevelResp() : ParserLevelResp(nullptr) {}
    ~ParserLevelResp() override;
    explicit constexpr ParserLevelResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ParserLevelResp(const ParserLevelResp& from);
    ParserLevelResp(ParserLevelResp&& from) noexcept : ParserLevelResp() {
        *this = ::std::move(from);
    }

    inline ParserLevelResp& operator=(const ParserLevelResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ParserLevelResp& operator=(ParserLevelResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ParserLevelResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ParserLevelResp* internal_default_instance() {
        return reinterpret_cast<const ParserLevelResp*>(
            &_ParserLevelResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;

    friend void swap(ParserLevelResp& a, ParserLevelResp& b) { a.Swap(&b); }
    inline void Swap(ParserLevelResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ParserLevelResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ParserLevelResp* New() const final { return new ParserLevelResp(); }

    ParserLevelResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ParserLevelResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ParserLevelResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ParserLevelResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ParserLevelResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ParserLevelResp";
    }

protected:
    explicit ParserLevelResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ParserLevelResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class FieldInfo final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.FieldInfo)
                                                                 */
{
public:
    inline FieldInfo() : FieldInfo(nullptr) {}
    ~FieldInfo() override;
    explicit constexpr FieldInfo(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    FieldInfo(const FieldInfo& from);
    FieldInfo(FieldInfo&& from) noexcept : FieldInfo() {
        *this = ::std::move(from);
    }

    inline FieldInfo& operator=(const FieldInfo& from) {
        CopyFrom(from);
        return *this;
    }
    inline FieldInfo& operator=(FieldInfo&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const FieldInfo& default_instance() {
        return *internal_default_instance();
    }
    static inline const FieldInfo* internal_default_instance() {
        return reinterpret_cast<const FieldInfo*>(
            &_FieldInfo_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 6;

    friend void swap(FieldInfo& a, FieldInfo& b) { a.Swap(&b); }
    inline void Swap(FieldInfo* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(FieldInfo* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline FieldInfo* New() const final { return new FieldInfo(); }

    FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<FieldInfo>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const FieldInfo& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const FieldInfo& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(FieldInfo* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.FieldInfo";
    }

protected:
    explicit FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kHdrIdFieldNumber = 1,
        kInternalOffsetFieldNumber = 2,
        kFieldLenFieldNumber = 3,
        kFieldTypeFieldNumber = 4,
    };
    // int32 hdrId = 1;
    void clear_hdrid();
    ::PROTOBUF_NAMESPACE_ID::int32 hdrid() const;
    void set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_hdrid() const;
    void _internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 internalOffset = 2;
    void clear_internaloffset();
    ::PROTOBUF_NAMESPACE_ID::int32 internaloffset() const;
    void set_internaloffset(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_internaloffset() const;
    void _internal_set_internaloffset(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 fieldLen = 3;
    void clear_fieldlen();
    ::PROTOBUF_NAMESPACE_ID::int32 fieldlen() const;
    void set_fieldlen(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_fieldlen() const;
    void _internal_set_fieldlen(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // .rp4.FieldType fieldType = 4;
    void clear_fieldtype();
    ::rp4::FieldType fieldtype() const;
    void set_fieldtype(::rp4::FieldType value);

private:
    ::rp4::FieldType _internal_fieldtype() const;
    void _internal_set_fieldtype(::rp4::FieldType value);

public:
    // @@protoc_insertion_point(class_scope:rp4.FieldInfo)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 hdrid_;
    ::PROTOBUF_NAMESPACE_ID::int32 internaloffset_;
    ::PROTOBUF_NAMESPACE_ID::int32 fieldlen_;
    int fieldtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ModParserEntryReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ModParserEntryReq)
                                                                         */
{
public:
    inline ModParserEntryReq() : ModParserEntryReq(nullptr) {}
    ~ModParserEntryReq() override;
    explicit constexpr ModParserEntryReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ModParserEntryReq(const ModParserEntryReq& from);
    ModParserEntryReq(ModParserEntryReq&& from) noexcept : ModParserEntryReq() {
        *this = ::std::move(from);
    }

    inline ModParserEntryReq& operator=(const ModParserEntryReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ModParserEntryReq& operator=(ModParserEntryReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ModParserEntryReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ModParserEntryReq* internal_default_instance() {
        return reinterpret_cast<const ModParserEntryReq*>(
            &_ModParserEntryReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 7;

    friend void swap(ModParserEntryReq& a, ModParserEntryReq& b) { a.Swap(&b); }
    inline void Swap(ModParserEntryReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ModParserEntryReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ModParserEntryReq* New() const final {
        return new ModParserEntryReq();
    }

    ModParserEntryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ModParserEntryReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ModParserEntryReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ModParserEntryReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ModParserEntryReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ModParserEntryReq";
    }

protected:
    explicit ModParserEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kTransFdsFieldNumber = 10,
        kProcIdFieldNumber = 1,
        kParserLevelFieldNumber = 2,
        kStateFieldNumber = 3,
        kKeyFieldNumber = 4,
        kMaskFieldNumber = 5,
        kHdrIdFieldNumber = 6,
        kHdrLenFieldNumber = 7,
        kNextStateFieldNumber = 8,
        kTransFieldNumFieldNumber = 9,
        kMissActFieldNumber = 11,
    };
    // repeated .rp4.FieldInfo transFds = 10;
    int transfds_size() const;

private:
    int _internal_transfds_size() const;

public:
    void clear_transfds();
    ::rp4::FieldInfo* mutable_transfds(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>*
    mutable_transfds();

private:
    const ::rp4::FieldInfo& _internal_transfds(int index) const;
    ::rp4::FieldInfo* _internal_add_transfds();

public:
    const ::rp4::FieldInfo& transfds(int index) const;
    ::rp4::FieldInfo* add_transfds();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>&
    transfds() const;

    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 parserLevel = 2;
    void clear_parserlevel();
    ::PROTOBUF_NAMESPACE_ID::int32 parserlevel() const;
    void set_parserlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_parserlevel() const;
    void _internal_set_parserlevel(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 state = 3;
    void clear_state();
    ::PROTOBUF_NAMESPACE_ID::int32 state() const;
    void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
    void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // uint32 key = 4;
    void clear_key();
    ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
    void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
    void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
    // int32 mask = 5;
    void clear_mask();
    ::PROTOBUF_NAMESPACE_ID::int32 mask() const;
    void set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask() const;
    void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 hdrId = 6;
    void clear_hdrid();
    ::PROTOBUF_NAMESPACE_ID::int32 hdrid() const;
    void set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_hdrid() const;
    void _internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 hdrLen = 7;
    void clear_hdrlen();
    ::PROTOBUF_NAMESPACE_ID::int32 hdrlen() const;
    void set_hdrlen(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_hdrlen() const;
    void _internal_set_hdrlen(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 nextState = 8;
    void clear_nextstate();
    ::PROTOBUF_NAMESPACE_ID::int32 nextstate() const;
    void set_nextstate(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_nextstate() const;
    void _internal_set_nextstate(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 transFieldNum = 9;
    void clear_transfieldnum();
    ::PROTOBUF_NAMESPACE_ID::int32 transfieldnum() const;
    void set_transfieldnum(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_transfieldnum() const;
    void _internal_set_transfieldnum(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 miss_act = 11;
    void clear_miss_act();
    ::PROTOBUF_NAMESPACE_ID::int32 miss_act() const;
    void set_miss_act(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_miss_act() const;
    void _internal_set_miss_act(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ModParserEntryReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo> transfds_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 parserlevel_;
    ::PROTOBUF_NAMESPACE_ID::int32 state_;
    ::PROTOBUF_NAMESPACE_ID::uint32 key_;
    ::PROTOBUF_NAMESPACE_ID::int32 mask_;
    ::PROTOBUF_NAMESPACE_ID::int32 hdrid_;
    ::PROTOBUF_NAMESPACE_ID::int32 hdrlen_;
    ::PROTOBUF_NAMESPACE_ID::int32 nextstate_;
    ::PROTOBUF_NAMESPACE_ID::int32 transfieldnum_;
    ::PROTOBUF_NAMESPACE_ID::int32 miss_act_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ModParserEntryResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ModParserEntryResp)
                                                                          */
{
public:
    inline ModParserEntryResp() : ModParserEntryResp(nullptr) {}
    ~ModParserEntryResp() override;
    explicit constexpr ModParserEntryResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ModParserEntryResp(const ModParserEntryResp& from);
    ModParserEntryResp(ModParserEntryResp&& from) noexcept
        : ModParserEntryResp() {
        *this = ::std::move(from);
    }

    inline ModParserEntryResp& operator=(const ModParserEntryResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ModParserEntryResp& operator=(ModParserEntryResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ModParserEntryResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ModParserEntryResp* internal_default_instance() {
        return reinterpret_cast<const ModParserEntryResp*>(
            &_ModParserEntryResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 8;

    friend void swap(ModParserEntryResp& a, ModParserEntryResp& b) {
        a.Swap(&b);
    }
    inline void Swap(ModParserEntryResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ModParserEntryResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ModParserEntryResp* New() const final {
        return new ModParserEntryResp();
    }

    ModParserEntryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ModParserEntryResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ModParserEntryResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ModParserEntryResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ModParserEntryResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ModParserEntryResp";
    }

protected:
    explicit ModParserEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ModParserEntryResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearParserReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearParserReq)
                                                                      */
{
public:
    inline ClearParserReq() : ClearParserReq(nullptr) {}
    ~ClearParserReq() override;
    explicit constexpr ClearParserReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearParserReq(const ClearParserReq& from);
    ClearParserReq(ClearParserReq&& from) noexcept : ClearParserReq() {
        *this = ::std::move(from);
    }

    inline ClearParserReq& operator=(const ClearParserReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearParserReq& operator=(ClearParserReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearParserReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearParserReq* internal_default_instance() {
        return reinterpret_cast<const ClearParserReq*>(
            &_ClearParserReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 9;

    friend void swap(ClearParserReq& a, ClearParserReq& b) { a.Swap(&b); }
    inline void Swap(ClearParserReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearParserReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearParserReq* New() const final { return new ClearParserReq(); }

    ClearParserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearParserReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearParserReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearParserReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearParserReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearParserReq";
    }

protected:
    explicit ClearParserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearParserReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearParserResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearParserResp)
                                                                       */
{
public:
    inline ClearParserResp() : ClearParserResp(nullptr) {}
    ~ClearParserResp() override;
    explicit constexpr ClearParserResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearParserResp(const ClearParserResp& from);
    ClearParserResp(ClearParserResp&& from) noexcept : ClearParserResp() {
        *this = ::std::move(from);
    }

    inline ClearParserResp& operator=(const ClearParserResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearParserResp& operator=(ClearParserResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearParserResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearParserResp* internal_default_instance() {
        return reinterpret_cast<const ClearParserResp*>(
            &_ClearParserResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 10;

    friend void swap(ClearParserResp& a, ClearParserResp& b) { a.Swap(&b); }
    inline void Swap(ClearParserResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearParserResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearParserResp* New() const final { return new ClearParserResp(); }

    ClearParserResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearParserResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearParserResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearParserResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearParserResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearParserResp";
    }

protected:
    explicit ClearParserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearParserResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class Data final
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rp4.Data) */ {
public:
    inline Data() : Data(nullptr) {}
    ~Data() override;
    explicit constexpr Data(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Data(const Data& from);
    Data(Data&& from) noexcept : Data() { *this = ::std::move(from); }

    inline Data& operator=(const Data& from) {
        CopyFrom(from);
        return *this;
    }
    inline Data& operator=(Data&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const Data& default_instance() {
        return *internal_default_instance();
    }
    static inline const Data* internal_default_instance() {
        return reinterpret_cast<const Data*>(&_Data_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 11;

    friend void swap(Data& a, Data& b) { a.Swap(&b); }
    inline void Swap(Data* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Data* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Data* New() const final { return new Data(); }

    Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<Data>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const Data& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const Data& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Data* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.Data";
    }

protected:
    explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                  bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kValFieldNumber = 2,
        kLenFieldNumber = 1,
    };
    // bytes val = 2;
    void clear_val();
    const std::string& val() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_val(ArgT0&& arg0, ArgT... args);
    std::string* mutable_val();
    PROTOBUF_MUST_USE_RESULT std::string* release_val();
    void set_allocated_val(std::string* val);

private:
    const std::string& _internal_val() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_val(const std::string& value);
    std::string* _internal_mutable_val();

public:
    // int32 len = 1;
    void clear_len();
    ::PROTOBUF_NAMESPACE_ID::int32 len() const;
    void set_len(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_len() const;
    void _internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.Data)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    ::PROTOBUF_NAMESPACE_ID::int32 len_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class GateEntry final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.GateEntry)
                                                                 */
{
public:
    inline GateEntry() : GateEntry(nullptr) {}
    ~GateEntry() override;
    explicit constexpr GateEntry(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    GateEntry(const GateEntry& from);
    GateEntry(GateEntry&& from) noexcept : GateEntry() {
        *this = ::std::move(from);
    }

    inline GateEntry& operator=(const GateEntry& from) {
        CopyFrom(from);
        return *this;
    }
    inline GateEntry& operator=(GateEntry&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const GateEntry& default_instance() {
        return *internal_default_instance();
    }
    static inline const GateEntry* internal_default_instance() {
        return reinterpret_cast<const GateEntry*>(
            &_GateEntry_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 12;

    friend void swap(GateEntry& a, GateEntry& b) { a.Swap(&b); }
    inline void Swap(GateEntry* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GateEntry* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline GateEntry* New() const final { return new GateEntry(); }

    GateEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<GateEntry>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const GateEntry& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const GateEntry& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(GateEntry* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.GateEntry";
    }

protected:
    explicit GateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kTypeFieldNumber = 1,
        kValFieldNumber = 2,
    };
    // .rp4.GateEntryType type = 1;
    void clear_type();
    ::rp4::GateEntryType type() const;
    void set_type(::rp4::GateEntryType value);

private:
    ::rp4::GateEntryType _internal_type() const;
    void _internal_set_type(::rp4::GateEntryType value);

public:
    // int32 val = 2;
    void clear_val();
    ::PROTOBUF_NAMESPACE_ID::int32 val() const;
    void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
    void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.GateEntry)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int type_;
    ::PROTOBUF_NAMESPACE_ID::int32 val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultGateEntryReq final
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetDefaultGateEntryReq)
                                               */
{
public:
    inline SetDefaultGateEntryReq() : SetDefaultGateEntryReq(nullptr) {}
    ~SetDefaultGateEntryReq() override;
    explicit constexpr SetDefaultGateEntryReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetDefaultGateEntryReq(const SetDefaultGateEntryReq& from);
    SetDefaultGateEntryReq(SetDefaultGateEntryReq&& from) noexcept
        : SetDefaultGateEntryReq() {
        *this = ::std::move(from);
    }

    inline SetDefaultGateEntryReq&
    operator=(const SetDefaultGateEntryReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetDefaultGateEntryReq&
    operator=(SetDefaultGateEntryReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetDefaultGateEntryReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetDefaultGateEntryReq* internal_default_instance() {
        return reinterpret_cast<const SetDefaultGateEntryReq*>(
            &_SetDefaultGateEntryReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 13;

    friend void swap(SetDefaultGateEntryReq& a, SetDefaultGateEntryReq& b) {
        a.Swap(&b);
    }
    inline void Swap(SetDefaultGateEntryReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetDefaultGateEntryReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetDefaultGateEntryReq* New() const final {
        return new SetDefaultGateEntryReq();
    }

    SetDefaultGateEntryReq*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetDefaultGateEntryReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetDefaultGateEntryReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetDefaultGateEntryReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetDefaultGateEntryReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetDefaultGateEntryReq";
    }

protected:
    explicit SetDefaultGateEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                    bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kDefaultEntryFieldNumber = 2,
        kProcIdFieldNumber = 1,
    };
    // .rp4.GateEntry default_entry = 2;
    bool has_default_entry() const;

private:
    bool _internal_has_default_entry() const;

public:
    void clear_default_entry();
    const ::rp4::GateEntry& default_entry() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::GateEntry* release_default_entry();
    ::rp4::GateEntry* mutable_default_entry();
    void set_allocated_default_entry(::rp4::GateEntry* default_entry);

private:
    const ::rp4::GateEntry& _internal_default_entry() const;
    ::rp4::GateEntry* _internal_mutable_default_entry();

public:
    void
    unsafe_arena_set_allocated_default_entry(::rp4::GateEntry* default_entry);
    ::rp4::GateEntry* unsafe_arena_release_default_entry();

    // int32 proc_id = 1;
    void clear_proc_id();
    ::PROTOBUF_NAMESPACE_ID::int32 proc_id() const;
    void set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_proc_id() const;
    void _internal_set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetDefaultGateEntryReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::GateEntry* default_entry_;
    ::PROTOBUF_NAMESPACE_ID::int32 proc_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetDefaultGateEntryResp final
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetDefaultGateEntryResp)
                                               */
{
public:
    inline SetDefaultGateEntryResp() : SetDefaultGateEntryResp(nullptr) {}
    ~SetDefaultGateEntryResp() override;
    explicit constexpr SetDefaultGateEntryResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetDefaultGateEntryResp(const SetDefaultGateEntryResp& from);
    SetDefaultGateEntryResp(SetDefaultGateEntryResp&& from) noexcept
        : SetDefaultGateEntryResp() {
        *this = ::std::move(from);
    }

    inline SetDefaultGateEntryResp&
    operator=(const SetDefaultGateEntryResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetDefaultGateEntryResp&
    operator=(SetDefaultGateEntryResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetDefaultGateEntryResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetDefaultGateEntryResp* internal_default_instance() {
        return reinterpret_cast<const SetDefaultGateEntryResp*>(
            &_SetDefaultGateEntryResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 14;

    friend void swap(SetDefaultGateEntryResp& a, SetDefaultGateEntryResp& b) {
        a.Swap(&b);
    }
    inline void Swap(SetDefaultGateEntryResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetDefaultGateEntryResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetDefaultGateEntryResp* New() const final {
        return new SetDefaultGateEntryResp();
    }

    SetDefaultGateEntryResp*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetDefaultGateEntryResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetDefaultGateEntryResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetDefaultGateEntryResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetDefaultGateEntryResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetDefaultGateEntryResp";
    }

protected:
    explicit SetDefaultGateEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                     bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetDefaultGateEntryResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class GatewayParam final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.GatewayParam)
                                                                    */
{
public:
    inline GatewayParam() : GatewayParam(nullptr) {}
    ~GatewayParam() override;
    explicit constexpr GatewayParam(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    GatewayParam(const GatewayParam& from);
    GatewayParam(GatewayParam&& from) noexcept : GatewayParam() {
        *this = ::std::move(from);
    }

    inline GatewayParam& operator=(const GatewayParam& from) {
        CopyFrom(from);
        return *this;
    }
    inline GatewayParam& operator=(GatewayParam&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const GatewayParam& default_instance() {
        return *internal_default_instance();
    }
    enum ValueCase {
        kField = 2,
        kData = 3,
        VALUE_NOT_SET = 0,
    };

    static inline const GatewayParam* internal_default_instance() {
        return reinterpret_cast<const GatewayParam*>(
            &_GatewayParam_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 15;

    friend void swap(GatewayParam& a, GatewayParam& b) { a.Swap(&b); }
    inline void Swap(GatewayParam* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(GatewayParam* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline GatewayParam* New() const final { return new GatewayParam(); }

    GatewayParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<GatewayParam>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const GatewayParam& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const GatewayParam& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(GatewayParam* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.GatewayParam";
    }

protected:
    explicit GatewayParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                          bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kParamTypeFieldNumber = 1,
        kFieldFieldNumber = 2,
        kDataFieldNumber = 3,
    };
    // .rp4.ParameterType paramType = 1;
    void clear_paramtype();
    ::rp4::ParameterType paramtype() const;
    void set_paramtype(::rp4::ParameterType value);

private:
    ::rp4::ParameterType _internal_paramtype() const;
    void _internal_set_paramtype(::rp4::ParameterType value);

public:
    // .rp4.FieldInfo field = 2;
    bool has_field() const;

private:
    bool _internal_has_field() const;

public:
    void clear_field();
    const ::rp4::FieldInfo& field() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::FieldInfo* release_field();
    ::rp4::FieldInfo* mutable_field();
    void set_allocated_field(::rp4::FieldInfo* field);

private:
    const ::rp4::FieldInfo& _internal_field() const;
    ::rp4::FieldInfo* _internal_mutable_field();

public:
    void unsafe_arena_set_allocated_field(::rp4::FieldInfo* field);
    ::rp4::FieldInfo* unsafe_arena_release_field();

    // .rp4.Data data = 3;
    bool has_data() const;

private:
    bool _internal_has_data() const;

public:
    void clear_data();
    const ::rp4::Data& data() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::Data* release_data();
    ::rp4::Data* mutable_data();
    void set_allocated_data(::rp4::Data* data);

private:
    const ::rp4::Data& _internal_data() const;
    ::rp4::Data* _internal_mutable_data();

public:
    void unsafe_arena_set_allocated_data(::rp4::Data* data);
    ::rp4::Data* unsafe_arena_release_data();

    void clear_value();
    ValueCase value_case() const;
    // @@protoc_insertion_point(class_scope:rp4.GatewayParam)
private:
    class _Internal;
    void set_has_field();
    void set_has_data();

    inline bool has_value() const;
    inline void clear_has_value();

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int paramtype_;
    union ValueUnion {
        constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
        ::rp4::FieldInfo* field_;
        ::rp4::Data* data_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class RelationExp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.RelationExp)
                                                                   */
{
public:
    inline RelationExp() : RelationExp(nullptr) {}
    ~RelationExp() override;
    explicit constexpr RelationExp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    RelationExp(const RelationExp& from);
    RelationExp(RelationExp&& from) noexcept : RelationExp() {
        *this = ::std::move(from);
    }

    inline RelationExp& operator=(const RelationExp& from) {
        CopyFrom(from);
        return *this;
    }
    inline RelationExp& operator=(RelationExp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const RelationExp& default_instance() {
        return *internal_default_instance();
    }
    static inline const RelationExp* internal_default_instance() {
        return reinterpret_cast<const RelationExp*>(
            &_RelationExp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 16;

    friend void swap(RelationExp& a, RelationExp& b) { a.Swap(&b); }
    inline void Swap(RelationExp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(RelationExp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline RelationExp* New() const final { return new RelationExp(); }

    RelationExp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<RelationExp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const RelationExp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const RelationExp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(RelationExp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.RelationExp";
    }

protected:
    explicit RelationExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kParam1FieldNumber = 1,
        kParam2FieldNumber = 2,
        kRelationFieldNumber = 3,
    };
    // .rp4.GatewayParam param1 = 1;
    bool has_param1() const;

private:
    bool _internal_has_param1() const;

public:
    void clear_param1();
    const ::rp4::GatewayParam& param1() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::GatewayParam* release_param1();
    ::rp4::GatewayParam* mutable_param1();
    void set_allocated_param1(::rp4::GatewayParam* param1);

private:
    const ::rp4::GatewayParam& _internal_param1() const;
    ::rp4::GatewayParam* _internal_mutable_param1();

public:
    void unsafe_arena_set_allocated_param1(::rp4::GatewayParam* param1);
    ::rp4::GatewayParam* unsafe_arena_release_param1();

    // .rp4.GatewayParam param2 = 2;
    bool has_param2() const;

private:
    bool _internal_has_param2() const;

public:
    void clear_param2();
    const ::rp4::GatewayParam& param2() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::GatewayParam* release_param2();
    ::rp4::GatewayParam* mutable_param2();
    void set_allocated_param2(::rp4::GatewayParam* param2);

private:
    const ::rp4::GatewayParam& _internal_param2() const;
    ::rp4::GatewayParam* _internal_mutable_param2();

public:
    void unsafe_arena_set_allocated_param2(::rp4::GatewayParam* param2);
    ::rp4::GatewayParam* unsafe_arena_release_param2();

    // .rp4.RelationCode relation = 3;
    void clear_relation();
    ::rp4::RelationCode relation() const;
    void set_relation(::rp4::RelationCode value);

private:
    ::rp4::RelationCode _internal_relation() const;
    void _internal_set_relation(::rp4::RelationCode value);

public:
    // @@protoc_insertion_point(class_scope:rp4.RelationExp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::GatewayParam* param1_;
    ::rp4::GatewayParam* param2_;
    int relation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertRelationExpReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertRelationExpReq)
                                                                            */
{
public:
    inline InsertRelationExpReq() : InsertRelationExpReq(nullptr) {}
    ~InsertRelationExpReq() override;
    explicit constexpr InsertRelationExpReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertRelationExpReq(const InsertRelationExpReq& from);
    InsertRelationExpReq(InsertRelationExpReq&& from) noexcept
        : InsertRelationExpReq() {
        *this = ::std::move(from);
    }

    inline InsertRelationExpReq& operator=(const InsertRelationExpReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertRelationExpReq&
    operator=(InsertRelationExpReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertRelationExpReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertRelationExpReq* internal_default_instance() {
        return reinterpret_cast<const InsertRelationExpReq*>(
            &_InsertRelationExpReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 17;

    friend void swap(InsertRelationExpReq& a, InsertRelationExpReq& b) {
        a.Swap(&b);
    }
    inline void Swap(InsertRelationExpReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertRelationExpReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertRelationExpReq* New() const final {
        return new InsertRelationExpReq();
    }

    InsertRelationExpReq*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertRelationExpReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertRelationExpReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertRelationExpReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertRelationExpReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertRelationExpReq";
    }

protected:
    explicit InsertRelationExpReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                  bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kParam1FieldNumber = 2,
        kParam2FieldNumber = 3,
        kProcIdFieldNumber = 1,
        kRelationFieldNumber = 4,
    };
    // .rp4.GatewayParam param1 = 2;
    bool has_param1() const;

private:
    bool _internal_has_param1() const;

public:
    void clear_param1();
    const ::rp4::GatewayParam& param1() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::GatewayParam* release_param1();
    ::rp4::GatewayParam* mutable_param1();
    void set_allocated_param1(::rp4::GatewayParam* param1);

private:
    const ::rp4::GatewayParam& _internal_param1() const;
    ::rp4::GatewayParam* _internal_mutable_param1();

public:
    void unsafe_arena_set_allocated_param1(::rp4::GatewayParam* param1);
    ::rp4::GatewayParam* unsafe_arena_release_param1();

    // .rp4.GatewayParam param2 = 3;
    bool has_param2() const;

private:
    bool _internal_has_param2() const;

public:
    void clear_param2();
    const ::rp4::GatewayParam& param2() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::GatewayParam* release_param2();
    ::rp4::GatewayParam* mutable_param2();
    void set_allocated_param2(::rp4::GatewayParam* param2);

private:
    const ::rp4::GatewayParam& _internal_param2() const;
    ::rp4::GatewayParam* _internal_mutable_param2();

public:
    void unsafe_arena_set_allocated_param2(::rp4::GatewayParam* param2);
    ::rp4::GatewayParam* unsafe_arena_release_param2();

    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // .rp4.RelationCode relation = 4;
    void clear_relation();
    ::rp4::RelationCode relation() const;
    void set_relation(::rp4::RelationCode value);

private:
    ::rp4::RelationCode _internal_relation() const;
    void _internal_set_relation(::rp4::RelationCode value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertRelationExpReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::GatewayParam* param1_;
    ::rp4::GatewayParam* param2_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    int relation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertRelationExpResp final
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertRelationExpResp)
                                               */
{
public:
    inline InsertRelationExpResp() : InsertRelationExpResp(nullptr) {}
    ~InsertRelationExpResp() override;
    explicit constexpr InsertRelationExpResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertRelationExpResp(const InsertRelationExpResp& from);
    InsertRelationExpResp(InsertRelationExpResp&& from) noexcept
        : InsertRelationExpResp() {
        *this = ::std::move(from);
    }

    inline InsertRelationExpResp& operator=(const InsertRelationExpResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertRelationExpResp&
    operator=(InsertRelationExpResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertRelationExpResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertRelationExpResp* internal_default_instance() {
        return reinterpret_cast<const InsertRelationExpResp*>(
            &_InsertRelationExpResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 18;

    friend void swap(InsertRelationExpResp& a, InsertRelationExpResp& b) {
        a.Swap(&b);
    }
    inline void Swap(InsertRelationExpResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertRelationExpResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertRelationExpResp* New() const final {
        return new InsertRelationExpResp();
    }

    InsertRelationExpResp*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertRelationExpResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertRelationExpResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertRelationExpResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertRelationExpResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertRelationExpResp";
    }

protected:
    explicit InsertRelationExpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                   bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertRelationExpResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearRelationExpReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearRelationExpReq)
                                                                           */
{
public:
    inline ClearRelationExpReq() : ClearRelationExpReq(nullptr) {}
    ~ClearRelationExpReq() override;
    explicit constexpr ClearRelationExpReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearRelationExpReq(const ClearRelationExpReq& from);
    ClearRelationExpReq(ClearRelationExpReq&& from) noexcept
        : ClearRelationExpReq() {
        *this = ::std::move(from);
    }

    inline ClearRelationExpReq& operator=(const ClearRelationExpReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearRelationExpReq& operator=(ClearRelationExpReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearRelationExpReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearRelationExpReq* internal_default_instance() {
        return reinterpret_cast<const ClearRelationExpReq*>(
            &_ClearRelationExpReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 19;

    friend void swap(ClearRelationExpReq& a, ClearRelationExpReq& b) {
        a.Swap(&b);
    }
    inline void Swap(ClearRelationExpReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearRelationExpReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearRelationExpReq* New() const final {
        return new ClearRelationExpReq();
    }

    ClearRelationExpReq*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearRelationExpReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearRelationExpReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearRelationExpReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearRelationExpReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearRelationExpReq";
    }

protected:
    explicit ClearRelationExpReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearRelationExpReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearRelationExpResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearRelationExpResp)
                                                                            */
{
public:
    inline ClearRelationExpResp() : ClearRelationExpResp(nullptr) {}
    ~ClearRelationExpResp() override;
    explicit constexpr ClearRelationExpResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearRelationExpResp(const ClearRelationExpResp& from);
    ClearRelationExpResp(ClearRelationExpResp&& from) noexcept
        : ClearRelationExpResp() {
        *this = ::std::move(from);
    }

    inline ClearRelationExpResp& operator=(const ClearRelationExpResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearRelationExpResp&
    operator=(ClearRelationExpResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearRelationExpResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearRelationExpResp* internal_default_instance() {
        return reinterpret_cast<const ClearRelationExpResp*>(
            &_ClearRelationExpResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 20;

    friend void swap(ClearRelationExpResp& a, ClearRelationExpResp& b) {
        a.Swap(&b);
    }
    inline void Swap(ClearRelationExpResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearRelationExpResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearRelationExpResp* New() const final {
        return new ClearRelationExpResp();
    }

    ClearRelationExpResp*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearRelationExpResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearRelationExpResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearRelationExpResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearRelationExpResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearRelationExpResp";
    }

protected:
    explicit ClearRelationExpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                  bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearRelationExpResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearResMapReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearResMapReq)
                                                                      */
{
public:
    inline ClearResMapReq() : ClearResMapReq(nullptr) {}
    ~ClearResMapReq() override;
    explicit constexpr ClearResMapReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearResMapReq(const ClearResMapReq& from);
    ClearResMapReq(ClearResMapReq&& from) noexcept : ClearResMapReq() {
        *this = ::std::move(from);
    }

    inline ClearResMapReq& operator=(const ClearResMapReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearResMapReq& operator=(ClearResMapReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearResMapReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearResMapReq* internal_default_instance() {
        return reinterpret_cast<const ClearResMapReq*>(
            &_ClearResMapReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 21;

    friend void swap(ClearResMapReq& a, ClearResMapReq& b) { a.Swap(&b); }
    inline void Swap(ClearResMapReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearResMapReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearResMapReq* New() const final { return new ClearResMapReq(); }

    ClearResMapReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearResMapReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearResMapReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearResMapReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearResMapReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearResMapReq";
    }

protected:
    explicit ClearResMapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearResMapReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearResMapResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearResMapResp)
                                                                       */
{
public:
    inline ClearResMapResp() : ClearResMapResp(nullptr) {}
    ~ClearResMapResp() override;
    explicit constexpr ClearResMapResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearResMapResp(const ClearResMapResp& from);
    ClearResMapResp(ClearResMapResp&& from) noexcept : ClearResMapResp() {
        *this = ::std::move(from);
    }

    inline ClearResMapResp& operator=(const ClearResMapResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearResMapResp& operator=(ClearResMapResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearResMapResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearResMapResp* internal_default_instance() {
        return reinterpret_cast<const ClearResMapResp*>(
            &_ClearResMapResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 22;

    friend void swap(ClearResMapResp& a, ClearResMapResp& b) { a.Swap(&b); }
    inline void Swap(ClearResMapResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearResMapResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearResMapResp* New() const final { return new ClearResMapResp(); }

    ClearResMapResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearResMapResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearResMapResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearResMapResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearResMapResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearResMapResp";
    }

protected:
    explicit ClearResMapResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearResMapResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ModResMapReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ModResMapReq)
                                                                    */
{
public:
    inline ModResMapReq() : ModResMapReq(nullptr) {}
    ~ModResMapReq() override;
    explicit constexpr ModResMapReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ModResMapReq(const ModResMapReq& from);
    ModResMapReq(ModResMapReq&& from) noexcept : ModResMapReq() {
        *this = ::std::move(from);
    }

    inline ModResMapReq& operator=(const ModResMapReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ModResMapReq& operator=(ModResMapReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ModResMapReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ModResMapReq* internal_default_instance() {
        return reinterpret_cast<const ModResMapReq*>(
            &_ModResMapReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 23;

    friend void swap(ModResMapReq& a, ModResMapReq& b) { a.Swap(&b); }
    inline void Swap(ModResMapReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ModResMapReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ModResMapReq* New() const final { return new ModResMapReq(); }

    ModResMapReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ModResMapReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ModResMapReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ModResMapReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ModResMapReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ModResMapReq";
    }

protected:
    explicit ModResMapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                          bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kEntryFieldNumber = 3,
        kProcIdFieldNumber = 1,
        kKeyFieldNumber = 2,
    };
    // .rp4.GateEntry entry = 3;
    bool has_entry() const;

private:
    bool _internal_has_entry() const;

public:
    void clear_entry();
    const ::rp4::GateEntry& entry() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::GateEntry* release_entry();
    ::rp4::GateEntry* mutable_entry();
    void set_allocated_entry(::rp4::GateEntry* entry);

private:
    const ::rp4::GateEntry& _internal_entry() const;
    ::rp4::GateEntry* _internal_mutable_entry();

public:
    void unsafe_arena_set_allocated_entry(::rp4::GateEntry* entry);
    ::rp4::GateEntry* unsafe_arena_release_entry();

    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 key = 2;
    void clear_key();
    ::PROTOBUF_NAMESPACE_ID::int32 key() const;
    void set_key(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_key() const;
    void _internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ModResMapReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::GateEntry* entry_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ModResMapResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ModResMapResp)
                                                                     */
{
public:
    inline ModResMapResp() : ModResMapResp(nullptr) {}
    ~ModResMapResp() override;
    explicit constexpr ModResMapResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ModResMapResp(const ModResMapResp& from);
    ModResMapResp(ModResMapResp&& from) noexcept : ModResMapResp() {
        *this = ::std::move(from);
    }

    inline ModResMapResp& operator=(const ModResMapResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ModResMapResp& operator=(ModResMapResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ModResMapResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ModResMapResp* internal_default_instance() {
        return reinterpret_cast<const ModResMapResp*>(
            &_ModResMapResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 24;

    friend void swap(ModResMapResp& a, ModResMapResp& b) { a.Swap(&b); }
    inline void Swap(ModResMapResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ModResMapResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ModResMapResp* New() const final { return new ModResMapResp(); }

    ModResMapResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ModResMapResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ModResMapResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ModResMapResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ModResMapResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ModResMapResp";
    }

protected:
    explicit ModResMapResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ModResMapResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetNoTableReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetNoTableReq)
                                                                     */
{
public:
    inline SetNoTableReq() : SetNoTableReq(nullptr) {}
    ~SetNoTableReq() override;
    explicit constexpr SetNoTableReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetNoTableReq(const SetNoTableReq& from);
    SetNoTableReq(SetNoTableReq&& from) noexcept : SetNoTableReq() {
        *this = ::std::move(from);
    }

    inline SetNoTableReq& operator=(const SetNoTableReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetNoTableReq& operator=(SetNoTableReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetNoTableReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetNoTableReq* internal_default_instance() {
        return reinterpret_cast<const SetNoTableReq*>(
            &_SetNoTableReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 25;

    friend void swap(SetNoTableReq& a, SetNoTableReq& b) { a.Swap(&b); }
    inline void Swap(SetNoTableReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetNoTableReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetNoTableReq* New() const final { return new SetNoTableReq(); }

    SetNoTableReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetNoTableReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetNoTableReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetNoTableReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetNoTableReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetNoTableReq";
    }

protected:
    explicit SetNoTableReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
        kNoTableFieldNumber = 3,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // bool noTable = 3;
    void clear_notable();
    bool notable() const;
    void set_notable(bool value);

private:
    bool _internal_notable() const;
    void _internal_set_notable(bool value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetNoTableReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    bool notable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetNoTableResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetNoTableResp)
                                                                      */
{
public:
    inline SetNoTableResp() : SetNoTableResp(nullptr) {}
    ~SetNoTableResp() override;
    explicit constexpr SetNoTableResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetNoTableResp(const SetNoTableResp& from);
    SetNoTableResp(SetNoTableResp&& from) noexcept : SetNoTableResp() {
        *this = ::std::move(from);
    }

    inline SetNoTableResp& operator=(const SetNoTableResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetNoTableResp& operator=(SetNoTableResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetNoTableResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetNoTableResp* internal_default_instance() {
        return reinterpret_cast<const SetNoTableResp*>(
            &_SetNoTableResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 26;

    friend void swap(SetNoTableResp& a, SetNoTableResp& b) { a.Swap(&b); }
    inline void Swap(SetNoTableResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetNoTableResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetNoTableResp* New() const final { return new SetNoTableResp(); }

    SetNoTableResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetNoTableResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetNoTableResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetNoTableResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetNoTableResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetNoTableResp";
    }

protected:
    explicit SetNoTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetNoTableResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ActionProc final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ActionProc)
                                                                  */
{
public:
    inline ActionProc() : ActionProc(nullptr) {}
    ~ActionProc() override;
    explicit constexpr ActionProc(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ActionProc(const ActionProc& from);
    ActionProc(ActionProc&& from) noexcept : ActionProc() {
        *this = ::std::move(from);
    }

    inline ActionProc& operator=(const ActionProc& from) {
        CopyFrom(from);
        return *this;
    }
    inline ActionProc& operator=(ActionProc&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ActionProc& default_instance() {
        return *internal_default_instance();
    }
    static inline const ActionProc* internal_default_instance() {
        return reinterpret_cast<const ActionProc*>(
            &_ActionProc_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 27;

    friend void swap(ActionProc& a, ActionProc& b) { a.Swap(&b); }
    inline void Swap(ActionProc* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ActionProc* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ActionProc* New() const final { return new ActionProc(); }

    ActionProc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ActionProc>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ActionProc& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ActionProc& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ActionProc* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ActionProc";
    }

protected:
    explicit ActionProc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                        bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionIdFieldNumber = 1,
        kProcIdFieldNumber = 2,
    };
    // int32 actionId = 1;
    void clear_actionid();
    ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
    void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
    void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 procId = 2;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ActionProc)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetActionProcReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetActionProcReq)
                                                                        */
{
public:
    inline SetActionProcReq() : SetActionProcReq(nullptr) {}
    ~SetActionProcReq() override;
    explicit constexpr SetActionProcReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetActionProcReq(const SetActionProcReq& from);
    SetActionProcReq(SetActionProcReq&& from) noexcept : SetActionProcReq() {
        *this = ::std::move(from);
    }

    inline SetActionProcReq& operator=(const SetActionProcReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetActionProcReq& operator=(SetActionProcReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetActionProcReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetActionProcReq* internal_default_instance() {
        return reinterpret_cast<const SetActionProcReq*>(
            &_SetActionProcReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 28;

    friend void swap(SetActionProcReq& a, SetActionProcReq& b) { a.Swap(&b); }
    inline void Swap(SetActionProcReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetActionProcReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetActionProcReq* New() const final {
        return new SetActionProcReq();
    }

    SetActionProcReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetActionProcReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetActionProcReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetActionProcReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetActionProcReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetActionProcReq";
    }

protected:
    explicit SetActionProcReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionProcsFieldNumber = 3,
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
    };
    // repeated .rp4.ActionProc actionProcs = 3;
    int actionprocs_size() const;

private:
    int _internal_actionprocs_size() const;

public:
    void clear_actionprocs();
    ::rp4::ActionProc* mutable_actionprocs(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::ActionProc>*
    mutable_actionprocs();

private:
    const ::rp4::ActionProc& _internal_actionprocs(int index) const;
    ::rp4::ActionProc* _internal_add_actionprocs();

public:
    const ::rp4::ActionProc& actionprocs(int index) const;
    ::rp4::ActionProc* add_actionprocs();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::ActionProc>&
    actionprocs() const;

    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetActionProcReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::ActionProc> actionprocs_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetActionProcResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetActionProcResp)
                                                                         */
{
public:
    inline SetActionProcResp() : SetActionProcResp(nullptr) {}
    ~SetActionProcResp() override;
    explicit constexpr SetActionProcResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetActionProcResp(const SetActionProcResp& from);
    SetActionProcResp(SetActionProcResp&& from) noexcept : SetActionProcResp() {
        *this = ::std::move(from);
    }

    inline SetActionProcResp& operator=(const SetActionProcResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetActionProcResp& operator=(SetActionProcResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetActionProcResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetActionProcResp* internal_default_instance() {
        return reinterpret_cast<const SetActionProcResp*>(
            &_SetActionProcResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 29;

    friend void swap(SetActionProcResp& a, SetActionProcResp& b) { a.Swap(&b); }
    inline void Swap(SetActionProcResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetActionProcResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetActionProcResp* New() const final {
        return new SetActionProcResp();
    }

    SetActionProcResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetActionProcResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetActionProcResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetActionProcResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetActionProcResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetActionProcResp";
    }

protected:
    explicit SetActionProcResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetActionProcResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetMemConfigReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetMemConfigReq)
                                                                       */
{
public:
    inline SetMemConfigReq() : SetMemConfigReq(nullptr) {}
    ~SetMemConfigReq() override;
    explicit constexpr SetMemConfigReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetMemConfigReq(const SetMemConfigReq& from);
    SetMemConfigReq(SetMemConfigReq&& from) noexcept : SetMemConfigReq() {
        *this = ::std::move(from);
    }

    inline SetMemConfigReq& operator=(const SetMemConfigReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetMemConfigReq& operator=(SetMemConfigReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetMemConfigReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetMemConfigReq* internal_default_instance() {
        return reinterpret_cast<const SetMemConfigReq*>(
            &_SetMemConfigReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 30;

    friend void swap(SetMemConfigReq& a, SetMemConfigReq& b) { a.Swap(&b); }
    inline void Swap(SetMemConfigReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetMemConfigReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetMemConfigReq* New() const final { return new SetMemConfigReq(); }

    SetMemConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetMemConfigReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetMemConfigReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetMemConfigReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetMemConfigReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetMemConfigReq";
    }

protected:
    explicit SetMemConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kKeyConfigFieldNumber = 5,
        kValueConfigFieldNumber = 6,
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
        kKeyWidthFieldNumber = 3,
        kValueWidthFieldNumber = 4,
        kMatchTypeFieldNumber = 7,
        kDepthFieldNumber = 8,
        kMissActIdFieldNumber = 9,
    };
    // bytes keyConfig = 5;
    void clear_keyconfig();
    const std::string& keyconfig() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_keyconfig(ArgT0&& arg0, ArgT... args);
    std::string* mutable_keyconfig();
    PROTOBUF_MUST_USE_RESULT std::string* release_keyconfig();
    void set_allocated_keyconfig(std::string* keyconfig);

private:
    const std::string& _internal_keyconfig() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_keyconfig(const std::string& value);
    std::string* _internal_mutable_keyconfig();

public:
    // bytes valueConfig = 6;
    void clear_valueconfig();
    const std::string& valueconfig() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_valueconfig(ArgT0&& arg0, ArgT... args);
    std::string* mutable_valueconfig();
    PROTOBUF_MUST_USE_RESULT std::string* release_valueconfig();
    void set_allocated_valueconfig(std::string* valueconfig);

private:
    const std::string& _internal_valueconfig() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_valueconfig(const std::string& value);
    std::string* _internal_mutable_valueconfig();

public:
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 keyWidth = 3;
    void clear_keywidth();
    ::PROTOBUF_NAMESPACE_ID::int32 keywidth() const;
    void set_keywidth(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_keywidth() const;
    void _internal_set_keywidth(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 valueWidth = 4;
    void clear_valuewidth();
    ::PROTOBUF_NAMESPACE_ID::int32 valuewidth() const;
    void set_valuewidth(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_valuewidth() const;
    void _internal_set_valuewidth(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // .rp4.MatchType matchType = 7;
    void clear_matchtype();
    ::rp4::MatchType matchtype() const;
    void set_matchtype(::rp4::MatchType value);

private:
    ::rp4::MatchType _internal_matchtype() const;
    void _internal_set_matchtype(::rp4::MatchType value);

public:
    // int32 depth = 8;
    void clear_depth();
    ::PROTOBUF_NAMESPACE_ID::int32 depth() const;
    void set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_depth() const;
    void _internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 missActId = 9;
    void clear_missactid();
    ::PROTOBUF_NAMESPACE_ID::int32 missactid() const;
    void set_missactid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_missactid() const;
    void _internal_set_missactid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetMemConfigReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyconfig_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valueconfig_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    ::PROTOBUF_NAMESPACE_ID::int32 keywidth_;
    ::PROTOBUF_NAMESPACE_ID::int32 valuewidth_;
    int matchtype_;
    ::PROTOBUF_NAMESPACE_ID::int32 depth_;
    ::PROTOBUF_NAMESPACE_ID::int32 missactid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetMemConfigResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetMemConfigResp)
                                                                        */
{
public:
    inline SetMemConfigResp() : SetMemConfigResp(nullptr) {}
    ~SetMemConfigResp() override;
    explicit constexpr SetMemConfigResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetMemConfigResp(const SetMemConfigResp& from);
    SetMemConfigResp(SetMemConfigResp&& from) noexcept : SetMemConfigResp() {
        *this = ::std::move(from);
    }

    inline SetMemConfigResp& operator=(const SetMemConfigResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetMemConfigResp& operator=(SetMemConfigResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetMemConfigResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetMemConfigResp* internal_default_instance() {
        return reinterpret_cast<const SetMemConfigResp*>(
            &_SetMemConfigResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 31;

    friend void swap(SetMemConfigResp& a, SetMemConfigResp& b) { a.Swap(&b); }
    inline void Swap(SetMemConfigResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetMemConfigResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetMemConfigResp* New() const final {
        return new SetMemConfigResp();
    }

    SetMemConfigResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetMemConfigResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetMemConfigResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetMemConfigResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetMemConfigResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetMemConfigResp";
    }

protected:
    explicit SetMemConfigResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetMemConfigResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetFieldInfoReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetFieldInfoReq)
                                                                       */
{
public:
    inline SetFieldInfoReq() : SetFieldInfoReq(nullptr) {}
    ~SetFieldInfoReq() override;
    explicit constexpr SetFieldInfoReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetFieldInfoReq(const SetFieldInfoReq& from);
    SetFieldInfoReq(SetFieldInfoReq&& from) noexcept : SetFieldInfoReq() {
        *this = ::std::move(from);
    }

    inline SetFieldInfoReq& operator=(const SetFieldInfoReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetFieldInfoReq& operator=(SetFieldInfoReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetFieldInfoReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetFieldInfoReq* internal_default_instance() {
        return reinterpret_cast<const SetFieldInfoReq*>(
            &_SetFieldInfoReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 32;

    friend void swap(SetFieldInfoReq& a, SetFieldInfoReq& b) { a.Swap(&b); }
    inline void Swap(SetFieldInfoReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetFieldInfoReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetFieldInfoReq* New() const final { return new SetFieldInfoReq(); }

    SetFieldInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetFieldInfoReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetFieldInfoReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetFieldInfoReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetFieldInfoReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetFieldInfoReq";
    }

protected:
    explicit SetFieldInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kFdInfosFieldNumber = 3,
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
    };
    // repeated .rp4.FieldInfo fdInfos = 3;
    int fdinfos_size() const;

private:
    int _internal_fdinfos_size() const;

public:
    void clear_fdinfos();
    ::rp4::FieldInfo* mutable_fdinfos(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>*
    mutable_fdinfos();

private:
    const ::rp4::FieldInfo& _internal_fdinfos(int index) const;
    ::rp4::FieldInfo* _internal_add_fdinfos();

public:
    const ::rp4::FieldInfo& fdinfos(int index) const;
    ::rp4::FieldInfo* add_fdinfos();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>&
    fdinfos() const;

    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetFieldInfoReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo> fdinfos_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetFieldInfoResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetFieldInfoResp)
                                                                        */
{
public:
    inline SetFieldInfoResp() : SetFieldInfoResp(nullptr) {}
    ~SetFieldInfoResp() override;
    explicit constexpr SetFieldInfoResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetFieldInfoResp(const SetFieldInfoResp& from);
    SetFieldInfoResp(SetFieldInfoResp&& from) noexcept : SetFieldInfoResp() {
        *this = ::std::move(from);
    }

    inline SetFieldInfoResp& operator=(const SetFieldInfoResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetFieldInfoResp& operator=(SetFieldInfoResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetFieldInfoResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetFieldInfoResp* internal_default_instance() {
        return reinterpret_cast<const SetFieldInfoResp*>(
            &_SetFieldInfoResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 33;

    friend void swap(SetFieldInfoResp& a, SetFieldInfoResp& b) { a.Swap(&b); }
    inline void Swap(SetFieldInfoResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetFieldInfoResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetFieldInfoResp* New() const final {
        return new SetFieldInfoResp();
    }

    SetFieldInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetFieldInfoResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetFieldInfoResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetFieldInfoResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetFieldInfoResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetFieldInfoResp";
    }

protected:
    explicit SetFieldInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetFieldInfoResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertSramEntryReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertSramEntryReq)
                                                                          */
{
public:
    inline InsertSramEntryReq() : InsertSramEntryReq(nullptr) {}
    ~InsertSramEntryReq() override;
    explicit constexpr InsertSramEntryReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertSramEntryReq(const InsertSramEntryReq& from);
    InsertSramEntryReq(InsertSramEntryReq&& from) noexcept
        : InsertSramEntryReq() {
        *this = ::std::move(from);
    }

    inline InsertSramEntryReq& operator=(const InsertSramEntryReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertSramEntryReq& operator=(InsertSramEntryReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertSramEntryReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertSramEntryReq* internal_default_instance() {
        return reinterpret_cast<const InsertSramEntryReq*>(
            &_InsertSramEntryReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 34;

    friend void swap(InsertSramEntryReq& a, InsertSramEntryReq& b) {
        a.Swap(&b);
    }
    inline void Swap(InsertSramEntryReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertSramEntryReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertSramEntryReq* New() const final {
        return new InsertSramEntryReq();
    }

    InsertSramEntryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertSramEntryReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertSramEntryReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertSramEntryReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertSramEntryReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertSramEntryReq";
    }

protected:
    explicit InsertSramEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kKeyFieldNumber = 3,
        kValueFieldNumber = 4,
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
        kKeyByteLenFieldNumber = 5,
        kValueByteLenFieldNumber = 6,
    };
    // bytes key = 3;
    void clear_key();
    const std::string& key() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_key(ArgT0&& arg0, ArgT... args);
    std::string* mutable_key();
    PROTOBUF_MUST_USE_RESULT std::string* release_key();
    void set_allocated_key(std::string* key);

private:
    const std::string& _internal_key() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_key(const std::string& value);
    std::string* _internal_mutable_key();

public:
    // bytes value = 4;
    void clear_value();
    const std::string& value() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_value(ArgT0&& arg0, ArgT... args);
    std::string* mutable_value();
    PROTOBUF_MUST_USE_RESULT std::string* release_value();
    void set_allocated_value(std::string* value);

private:
    const std::string& _internal_value() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_value(const std::string& value);
    std::string* _internal_mutable_value();

public:
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 key_byte_len = 5;
    void clear_key_byte_len();
    ::PROTOBUF_NAMESPACE_ID::int32 key_byte_len() const;
    void set_key_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_byte_len() const;
    void _internal_set_key_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 value_byte_len = 6;
    void clear_value_byte_len();
    ::PROTOBUF_NAMESPACE_ID::int32 value_byte_len() const;
    void set_value_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_byte_len() const;
    void _internal_set_value_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertSramEntryReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    ::PROTOBUF_NAMESPACE_ID::int32 key_byte_len_;
    ::PROTOBUF_NAMESPACE_ID::int32 value_byte_len_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertSramEntryResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertSramEntryResp)
                                                                           */
{
public:
    inline InsertSramEntryResp() : InsertSramEntryResp(nullptr) {}
    ~InsertSramEntryResp() override;
    explicit constexpr InsertSramEntryResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertSramEntryResp(const InsertSramEntryResp& from);
    InsertSramEntryResp(InsertSramEntryResp&& from) noexcept
        : InsertSramEntryResp() {
        *this = ::std::move(from);
    }

    inline InsertSramEntryResp& operator=(const InsertSramEntryResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertSramEntryResp& operator=(InsertSramEntryResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertSramEntryResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertSramEntryResp* internal_default_instance() {
        return reinterpret_cast<const InsertSramEntryResp*>(
            &_InsertSramEntryResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 35;

    friend void swap(InsertSramEntryResp& a, InsertSramEntryResp& b) {
        a.Swap(&b);
    }
    inline void Swap(InsertSramEntryResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertSramEntryResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertSramEntryResp* New() const final {
        return new InsertSramEntryResp();
    }

    InsertSramEntryResp*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertSramEntryResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertSramEntryResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertSramEntryResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertSramEntryResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertSramEntryResp";
    }

protected:
    explicit InsertSramEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertSramEntryResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertTcamEntryReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertTcamEntryReq)
                                                                          */
{
public:
    inline InsertTcamEntryReq() : InsertTcamEntryReq(nullptr) {}
    ~InsertTcamEntryReq() override;
    explicit constexpr InsertTcamEntryReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertTcamEntryReq(const InsertTcamEntryReq& from);
    InsertTcamEntryReq(InsertTcamEntryReq&& from) noexcept
        : InsertTcamEntryReq() {
        *this = ::std::move(from);
    }

    inline InsertTcamEntryReq& operator=(const InsertTcamEntryReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertTcamEntryReq& operator=(InsertTcamEntryReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertTcamEntryReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertTcamEntryReq* internal_default_instance() {
        return reinterpret_cast<const InsertTcamEntryReq*>(
            &_InsertTcamEntryReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 36;

    friend void swap(InsertTcamEntryReq& a, InsertTcamEntryReq& b) {
        a.Swap(&b);
    }
    inline void Swap(InsertTcamEntryReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertTcamEntryReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertTcamEntryReq* New() const final {
        return new InsertTcamEntryReq();
    }

    InsertTcamEntryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertTcamEntryReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertTcamEntryReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertTcamEntryReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertTcamEntryReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertTcamEntryReq";
    }

protected:
    explicit InsertTcamEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kKeyFieldNumber = 3,
        kMaskFieldNumber = 4,
        kValueFieldNumber = 5,
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
        kKeyByteLenFieldNumber = 6,
        kValueByteLenFieldNumber = 7,
    };
    // bytes key = 3;
    void clear_key();
    const std::string& key() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_key(ArgT0&& arg0, ArgT... args);
    std::string* mutable_key();
    PROTOBUF_MUST_USE_RESULT std::string* release_key();
    void set_allocated_key(std::string* key);

private:
    const std::string& _internal_key() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_key(const std::string& value);
    std::string* _internal_mutable_key();

public:
    // bytes mask = 4;
    void clear_mask();
    const std::string& mask() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_mask(ArgT0&& arg0, ArgT... args);
    std::string* mutable_mask();
    PROTOBUF_MUST_USE_RESULT std::string* release_mask();
    void set_allocated_mask(std::string* mask);

private:
    const std::string& _internal_mask() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_mask(const std::string& value);
    std::string* _internal_mutable_mask();

public:
    // bytes value = 5;
    void clear_value();
    const std::string& value() const;
    template <typename ArgT0 = const std::string&, typename... ArgT>
    void set_value(ArgT0&& arg0, ArgT... args);
    std::string* mutable_value();
    PROTOBUF_MUST_USE_RESULT std::string* release_value();
    void set_allocated_value(std::string* value);

private:
    const std::string& _internal_value() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_value(const std::string& value);
    std::string* _internal_mutable_value();

public:
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 key_byte_len = 6;
    void clear_key_byte_len();
    ::PROTOBUF_NAMESPACE_ID::int32 key_byte_len() const;
    void set_key_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_byte_len() const;
    void _internal_set_key_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 value_byte_len = 7;
    void clear_value_byte_len();
    ::PROTOBUF_NAMESPACE_ID::int32 value_byte_len() const;
    void set_value_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_value_byte_len() const;
    void _internal_set_value_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertTcamEntryReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    ::PROTOBUF_NAMESPACE_ID::int32 key_byte_len_;
    ::PROTOBUF_NAMESPACE_ID::int32 value_byte_len_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertTcamEntryResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertTcamEntryResp)
                                                                           */
{
public:
    inline InsertTcamEntryResp() : InsertTcamEntryResp(nullptr) {}
    ~InsertTcamEntryResp() override;
    explicit constexpr InsertTcamEntryResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertTcamEntryResp(const InsertTcamEntryResp& from);
    InsertTcamEntryResp(InsertTcamEntryResp&& from) noexcept
        : InsertTcamEntryResp() {
        *this = ::std::move(from);
    }

    inline InsertTcamEntryResp& operator=(const InsertTcamEntryResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertTcamEntryResp& operator=(InsertTcamEntryResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertTcamEntryResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertTcamEntryResp* internal_default_instance() {
        return reinterpret_cast<const InsertTcamEntryResp*>(
            &_InsertTcamEntryResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 37;

    friend void swap(InsertTcamEntryResp& a, InsertTcamEntryResp& b) {
        a.Swap(&b);
    }
    inline void Swap(InsertTcamEntryResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertTcamEntryResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertTcamEntryResp* New() const final {
        return new InsertTcamEntryResp();
    }

    InsertTcamEntryResp*
    New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertTcamEntryResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertTcamEntryResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertTcamEntryResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertTcamEntryResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertTcamEntryResp";
    }

protected:
    explicit InsertTcamEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                 bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertTcamEntryResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearOldConfigReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearOldConfigReq)
                                                                         */
{
public:
    inline ClearOldConfigReq() : ClearOldConfigReq(nullptr) {}
    ~ClearOldConfigReq() override;
    explicit constexpr ClearOldConfigReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearOldConfigReq(const ClearOldConfigReq& from);
    ClearOldConfigReq(ClearOldConfigReq&& from) noexcept : ClearOldConfigReq() {
        *this = ::std::move(from);
    }

    inline ClearOldConfigReq& operator=(const ClearOldConfigReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearOldConfigReq& operator=(ClearOldConfigReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearOldConfigReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearOldConfigReq* internal_default_instance() {
        return reinterpret_cast<const ClearOldConfigReq*>(
            &_ClearOldConfigReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 38;

    friend void swap(ClearOldConfigReq& a, ClearOldConfigReq& b) { a.Swap(&b); }
    inline void Swap(ClearOldConfigReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearOldConfigReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearOldConfigReq* New() const final {
        return new ClearOldConfigReq();
    }

    ClearOldConfigReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearOldConfigReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearOldConfigReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearOldConfigReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearOldConfigReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearOldConfigReq";
    }

protected:
    explicit ClearOldConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                               bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearOldConfigReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearOldConfigResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearOldConfigResp)
                                                                          */
{
public:
    inline ClearOldConfigResp() : ClearOldConfigResp(nullptr) {}
    ~ClearOldConfigResp() override;
    explicit constexpr ClearOldConfigResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearOldConfigResp(const ClearOldConfigResp& from);
    ClearOldConfigResp(ClearOldConfigResp&& from) noexcept
        : ClearOldConfigResp() {
        *this = ::std::move(from);
    }

    inline ClearOldConfigResp& operator=(const ClearOldConfigResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearOldConfigResp& operator=(ClearOldConfigResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearOldConfigResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearOldConfigResp* internal_default_instance() {
        return reinterpret_cast<const ClearOldConfigResp*>(
            &_ClearOldConfigResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 39;

    friend void swap(ClearOldConfigResp& a, ClearOldConfigResp& b) {
        a.Swap(&b);
    }
    inline void Swap(ClearOldConfigResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearOldConfigResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearOldConfigResp* New() const final {
        return new ClearOldConfigResp();
    }

    ClearOldConfigResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearOldConfigResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearOldConfigResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearOldConfigResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearOldConfigResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearOldConfigResp";
    }

protected:
    explicit ClearOldConfigResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                                bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearOldConfigResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetMissActIdReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetMissActIdReq)
                                                                       */
{
public:
    inline SetMissActIdReq() : SetMissActIdReq(nullptr) {}
    ~SetMissActIdReq() override;
    explicit constexpr SetMissActIdReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetMissActIdReq(const SetMissActIdReq& from);
    SetMissActIdReq(SetMissActIdReq&& from) noexcept : SetMissActIdReq() {
        *this = ::std::move(from);
    }

    inline SetMissActIdReq& operator=(const SetMissActIdReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetMissActIdReq& operator=(SetMissActIdReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetMissActIdReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetMissActIdReq* internal_default_instance() {
        return reinterpret_cast<const SetMissActIdReq*>(
            &_SetMissActIdReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 40;

    friend void swap(SetMissActIdReq& a, SetMissActIdReq& b) { a.Swap(&b); }
    inline void Swap(SetMissActIdReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetMissActIdReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetMissActIdReq* New() const final { return new SetMissActIdReq(); }

    SetMissActIdReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetMissActIdReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetMissActIdReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetMissActIdReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetMissActIdReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetMissActIdReq";
    }

protected:
    explicit SetMissActIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
        kMatcherIdFieldNumber = 2,
        kMissActIdFieldNumber = 3,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 matcherId = 2;
    void clear_matcherid();
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid() const;
    void set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_matcherid() const;
    void _internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 miss_act_id = 3;
    void clear_miss_act_id();
    ::PROTOBUF_NAMESPACE_ID::int32 miss_act_id() const;
    void set_miss_act_id(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_miss_act_id() const;
    void _internal_set_miss_act_id(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetMissActIdReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 matcherid_;
    ::PROTOBUF_NAMESPACE_ID::int32 miss_act_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class SetMissActIdResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.SetMissActIdResp)
                                                                        */
{
public:
    inline SetMissActIdResp() : SetMissActIdResp(nullptr) {}
    ~SetMissActIdResp() override;
    explicit constexpr SetMissActIdResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    SetMissActIdResp(const SetMissActIdResp& from);
    SetMissActIdResp(SetMissActIdResp&& from) noexcept : SetMissActIdResp() {
        *this = ::std::move(from);
    }

    inline SetMissActIdResp& operator=(const SetMissActIdResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline SetMissActIdResp& operator=(SetMissActIdResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const SetMissActIdResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const SetMissActIdResp* internal_default_instance() {
        return reinterpret_cast<const SetMissActIdResp*>(
            &_SetMissActIdResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 41;

    friend void swap(SetMissActIdResp& a, SetMissActIdResp& b) { a.Swap(&b); }
    inline void Swap(SetMissActIdResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(SetMissActIdResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline SetMissActIdResp* New() const final {
        return new SetMissActIdResp();
    }

    SetMissActIdResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<SetMissActIdResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const SetMissActIdResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const SetMissActIdResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(SetMissActIdResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.SetMissActIdResp";
    }

protected:
    explicit SetMissActIdResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.SetMissActIdResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class Parameter final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.Parameter)
                                                                 */
{
public:
    inline Parameter() : Parameter(nullptr) {}
    ~Parameter() override;
    explicit constexpr Parameter(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Parameter(const Parameter& from);
    Parameter(Parameter&& from) noexcept : Parameter() {
        *this = ::std::move(from);
    }

    inline Parameter& operator=(const Parameter& from) {
        CopyFrom(from);
        return *this;
    }
    inline Parameter& operator=(Parameter&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const Parameter& default_instance() {
        return *internal_default_instance();
    }
    enum ValCase {
        kHdrId = 2,
        kField = 3,
        kConstantData = 4,
        kActionParaId = 5,
        kOp = 6,
        VAL_NOT_SET = 0,
    };

    static inline const Parameter* internal_default_instance() {
        return reinterpret_cast<const Parameter*>(
            &_Parameter_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 42;

    friend void swap(Parameter& a, Parameter& b) { a.Swap(&b); }
    inline void Swap(Parameter* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Parameter* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Parameter* New() const final { return new Parameter(); }

    Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<Parameter>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const Parameter& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const Parameter& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Parameter* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.Parameter";
    }

protected:
    explicit Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kTypeFieldNumber = 1,
        kHdrIdFieldNumber = 2,
        kFieldFieldNumber = 3,
        kConstantDataFieldNumber = 4,
        kActionParaIdFieldNumber = 5,
        kOpFieldNumber = 6,
    };
    // .rp4.ParameterType type = 1;
    void clear_type();
    ::rp4::ParameterType type() const;
    void set_type(::rp4::ParameterType value);

private:
    ::rp4::ParameterType _internal_type() const;
    void _internal_set_type(::rp4::ParameterType value);

public:
    // int32 hdrId = 2;
    bool has_hdrid() const;

private:
    bool _internal_has_hdrid() const;

public:
    void clear_hdrid();
    ::PROTOBUF_NAMESPACE_ID::int32 hdrid() const;
    void set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_hdrid() const;
    void _internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // .rp4.FieldInfo field = 3;
    bool has_field() const;

private:
    bool _internal_has_field() const;

public:
    void clear_field();
    const ::rp4::FieldInfo& field() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::FieldInfo* release_field();
    ::rp4::FieldInfo* mutable_field();
    void set_allocated_field(::rp4::FieldInfo* field);

private:
    const ::rp4::FieldInfo& _internal_field() const;
    ::rp4::FieldInfo* _internal_mutable_field();

public:
    void unsafe_arena_set_allocated_field(::rp4::FieldInfo* field);
    ::rp4::FieldInfo* unsafe_arena_release_field();

    // .rp4.Data constantData = 4;
    bool has_constantdata() const;

private:
    bool _internal_has_constantdata() const;

public:
    void clear_constantdata();
    const ::rp4::Data& constantdata() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::Data* release_constantdata();
    ::rp4::Data* mutable_constantdata();
    void set_allocated_constantdata(::rp4::Data* constantdata);

private:
    const ::rp4::Data& _internal_constantdata() const;
    ::rp4::Data* _internal_mutable_constantdata();

public:
    void unsafe_arena_set_allocated_constantdata(::rp4::Data* constantdata);
    ::rp4::Data* unsafe_arena_release_constantdata();

    // int32 actionParaId = 5;
    bool has_actionparaid() const;

private:
    bool _internal_has_actionparaid() const;

public:
    void clear_actionparaid();
    ::PROTOBUF_NAMESPACE_ID::int32 actionparaid() const;
    void set_actionparaid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionparaid() const;
    void _internal_set_actionparaid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // .rp4.OpCode op = 6;
    bool has_op() const;

private:
    bool _internal_has_op() const;

public:
    void clear_op();
    ::rp4::OpCode op() const;
    void set_op(::rp4::OpCode value);

private:
    ::rp4::OpCode _internal_op() const;
    void _internal_set_op(::rp4::OpCode value);

public:
    void clear_val();
    ValCase val_case() const;
    // @@protoc_insertion_point(class_scope:rp4.Parameter)
private:
    class _Internal;
    void set_has_hdrid();
    void set_has_field();
    void set_has_constantdata();
    void set_has_actionparaid();
    void set_has_op();

    inline bool has_val() const;
    inline void clear_has_val();

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int type_;
    union ValUnion {
        constexpr ValUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
        ::PROTOBUF_NAMESPACE_ID::int32 hdrid_;
        ::rp4::FieldInfo* field_;
        ::rp4::Data* constantdata_;
        ::PROTOBUF_NAMESPACE_ID::int32 actionparaid_;
        int op_;
    } val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ExpTreeNode final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ExpTreeNode)
                                                                   */
{
public:
    inline ExpTreeNode() : ExpTreeNode(nullptr) {}
    ~ExpTreeNode() override;
    explicit constexpr ExpTreeNode(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ExpTreeNode(const ExpTreeNode& from);
    ExpTreeNode(ExpTreeNode&& from) noexcept : ExpTreeNode() {
        *this = ::std::move(from);
    }

    inline ExpTreeNode& operator=(const ExpTreeNode& from) {
        CopyFrom(from);
        return *this;
    }
    inline ExpTreeNode& operator=(ExpTreeNode&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ExpTreeNode& default_instance() {
        return *internal_default_instance();
    }
    static inline const ExpTreeNode* internal_default_instance() {
        return reinterpret_cast<const ExpTreeNode*>(
            &_ExpTreeNode_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 43;

    friend void swap(ExpTreeNode& a, ExpTreeNode& b) { a.Swap(&b); }
    inline void Swap(ExpTreeNode* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ExpTreeNode* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ExpTreeNode* New() const final { return new ExpTreeNode(); }

    ExpTreeNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ExpTreeNode>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ExpTreeNode& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ExpTreeNode& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ExpTreeNode* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ExpTreeNode";
    }

protected:
    explicit ExpTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kOptFieldNumber = 1,
        kLeftFieldNumber = 2,
        kRightFieldNumber = 3,
    };
    // .rp4.Parameter opt = 1;
    bool has_opt() const;

private:
    bool _internal_has_opt() const;

public:
    void clear_opt();
    const ::rp4::Parameter& opt() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::Parameter* release_opt();
    ::rp4::Parameter* mutable_opt();
    void set_allocated_opt(::rp4::Parameter* opt);

private:
    const ::rp4::Parameter& _internal_opt() const;
    ::rp4::Parameter* _internal_mutable_opt();

public:
    void unsafe_arena_set_allocated_opt(::rp4::Parameter* opt);
    ::rp4::Parameter* unsafe_arena_release_opt();

    // .rp4.ExpTreeNode left = 2;
    bool has_left() const;

private:
    bool _internal_has_left() const;

public:
    void clear_left();
    const ::rp4::ExpTreeNode& left() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::ExpTreeNode* release_left();
    ::rp4::ExpTreeNode* mutable_left();
    void set_allocated_left(::rp4::ExpTreeNode* left);

private:
    const ::rp4::ExpTreeNode& _internal_left() const;
    ::rp4::ExpTreeNode* _internal_mutable_left();

public:
    void unsafe_arena_set_allocated_left(::rp4::ExpTreeNode* left);
    ::rp4::ExpTreeNode* unsafe_arena_release_left();

    // .rp4.ExpTreeNode right = 3;
    bool has_right() const;

private:
    bool _internal_has_right() const;

public:
    void clear_right();
    const ::rp4::ExpTreeNode& right() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::ExpTreeNode* release_right();
    ::rp4::ExpTreeNode* mutable_right();
    void set_allocated_right(::rp4::ExpTreeNode* right);

private:
    const ::rp4::ExpTreeNode& _internal_right() const;
    ::rp4::ExpTreeNode* _internal_mutable_right();

public:
    void unsafe_arena_set_allocated_right(::rp4::ExpTreeNode* right);
    ::rp4::ExpTreeNode* unsafe_arena_release_right();

    // @@protoc_insertion_point(class_scope:rp4.ExpTreeNode)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::Parameter* opt_;
    ::rp4::ExpTreeNode* left_;
    ::rp4::ExpTreeNode* right_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class Prim final
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rp4.Prim) */ {
public:
    inline Prim() : Prim(nullptr) {}
    ~Prim() override;
    explicit constexpr Prim(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Prim(const Prim& from);
    Prim(Prim&& from) noexcept : Prim() { *this = ::std::move(from); }

    inline Prim& operator=(const Prim& from) {
        CopyFrom(from);
        return *this;
    }
    inline Prim& operator=(Prim&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const Prim& default_instance() {
        return *internal_default_instance();
    }
    static inline const Prim* internal_default_instance() {
        return reinterpret_cast<const Prim*>(&_Prim_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 44;

    friend void swap(Prim& a, Prim& b) { a.Swap(&b); }
    inline void Swap(Prim* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Prim* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Prim* New() const final { return new Prim(); }

    Prim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<Prim>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const Prim& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const Prim& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Prim* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.Prim";
    }

protected:
    explicit Prim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                  bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kLvalueFieldNumber = 1,
        kRootFieldNumber = 2,
    };
    // .rp4.FieldInfo lvalue = 1;
    bool has_lvalue() const;

private:
    bool _internal_has_lvalue() const;

public:
    void clear_lvalue();
    const ::rp4::FieldInfo& lvalue() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::FieldInfo* release_lvalue();
    ::rp4::FieldInfo* mutable_lvalue();
    void set_allocated_lvalue(::rp4::FieldInfo* lvalue);

private:
    const ::rp4::FieldInfo& _internal_lvalue() const;
    ::rp4::FieldInfo* _internal_mutable_lvalue();

public:
    void unsafe_arena_set_allocated_lvalue(::rp4::FieldInfo* lvalue);
    ::rp4::FieldInfo* unsafe_arena_release_lvalue();

    // .rp4.ExpTreeNode root = 2;
    bool has_root() const;

private:
    bool _internal_has_root() const;

public:
    void clear_root();
    const ::rp4::ExpTreeNode& root() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::ExpTreeNode* release_root();
    ::rp4::ExpTreeNode* mutable_root();
    void set_allocated_root(::rp4::ExpTreeNode* root);

private:
    const ::rp4::ExpTreeNode& _internal_root() const;
    ::rp4::ExpTreeNode* _internal_mutable_root();

public:
    void unsafe_arena_set_allocated_root(::rp4::ExpTreeNode* root);
    ::rp4::ExpTreeNode* unsafe_arena_release_root();

    // @@protoc_insertion_point(class_scope:rp4.Prim)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::FieldInfo* lvalue_;
    ::rp4::ExpTreeNode* root_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class Action final
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:rp4.Action) */ {
public:
    inline Action() : Action(nullptr) {}
    ~Action() override;
    explicit constexpr Action(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    Action(const Action& from);
    Action(Action&& from) noexcept : Action() { *this = ::std::move(from); }

    inline Action& operator=(const Action& from) {
        CopyFrom(from);
        return *this;
    }
    inline Action& operator=(Action&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const Action& default_instance() {
        return *internal_default_instance();
    }
    static inline const Action* internal_default_instance() {
        return reinterpret_cast<const Action*>(&_Action_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 45;

    friend void swap(Action& a, Action& b) { a.Swap(&b); }
    inline void Swap(Action* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(Action* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline Action* New() const final { return new Action(); }

    Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<Action>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const Action& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const Action& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Action* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.Action";
    }

protected:
    explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                    bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kPrimsFieldNumber = 2,
        kActionParaLensFieldNumber = 4,
        kParaNumFieldNumber = 1,
    };
    // repeated .rp4.Prim prims = 2;
    int prims_size() const;

private:
    int _internal_prims_size() const;

public:
    void clear_prims();
    ::rp4::Prim* mutable_prims(int index);
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::Prim>* mutable_prims();

private:
    const ::rp4::Prim& _internal_prims(int index) const;
    ::rp4::Prim* _internal_add_prims();

public:
    const ::rp4::Prim& prims(int index) const;
    ::rp4::Prim* add_prims();
    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::Prim>& prims() const;

    // repeated int32 actionParaLens = 4;
    int actionparalens_size() const;

private:
    int _internal_actionparalens_size() const;

public:
    void clear_actionparalens();

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionparalens(int index) const;
    const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
        ::PROTOBUF_NAMESPACE_ID::int32>&
    _internal_actionparalens() const;
    void _internal_add_actionparalens(::PROTOBUF_NAMESPACE_ID::int32 value);
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
    _internal_mutable_actionparalens();

public:
    ::PROTOBUF_NAMESPACE_ID::int32 actionparalens(int index) const;
    void set_actionparalens(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
    void add_actionparalens(::PROTOBUF_NAMESPACE_ID::int32 value);
    const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
        ::PROTOBUF_NAMESPACE_ID::int32>&
    actionparalens() const;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
    mutable_actionparalens();

    // int32 paraNum = 1;
    void clear_paranum();
    ::PROTOBUF_NAMESPACE_ID::int32 paranum() const;
    void set_paranum(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_paranum() const;
    void _internal_set_paranum(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.Action)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::Prim> prims_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>
        actionparalens_;
    mutable std::atomic<int> _actionparalens_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::int32 paranum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertActionReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertActionReq)
                                                                       */
{
public:
    inline InsertActionReq() : InsertActionReq(nullptr) {}
    ~InsertActionReq() override;
    explicit constexpr InsertActionReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertActionReq(const InsertActionReq& from);
    InsertActionReq(InsertActionReq&& from) noexcept : InsertActionReq() {
        *this = ::std::move(from);
    }

    inline InsertActionReq& operator=(const InsertActionReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertActionReq& operator=(InsertActionReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertActionReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertActionReq* internal_default_instance() {
        return reinterpret_cast<const InsertActionReq*>(
            &_InsertActionReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 46;

    friend void swap(InsertActionReq& a, InsertActionReq& b) { a.Swap(&b); }
    inline void Swap(InsertActionReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertActionReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertActionReq* New() const final { return new InsertActionReq(); }

    InsertActionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertActionReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertActionReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertActionReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertActionReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertActionReq";
    }

protected:
    explicit InsertActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kActionFieldNumber = 2,
        kProcIdFieldNumber = 1,
        kActionIdFieldNumber = 3,
    };
    // .rp4.Action action = 2;
    bool has_action() const;

private:
    bool _internal_has_action() const;

public:
    void clear_action();
    const ::rp4::Action& action() const;
    PROTOBUF_MUST_USE_RESULT ::rp4::Action* release_action();
    ::rp4::Action* mutable_action();
    void set_allocated_action(::rp4::Action* action);

private:
    const ::rp4::Action& _internal_action() const;
    ::rp4::Action* _internal_mutable_action();

public:
    void unsafe_arena_set_allocated_action(::rp4::Action* action);
    ::rp4::Action* unsafe_arena_release_action();

    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 actionId = 3;
    void clear_actionid();
    ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
    void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
    void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertActionReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::rp4::Action* action_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class InsertActionResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.InsertActionResp)
                                                                        */
{
public:
    inline InsertActionResp() : InsertActionResp(nullptr) {}
    ~InsertActionResp() override;
    explicit constexpr InsertActionResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    InsertActionResp(const InsertActionResp& from);
    InsertActionResp(InsertActionResp&& from) noexcept : InsertActionResp() {
        *this = ::std::move(from);
    }

    inline InsertActionResp& operator=(const InsertActionResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline InsertActionResp& operator=(InsertActionResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const InsertActionResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const InsertActionResp* internal_default_instance() {
        return reinterpret_cast<const InsertActionResp*>(
            &_InsertActionResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 47;

    friend void swap(InsertActionResp& a, InsertActionResp& b) { a.Swap(&b); }
    inline void Swap(InsertActionResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(InsertActionResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline InsertActionResp* New() const final {
        return new InsertActionResp();
    }

    InsertActionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<InsertActionResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const InsertActionResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const InsertActionResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(InsertActionResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.InsertActionResp";
    }

protected:
    explicit InsertActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                              bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.InsertActionResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearActionReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearActionReq)
                                                                      */
{
public:
    inline ClearActionReq() : ClearActionReq(nullptr) {}
    ~ClearActionReq() override;
    explicit constexpr ClearActionReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearActionReq(const ClearActionReq& from);
    ClearActionReq(ClearActionReq&& from) noexcept : ClearActionReq() {
        *this = ::std::move(from);
    }

    inline ClearActionReq& operator=(const ClearActionReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearActionReq& operator=(ClearActionReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearActionReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearActionReq* internal_default_instance() {
        return reinterpret_cast<const ClearActionReq*>(
            &_ClearActionReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 48;

    friend void swap(ClearActionReq& a, ClearActionReq& b) { a.Swap(&b); }
    inline void Swap(ClearActionReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearActionReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearActionReq* New() const final { return new ClearActionReq(); }

    ClearActionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearActionReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearActionReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearActionReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearActionReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearActionReq";
    }

protected:
    explicit ClearActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                            bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearActionReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class ClearActionResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.ClearActionResp)
                                                                       */
{
public:
    inline ClearActionResp() : ClearActionResp(nullptr) {}
    ~ClearActionResp() override;
    explicit constexpr ClearActionResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    ClearActionResp(const ClearActionResp& from);
    ClearActionResp(ClearActionResp&& from) noexcept : ClearActionResp() {
        *this = ::std::move(from);
    }

    inline ClearActionResp& operator=(const ClearActionResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline ClearActionResp& operator=(ClearActionResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const ClearActionResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const ClearActionResp* internal_default_instance() {
        return reinterpret_cast<const ClearActionResp*>(
            &_ClearActionResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 49;

    friend void swap(ClearActionResp& a, ClearActionResp& b) { a.Swap(&b); }
    inline void Swap(ClearActionResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(ClearActionResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline ClearActionResp* New() const final { return new ClearActionResp(); }

    ClearActionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<ClearActionResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const ClearActionResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const ClearActionResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ClearActionResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.ClearActionResp";
    }

protected:
    explicit ClearActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                             bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.ClearActionResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class DelActionReq final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.DelActionReq)
                                                                    */
{
public:
    inline DelActionReq() : DelActionReq(nullptr) {}
    ~DelActionReq() override;
    explicit constexpr DelActionReq(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    DelActionReq(const DelActionReq& from);
    DelActionReq(DelActionReq&& from) noexcept : DelActionReq() {
        *this = ::std::move(from);
    }

    inline DelActionReq& operator=(const DelActionReq& from) {
        CopyFrom(from);
        return *this;
    }
    inline DelActionReq& operator=(DelActionReq&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const DelActionReq& default_instance() {
        return *internal_default_instance();
    }
    static inline const DelActionReq* internal_default_instance() {
        return reinterpret_cast<const DelActionReq*>(
            &_DelActionReq_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 50;

    friend void swap(DelActionReq& a, DelActionReq& b) { a.Swap(&b); }
    inline void Swap(DelActionReq* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DelActionReq* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline DelActionReq* New() const final { return new DelActionReq(); }

    DelActionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<DelActionReq>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const DelActionReq& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const DelActionReq& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(DelActionReq* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.DelActionReq";
    }

protected:
    explicit DelActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                          bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kProcIdFieldNumber = 1,
        kActionIdFieldNumber = 2,
    };
    // int32 procId = 1;
    void clear_procid();
    ::PROTOBUF_NAMESPACE_ID::int32 procid() const;
    void set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_procid() const;
    void _internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // int32 actionId = 2;
    void clear_actionid();
    ::PROTOBUF_NAMESPACE_ID::int32 actionid() const;
    void set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_actionid() const;
    void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
    // @@protoc_insertion_point(class_scope:rp4.DelActionReq)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 procid_;
    ::PROTOBUF_NAMESPACE_ID::int32 actionid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// -------------------------------------------------------------------

class DelActionResp final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rp4.DelActionResp)
                                                                     */
{
public:
    inline DelActionResp() : DelActionResp(nullptr) {}
    ~DelActionResp() override;
    explicit constexpr DelActionResp(
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

    DelActionResp(const DelActionResp& from);
    DelActionResp(DelActionResp&& from) noexcept : DelActionResp() {
        *this = ::std::move(from);
    }

    inline DelActionResp& operator=(const DelActionResp& from) {
        CopyFrom(from);
        return *this;
    }
    inline DelActionResp& operator=(DelActionResp&& from) noexcept {
        if (this == &from)
            return *this;
        if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        ) {
            InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
        return GetDescriptor();
    }
    static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
        return default_instance().GetMetadata().reflection;
    }
    static const DelActionResp& default_instance() {
        return *internal_default_instance();
    }
    static inline const DelActionResp* internal_default_instance() {
        return reinterpret_cast<const DelActionResp*>(
            &_DelActionResp_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 51;

    friend void swap(DelActionResp& a, DelActionResp& b) { a.Swap(&b); }
    inline void Swap(DelActionResp* other) {
        if (other == this)
            return;
        if (GetOwningArena() == other->GetOwningArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DelActionResp* other) {
        if (other == this)
            return;
        GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline DelActionResp* New() const final { return new DelActionResp(); }

    DelActionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
        return CreateMaybeMessage<DelActionResp>(arena);
    }
    using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
    void CopyFrom(const DelActionResp& from);
    using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
    void MergeFrom(const DelActionResp& from);

private:
    static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                          const ::PROTOBUF_NAMESPACE_ID::Message& from);

public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
    ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8* target,
        ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(DelActionResp* other);
    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "rp4.DelActionResp";
    }

protected:
    explicit DelActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                           bool is_message_owned = false);

private:
    static void ArenaDtor(void* object);
    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);

public:
    static const ClassData _class_data_;
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*
    GetClassData() const final;

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kResFieldNumber = 1,
    };
    // .rp4.Res res = 1;
    void clear_res();
    ::rp4::Res res() const;
    void set_res(::rp4::Res value);

private:
    ::rp4::Res _internal_res() const;
    void _internal_set_res(::rp4::Res value);

public:
    // @@protoc_insertion_point(class_scope:rp4.DelActionResp)
private:
    class _Internal;

    template <typename T>
    friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    int res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_controller_5fto_5fdataplane_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// HeaderInfo

// int32 headerId = 1;
inline void HeaderInfo::clear_headerid() { headerid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 HeaderInfo::_internal_headerid() const {
    return headerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeaderInfo::headerid() const {
    // @@protoc_insertion_point(field_get:rp4.HeaderInfo.headerId)
    return _internal_headerid();
}
inline void
HeaderInfo::_internal_set_headerid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    headerid_ = value;
}
inline void HeaderInfo::set_headerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_headerid(value);
    // @@protoc_insertion_point(field_set:rp4.HeaderInfo.headerId)
}

// int32 headerLength = 2;
inline void HeaderInfo::clear_headerlength() { headerlength_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
HeaderInfo::_internal_headerlength() const {
    return headerlength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeaderInfo::headerlength() const {
    // @@protoc_insertion_point(field_get:rp4.HeaderInfo.headerLength)
    return _internal_headerlength();
}
inline void
HeaderInfo::_internal_set_headerlength(::PROTOBUF_NAMESPACE_ID::int32 value) {

    headerlength_ = value;
}
inline void HeaderInfo::set_headerlength(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_headerlength(value);
    // @@protoc_insertion_point(field_set:rp4.HeaderInfo.headerLength)
}

// int32 headerOffset = 3;
inline void HeaderInfo::clear_headeroffset() { headeroffset_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
HeaderInfo::_internal_headeroffset() const {
    return headeroffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HeaderInfo::headeroffset() const {
    // @@protoc_insertion_point(field_get:rp4.HeaderInfo.headerOffset)
    return _internal_headeroffset();
}
inline void
HeaderInfo::_internal_set_headeroffset(::PROTOBUF_NAMESPACE_ID::int32 value) {

    headeroffset_ = value;
}
inline void HeaderInfo::set_headeroffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_headeroffset(value);
    // @@protoc_insertion_point(field_set:rp4.HeaderInfo.headerOffset)
}

// -------------------------------------------------------------------

// SetMetadataReq

// repeated .rp4.HeaderInfo headerInfos = 1;
inline int SetMetadataReq::_internal_headerinfos_size() const {
    return headerinfos_.size();
}
inline int SetMetadataReq::headerinfos_size() const {
    return _internal_headerinfos_size();
}
inline void SetMetadataReq::clear_headerinfos() { headerinfos_.Clear(); }
inline ::rp4::HeaderInfo* SetMetadataReq::mutable_headerinfos(int index) {
    // @@protoc_insertion_point(field_mutable:rp4.SetMetadataReq.headerInfos)
    return headerinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::HeaderInfo>*
SetMetadataReq::mutable_headerinfos() {
    // @@protoc_insertion_point(field_mutable_list:rp4.SetMetadataReq.headerInfos)
    return &headerinfos_;
}
inline const ::rp4::HeaderInfo&
SetMetadataReq::_internal_headerinfos(int index) const {
    return headerinfos_.Get(index);
}
inline const ::rp4::HeaderInfo& SetMetadataReq::headerinfos(int index) const {
    // @@protoc_insertion_point(field_get:rp4.SetMetadataReq.headerInfos)
    return _internal_headerinfos(index);
}
inline ::rp4::HeaderInfo* SetMetadataReq::_internal_add_headerinfos() {
    return headerinfos_.Add();
}
inline ::rp4::HeaderInfo* SetMetadataReq::add_headerinfos() {
    ::rp4::HeaderInfo* _add = _internal_add_headerinfos();
    // @@protoc_insertion_point(field_add:rp4.SetMetadataReq.headerInfos)
    return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::HeaderInfo>&
SetMetadataReq::headerinfos() const {
    // @@protoc_insertion_point(field_list:rp4.SetMetadataReq.headerInfos)
    return headerinfos_;
}

// -------------------------------------------------------------------

// SetMetadataResp

// .rp4.Res res = 1;
inline void SetMetadataResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetMetadataResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetMetadataResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetMetadataResp.res)
    return _internal_res();
}
inline void SetMetadataResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetMetadataResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetMetadataResp.res)
}

// -------------------------------------------------------------------

// ClearStageReq

// int32 procId = 1;
inline void ClearStageReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearStageReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearStageReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearStageReq.procId)
    return _internal_procid();
}
inline void
ClearStageReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ClearStageReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearStageReq.procId)
}

// -------------------------------------------------------------------

// ParserLevelReq

// int32 procId = 1;
inline void ParserLevelReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ParserLevelReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParserLevelReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ParserLevelReq.procId)
    return _internal_procid();
}
inline void
ParserLevelReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ParserLevelReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ParserLevelReq.procId)
}

// int32 parserLevel = 2;
inline void ParserLevelReq::clear_parserlevel() { parserlevel_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ParserLevelReq::_internal_parserlevel() const {
    return parserlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParserLevelReq::parserlevel() const {
    // @@protoc_insertion_point(field_get:rp4.ParserLevelReq.parserLevel)
    return _internal_parserlevel();
}
inline void ParserLevelReq::_internal_set_parserlevel(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    parserlevel_ = value;
}
inline void
ParserLevelReq::set_parserlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_parserlevel(value);
    // @@protoc_insertion_point(field_set:rp4.ParserLevelReq.parserLevel)
}

// -------------------------------------------------------------------

// ParserLevelResp

// .rp4.Res res = 1;
inline void ParserLevelResp::clear_res() { res_ = 0; }
inline ::rp4::Res ParserLevelResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ParserLevelResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ParserLevelResp.res)
    return _internal_res();
}
inline void ParserLevelResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ParserLevelResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ParserLevelResp.res)
}

// -------------------------------------------------------------------

// FieldInfo

// int32 hdrId = 1;
inline void FieldInfo::clear_hdrid() { hdrid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldInfo::_internal_hdrid() const {
    return hdrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldInfo::hdrid() const {
    // @@protoc_insertion_point(field_get:rp4.FieldInfo.hdrId)
    return _internal_hdrid();
}
inline void
FieldInfo::_internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    hdrid_ = value;
}
inline void FieldInfo::set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_hdrid(value);
    // @@protoc_insertion_point(field_set:rp4.FieldInfo.hdrId)
}

// int32 internalOffset = 2;
inline void FieldInfo::clear_internaloffset() { internaloffset_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
FieldInfo::_internal_internaloffset() const {
    return internaloffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldInfo::internaloffset() const {
    // @@protoc_insertion_point(field_get:rp4.FieldInfo.internalOffset)
    return _internal_internaloffset();
}
inline void
FieldInfo::_internal_set_internaloffset(::PROTOBUF_NAMESPACE_ID::int32 value) {

    internaloffset_ = value;
}
inline void
FieldInfo::set_internaloffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_internaloffset(value);
    // @@protoc_insertion_point(field_set:rp4.FieldInfo.internalOffset)
}

// int32 fieldLen = 3;
inline void FieldInfo::clear_fieldlen() { fieldlen_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldInfo::_internal_fieldlen() const {
    return fieldlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldInfo::fieldlen() const {
    // @@protoc_insertion_point(field_get:rp4.FieldInfo.fieldLen)
    return _internal_fieldlen();
}
inline void
FieldInfo::_internal_set_fieldlen(::PROTOBUF_NAMESPACE_ID::int32 value) {

    fieldlen_ = value;
}
inline void FieldInfo::set_fieldlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_fieldlen(value);
    // @@protoc_insertion_point(field_set:rp4.FieldInfo.fieldLen)
}

// .rp4.FieldType fieldType = 4;
inline void FieldInfo::clear_fieldtype() { fieldtype_ = 0; }
inline ::rp4::FieldType FieldInfo::_internal_fieldtype() const {
    return static_cast<::rp4::FieldType>(fieldtype_);
}
inline ::rp4::FieldType FieldInfo::fieldtype() const {
    // @@protoc_insertion_point(field_get:rp4.FieldInfo.fieldType)
    return _internal_fieldtype();
}
inline void FieldInfo::_internal_set_fieldtype(::rp4::FieldType value) {

    fieldtype_ = value;
}
inline void FieldInfo::set_fieldtype(::rp4::FieldType value) {
    _internal_set_fieldtype(value);
    // @@protoc_insertion_point(field_set:rp4.FieldInfo.fieldType)
}

// -------------------------------------------------------------------

// ModParserEntryReq

// int32 procId = 1;
inline void ModParserEntryReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.procId)
    return _internal_procid();
}
inline void
ModParserEntryReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void
ModParserEntryReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.procId)
}

// int32 parserLevel = 2;
inline void ModParserEntryReq::clear_parserlevel() { parserlevel_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_parserlevel() const {
    return parserlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::parserlevel() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.parserLevel)
    return _internal_parserlevel();
}
inline void ModParserEntryReq::_internal_set_parserlevel(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    parserlevel_ = value;
}
inline void
ModParserEntryReq::set_parserlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_parserlevel(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.parserLevel)
}

// int32 state = 3;
inline void ModParserEntryReq::clear_state() { state_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_state() const {
    return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::state() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.state)
    return _internal_state();
}
inline void
ModParserEntryReq::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {

    state_ = value;
}
inline void ModParserEntryReq::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_state(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.state)
}

// uint32 key = 4;
inline void ModParserEntryReq::clear_key() { key_ = 0u; }
inline ::PROTOBUF_NAMESPACE_ID::uint32
ModParserEntryReq::_internal_key() const {
    return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ModParserEntryReq::key() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.key)
    return _internal_key();
}
inline void
ModParserEntryReq::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {

    key_ = value;
}
inline void ModParserEntryReq::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
    _internal_set_key(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.key)
}

// int32 mask = 5;
inline void ModParserEntryReq::clear_mask() { mask_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_mask() const {
    return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::mask() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.mask)
    return _internal_mask();
}
inline void
ModParserEntryReq::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {

    mask_ = value;
}
inline void ModParserEntryReq::set_mask(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_mask(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.mask)
}

// int32 hdrId = 6;
inline void ModParserEntryReq::clear_hdrid() { hdrid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_hdrid() const {
    return hdrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::hdrid() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.hdrId)
    return _internal_hdrid();
}
inline void
ModParserEntryReq::_internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    hdrid_ = value;
}
inline void ModParserEntryReq::set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_hdrid(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.hdrId)
}

// int32 hdrLen = 7;
inline void ModParserEntryReq::clear_hdrlen() { hdrlen_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_hdrlen() const {
    return hdrlen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::hdrlen() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.hdrLen)
    return _internal_hdrlen();
}
inline void
ModParserEntryReq::_internal_set_hdrlen(::PROTOBUF_NAMESPACE_ID::int32 value) {

    hdrlen_ = value;
}
inline void
ModParserEntryReq::set_hdrlen(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_hdrlen(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.hdrLen)
}

// int32 nextState = 8;
inline void ModParserEntryReq::clear_nextstate() { nextstate_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_nextstate() const {
    return nextstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::nextstate() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.nextState)
    return _internal_nextstate();
}
inline void ModParserEntryReq::_internal_set_nextstate(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    nextstate_ = value;
}
inline void
ModParserEntryReq::set_nextstate(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_nextstate(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.nextState)
}

// int32 transFieldNum = 9;
inline void ModParserEntryReq::clear_transfieldnum() { transfieldnum_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_transfieldnum() const {
    return transfieldnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::transfieldnum() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.transFieldNum)
    return _internal_transfieldnum();
}
inline void ModParserEntryReq::_internal_set_transfieldnum(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    transfieldnum_ = value;
}
inline void
ModParserEntryReq::set_transfieldnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_transfieldnum(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.transFieldNum)
}

// repeated .rp4.FieldInfo transFds = 10;
inline int ModParserEntryReq::_internal_transfds_size() const {
    return transfds_.size();
}
inline int ModParserEntryReq::transfds_size() const {
    return _internal_transfds_size();
}
inline void ModParserEntryReq::clear_transfds() { transfds_.Clear(); }
inline ::rp4::FieldInfo* ModParserEntryReq::mutable_transfds(int index) {
    // @@protoc_insertion_point(field_mutable:rp4.ModParserEntryReq.transFds)
    return transfds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>*
ModParserEntryReq::mutable_transfds() {
    // @@protoc_insertion_point(field_mutable_list:rp4.ModParserEntryReq.transFds)
    return &transfds_;
}
inline const ::rp4::FieldInfo&
ModParserEntryReq::_internal_transfds(int index) const {
    return transfds_.Get(index);
}
inline const ::rp4::FieldInfo& ModParserEntryReq::transfds(int index) const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.transFds)
    return _internal_transfds(index);
}
inline ::rp4::FieldInfo* ModParserEntryReq::_internal_add_transfds() {
    return transfds_.Add();
}
inline ::rp4::FieldInfo* ModParserEntryReq::add_transfds() {
    ::rp4::FieldInfo* _add = _internal_add_transfds();
    // @@protoc_insertion_point(field_add:rp4.ModParserEntryReq.transFds)
    return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>&
ModParserEntryReq::transfds() const {
    // @@protoc_insertion_point(field_list:rp4.ModParserEntryReq.transFds)
    return transfds_;
}

// int32 miss_act = 11;
inline void ModParserEntryReq::clear_miss_act() { miss_act_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ModParserEntryReq::_internal_miss_act() const {
    return miss_act_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModParserEntryReq::miss_act() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryReq.miss_act)
    return _internal_miss_act();
}
inline void ModParserEntryReq::_internal_set_miss_act(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    miss_act_ = value;
}
inline void
ModParserEntryReq::set_miss_act(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_miss_act(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryReq.miss_act)
}

// -------------------------------------------------------------------

// ModParserEntryResp

// .rp4.Res res = 1;
inline void ModParserEntryResp::clear_res() { res_ = 0; }
inline ::rp4::Res ModParserEntryResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ModParserEntryResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ModParserEntryResp.res)
    return _internal_res();
}
inline void ModParserEntryResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ModParserEntryResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ModParserEntryResp.res)
}

// -------------------------------------------------------------------

// ClearParserReq

// int32 procId = 1;
inline void ClearParserReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearParserReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearParserReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearParserReq.procId)
    return _internal_procid();
}
inline void
ClearParserReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ClearParserReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearParserReq.procId)
}

// -------------------------------------------------------------------

// ClearParserResp

// .rp4.Res res = 1;
inline void ClearParserResp::clear_res() { res_ = 0; }
inline ::rp4::Res ClearParserResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ClearParserResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ClearParserResp.res)
    return _internal_res();
}
inline void ClearParserResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ClearParserResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ClearParserResp.res)
}

// -------------------------------------------------------------------

// Data

// int32 len = 1;
inline void Data::clear_len() { len_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::_internal_len() const {
    return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Data::len() const {
    // @@protoc_insertion_point(field_get:rp4.Data.len)
    return _internal_len();
}
inline void Data::_internal_set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {

    len_ = value;
}
inline void Data::set_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_len(value);
    // @@protoc_insertion_point(field_set:rp4.Data.len)
}

// bytes val = 2;
inline void Data::clear_val() { val_.ClearToEmpty(); }
inline const std::string& Data::val() const {
    // @@protoc_insertion_point(field_get:rp4.Data.val)
    return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Data::set_val(ArgT0&& arg0, ArgT... args) {

    val_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.Data.val)
}
inline std::string* Data::mutable_val() {
    std::string* _s = _internal_mutable_val();
    // @@protoc_insertion_point(field_mutable:rp4.Data.val)
    return _s;
}
inline const std::string& Data::_internal_val() const { return val_.Get(); }
inline void Data::_internal_set_val(const std::string& value) {

    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
             value, GetArenaForAllocation());
}
inline std::string* Data::_internal_mutable_val() {

    return val_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* Data::release_val() {
    // @@protoc_insertion_point(field_release:rp4.Data.val)
    return val_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void Data::set_allocated_val(std::string* val) {
    if (val != nullptr) {

    } else {
    }
    val_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
        GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.Data.val)
}

// -------------------------------------------------------------------

// GateEntry

// .rp4.GateEntryType type = 1;
inline void GateEntry::clear_type() { type_ = 0; }
inline ::rp4::GateEntryType GateEntry::_internal_type() const {
    return static_cast<::rp4::GateEntryType>(type_);
}
inline ::rp4::GateEntryType GateEntry::type() const {
    // @@protoc_insertion_point(field_get:rp4.GateEntry.type)
    return _internal_type();
}
inline void GateEntry::_internal_set_type(::rp4::GateEntryType value) {

    type_ = value;
}
inline void GateEntry::set_type(::rp4::GateEntryType value) {
    _internal_set_type(value);
    // @@protoc_insertion_point(field_set:rp4.GateEntry.type)
}

// int32 val = 2;
inline void GateEntry::clear_val() { val_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 GateEntry::_internal_val() const {
    return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GateEntry::val() const {
    // @@protoc_insertion_point(field_get:rp4.GateEntry.val)
    return _internal_val();
}
inline void GateEntry::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {

    val_ = value;
}
inline void GateEntry::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_val(value);
    // @@protoc_insertion_point(field_set:rp4.GateEntry.val)
}

// -------------------------------------------------------------------

// SetDefaultGateEntryReq

// int32 proc_id = 1;
inline void SetDefaultGateEntryReq::clear_proc_id() { proc_id_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetDefaultGateEntryReq::_internal_proc_id() const {
    return proc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetDefaultGateEntryReq::proc_id() const {
    // @@protoc_insertion_point(field_get:rp4.SetDefaultGateEntryReq.proc_id)
    return _internal_proc_id();
}
inline void SetDefaultGateEntryReq::_internal_set_proc_id(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    proc_id_ = value;
}
inline void
SetDefaultGateEntryReq::set_proc_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_proc_id(value);
    // @@protoc_insertion_point(field_set:rp4.SetDefaultGateEntryReq.proc_id)
}

// .rp4.GateEntry default_entry = 2;
inline bool SetDefaultGateEntryReq::_internal_has_default_entry() const {
    return this != internal_default_instance() && default_entry_ != nullptr;
}
inline bool SetDefaultGateEntryReq::has_default_entry() const {
    return _internal_has_default_entry();
}
inline void SetDefaultGateEntryReq::clear_default_entry() {
    if (GetArenaForAllocation() == nullptr && default_entry_ != nullptr) {
        delete default_entry_;
    }
    default_entry_ = nullptr;
}
inline const ::rp4::GateEntry&
SetDefaultGateEntryReq::_internal_default_entry() const {
    const ::rp4::GateEntry* p = default_entry_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::GateEntry&>(
                              ::rp4::_GateEntry_default_instance_);
}
inline const ::rp4::GateEntry& SetDefaultGateEntryReq::default_entry() const {
    // @@protoc_insertion_point(field_get:rp4.SetDefaultGateEntryReq.default_entry)
    return _internal_default_entry();
}
inline void SetDefaultGateEntryReq::unsafe_arena_set_allocated_default_entry(
    ::rp4::GateEntry* default_entry) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(
            default_entry_);
    }
    default_entry_ = default_entry;
    if (default_entry) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.SetDefaultGateEntryReq.default_entry)
}
inline ::rp4::GateEntry* SetDefaultGateEntryReq::release_default_entry() {

    ::rp4::GateEntry* temp = default_entry_;
    default_entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::GateEntry*
SetDefaultGateEntryReq::unsafe_arena_release_default_entry() {
    // @@protoc_insertion_point(field_release:rp4.SetDefaultGateEntryReq.default_entry)

    ::rp4::GateEntry* temp = default_entry_;
    default_entry_ = nullptr;
    return temp;
}
inline ::rp4::GateEntry*
SetDefaultGateEntryReq::_internal_mutable_default_entry() {

    if (default_entry_ == nullptr) {
        auto* p = CreateMaybeMessage<::rp4::GateEntry>(GetArenaForAllocation());
        default_entry_ = p;
    }
    return default_entry_;
}
inline ::rp4::GateEntry* SetDefaultGateEntryReq::mutable_default_entry() {
    ::rp4::GateEntry* _msg = _internal_mutable_default_entry();
    // @@protoc_insertion_point(field_mutable:rp4.SetDefaultGateEntryReq.default_entry)
    return _msg;
}
inline void SetDefaultGateEntryReq::set_allocated_default_entry(
    ::rp4::GateEntry* default_entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete default_entry_;
    }
    if (default_entry) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::GateEntry>::GetOwningArena(default_entry);
        if (message_arena != submessage_arena) {
            default_entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, default_entry, submessage_arena);
        }

    } else {
    }
    default_entry_ = default_entry;
    // @@protoc_insertion_point(field_set_allocated:rp4.SetDefaultGateEntryReq.default_entry)
}

// -------------------------------------------------------------------

// SetDefaultGateEntryResp

// .rp4.Res res = 1;
inline void SetDefaultGateEntryResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetDefaultGateEntryResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetDefaultGateEntryResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetDefaultGateEntryResp.res)
    return _internal_res();
}
inline void SetDefaultGateEntryResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetDefaultGateEntryResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetDefaultGateEntryResp.res)
}

// -------------------------------------------------------------------

// GatewayParam

// .rp4.ParameterType paramType = 1;
inline void GatewayParam::clear_paramtype() { paramtype_ = 0; }
inline ::rp4::ParameterType GatewayParam::_internal_paramtype() const {
    return static_cast<::rp4::ParameterType>(paramtype_);
}
inline ::rp4::ParameterType GatewayParam::paramtype() const {
    // @@protoc_insertion_point(field_get:rp4.GatewayParam.paramType)
    return _internal_paramtype();
}
inline void GatewayParam::_internal_set_paramtype(::rp4::ParameterType value) {

    paramtype_ = value;
}
inline void GatewayParam::set_paramtype(::rp4::ParameterType value) {
    _internal_set_paramtype(value);
    // @@protoc_insertion_point(field_set:rp4.GatewayParam.paramType)
}

// .rp4.FieldInfo field = 2;
inline bool GatewayParam::_internal_has_field() const {
    return value_case() == kField;
}
inline bool GatewayParam::has_field() const { return _internal_has_field(); }
inline void GatewayParam::set_has_field() { _oneof_case_[0] = kField; }
inline void GatewayParam::clear_field() {
    if (_internal_has_field()) {
        if (GetArenaForAllocation() == nullptr) {
            delete value_.field_;
        }
        clear_has_value();
    }
}
inline ::rp4::FieldInfo* GatewayParam::release_field() {
    // @@protoc_insertion_point(field_release:rp4.GatewayParam.field)
    if (_internal_has_field()) {
        clear_has_value();
        ::rp4::FieldInfo* temp = value_.field_;
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
        value_.field_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::rp4::FieldInfo& GatewayParam::_internal_field() const {
    return _internal_has_field() ? *value_.field_
                                 : reinterpret_cast<::rp4::FieldInfo&>(
                                       ::rp4::_FieldInfo_default_instance_);
}
inline const ::rp4::FieldInfo& GatewayParam::field() const {
    // @@protoc_insertion_point(field_get:rp4.GatewayParam.field)
    return _internal_field();
}
inline ::rp4::FieldInfo* GatewayParam::unsafe_arena_release_field() {
    // @@protoc_insertion_point(field_unsafe_arena_release:rp4.GatewayParam.field)
    if (_internal_has_field()) {
        clear_has_value();
        ::rp4::FieldInfo* temp = value_.field_;
        value_.field_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void
GatewayParam::unsafe_arena_set_allocated_field(::rp4::FieldInfo* field) {
    clear_value();
    if (field) {
        set_has_field();
        value_.field_ = field;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.GatewayParam.field)
}
inline ::rp4::FieldInfo* GatewayParam::_internal_mutable_field() {
    if (!_internal_has_field()) {
        clear_value();
        set_has_field();
        value_.field_ =
            CreateMaybeMessage<::rp4::FieldInfo>(GetArenaForAllocation());
    }
    return value_.field_;
}
inline ::rp4::FieldInfo* GatewayParam::mutable_field() {
    ::rp4::FieldInfo* _msg = _internal_mutable_field();
    // @@protoc_insertion_point(field_mutable:rp4.GatewayParam.field)
    return _msg;
}

// .rp4.Data data = 3;
inline bool GatewayParam::_internal_has_data() const {
    return value_case() == kData;
}
inline bool GatewayParam::has_data() const { return _internal_has_data(); }
inline void GatewayParam::set_has_data() { _oneof_case_[0] = kData; }
inline void GatewayParam::clear_data() {
    if (_internal_has_data()) {
        if (GetArenaForAllocation() == nullptr) {
            delete value_.data_;
        }
        clear_has_value();
    }
}
inline ::rp4::Data* GatewayParam::release_data() {
    // @@protoc_insertion_point(field_release:rp4.GatewayParam.data)
    if (_internal_has_data()) {
        clear_has_value();
        ::rp4::Data* temp = value_.data_;
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
        value_.data_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::rp4::Data& GatewayParam::_internal_data() const {
    return _internal_has_data()
               ? *value_.data_
               : reinterpret_cast<::rp4::Data&>(::rp4::_Data_default_instance_);
}
inline const ::rp4::Data& GatewayParam::data() const {
    // @@protoc_insertion_point(field_get:rp4.GatewayParam.data)
    return _internal_data();
}
inline ::rp4::Data* GatewayParam::unsafe_arena_release_data() {
    // @@protoc_insertion_point(field_unsafe_arena_release:rp4.GatewayParam.data)
    if (_internal_has_data()) {
        clear_has_value();
        ::rp4::Data* temp = value_.data_;
        value_.data_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void GatewayParam::unsafe_arena_set_allocated_data(::rp4::Data* data) {
    clear_value();
    if (data) {
        set_has_data();
        value_.data_ = data;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.GatewayParam.data)
}
inline ::rp4::Data* GatewayParam::_internal_mutable_data() {
    if (!_internal_has_data()) {
        clear_value();
        set_has_data();
        value_.data_ = CreateMaybeMessage<::rp4::Data>(GetArenaForAllocation());
    }
    return value_.data_;
}
inline ::rp4::Data* GatewayParam::mutable_data() {
    ::rp4::Data* _msg = _internal_mutable_data();
    // @@protoc_insertion_point(field_mutable:rp4.GatewayParam.data)
    return _msg;
}

inline bool GatewayParam::has_value() const {
    return value_case() != VALUE_NOT_SET;
}
inline void GatewayParam::clear_has_value() { _oneof_case_[0] = VALUE_NOT_SET; }
inline GatewayParam::ValueCase GatewayParam::value_case() const {
    return GatewayParam::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RelationExp

// .rp4.GatewayParam param1 = 1;
inline bool RelationExp::_internal_has_param1() const {
    return this != internal_default_instance() && param1_ != nullptr;
}
inline bool RelationExp::has_param1() const { return _internal_has_param1(); }
inline void RelationExp::clear_param1() {
    if (GetArenaForAllocation() == nullptr && param1_ != nullptr) {
        delete param1_;
    }
    param1_ = nullptr;
}
inline const ::rp4::GatewayParam& RelationExp::_internal_param1() const {
    const ::rp4::GatewayParam* p = param1_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::GatewayParam&>(
                              ::rp4::_GatewayParam_default_instance_);
}
inline const ::rp4::GatewayParam& RelationExp::param1() const {
    // @@protoc_insertion_point(field_get:rp4.RelationExp.param1)
    return _internal_param1();
}
inline void
RelationExp::unsafe_arena_set_allocated_param1(::rp4::GatewayParam* param1) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param1_);
    }
    param1_ = param1;
    if (param1) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.RelationExp.param1)
}
inline ::rp4::GatewayParam* RelationExp::release_param1() {

    ::rp4::GatewayParam* temp = param1_;
    param1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::GatewayParam* RelationExp::unsafe_arena_release_param1() {
    // @@protoc_insertion_point(field_release:rp4.RelationExp.param1)

    ::rp4::GatewayParam* temp = param1_;
    param1_ = nullptr;
    return temp;
}
inline ::rp4::GatewayParam* RelationExp::_internal_mutable_param1() {

    if (param1_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::GatewayParam>(GetArenaForAllocation());
        param1_ = p;
    }
    return param1_;
}
inline ::rp4::GatewayParam* RelationExp::mutable_param1() {
    ::rp4::GatewayParam* _msg = _internal_mutable_param1();
    // @@protoc_insertion_point(field_mutable:rp4.RelationExp.param1)
    return _msg;
}
inline void RelationExp::set_allocated_param1(::rp4::GatewayParam* param1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete param1_;
    }
    if (param1) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::GatewayParam>::GetOwningArena(param1);
        if (message_arena != submessage_arena) {
            param1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, param1, submessage_arena);
        }

    } else {
    }
    param1_ = param1;
    // @@protoc_insertion_point(field_set_allocated:rp4.RelationExp.param1)
}

// .rp4.GatewayParam param2 = 2;
inline bool RelationExp::_internal_has_param2() const {
    return this != internal_default_instance() && param2_ != nullptr;
}
inline bool RelationExp::has_param2() const { return _internal_has_param2(); }
inline void RelationExp::clear_param2() {
    if (GetArenaForAllocation() == nullptr && param2_ != nullptr) {
        delete param2_;
    }
    param2_ = nullptr;
}
inline const ::rp4::GatewayParam& RelationExp::_internal_param2() const {
    const ::rp4::GatewayParam* p = param2_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::GatewayParam&>(
                              ::rp4::_GatewayParam_default_instance_);
}
inline const ::rp4::GatewayParam& RelationExp::param2() const {
    // @@protoc_insertion_point(field_get:rp4.RelationExp.param2)
    return _internal_param2();
}
inline void
RelationExp::unsafe_arena_set_allocated_param2(::rp4::GatewayParam* param2) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param2_);
    }
    param2_ = param2;
    if (param2) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.RelationExp.param2)
}
inline ::rp4::GatewayParam* RelationExp::release_param2() {

    ::rp4::GatewayParam* temp = param2_;
    param2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::GatewayParam* RelationExp::unsafe_arena_release_param2() {
    // @@protoc_insertion_point(field_release:rp4.RelationExp.param2)

    ::rp4::GatewayParam* temp = param2_;
    param2_ = nullptr;
    return temp;
}
inline ::rp4::GatewayParam* RelationExp::_internal_mutable_param2() {

    if (param2_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::GatewayParam>(GetArenaForAllocation());
        param2_ = p;
    }
    return param2_;
}
inline ::rp4::GatewayParam* RelationExp::mutable_param2() {
    ::rp4::GatewayParam* _msg = _internal_mutable_param2();
    // @@protoc_insertion_point(field_mutable:rp4.RelationExp.param2)
    return _msg;
}
inline void RelationExp::set_allocated_param2(::rp4::GatewayParam* param2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete param2_;
    }
    if (param2) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::GatewayParam>::GetOwningArena(param2);
        if (message_arena != submessage_arena) {
            param2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, param2, submessage_arena);
        }

    } else {
    }
    param2_ = param2;
    // @@protoc_insertion_point(field_set_allocated:rp4.RelationExp.param2)
}

// .rp4.RelationCode relation = 3;
inline void RelationExp::clear_relation() { relation_ = 0; }
inline ::rp4::RelationCode RelationExp::_internal_relation() const {
    return static_cast<::rp4::RelationCode>(relation_);
}
inline ::rp4::RelationCode RelationExp::relation() const {
    // @@protoc_insertion_point(field_get:rp4.RelationExp.relation)
    return _internal_relation();
}
inline void RelationExp::_internal_set_relation(::rp4::RelationCode value) {

    relation_ = value;
}
inline void RelationExp::set_relation(::rp4::RelationCode value) {
    _internal_set_relation(value);
    // @@protoc_insertion_point(field_set:rp4.RelationExp.relation)
}

// -------------------------------------------------------------------

// InsertRelationExpReq

// int32 procId = 1;
inline void InsertRelationExpReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertRelationExpReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertRelationExpReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertRelationExpReq.procId)
    return _internal_procid();
}
inline void InsertRelationExpReq::_internal_set_procid(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void
InsertRelationExpReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertRelationExpReq.procId)
}

// .rp4.GatewayParam param1 = 2;
inline bool InsertRelationExpReq::_internal_has_param1() const {
    return this != internal_default_instance() && param1_ != nullptr;
}
inline bool InsertRelationExpReq::has_param1() const {
    return _internal_has_param1();
}
inline void InsertRelationExpReq::clear_param1() {
    if (GetArenaForAllocation() == nullptr && param1_ != nullptr) {
        delete param1_;
    }
    param1_ = nullptr;
}
inline const ::rp4::GatewayParam&
InsertRelationExpReq::_internal_param1() const {
    const ::rp4::GatewayParam* p = param1_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::GatewayParam&>(
                              ::rp4::_GatewayParam_default_instance_);
}
inline const ::rp4::GatewayParam& InsertRelationExpReq::param1() const {
    // @@protoc_insertion_point(field_get:rp4.InsertRelationExpReq.param1)
    return _internal_param1();
}
inline void InsertRelationExpReq::unsafe_arena_set_allocated_param1(
    ::rp4::GatewayParam* param1) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param1_);
    }
    param1_ = param1;
    if (param1) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.InsertRelationExpReq.param1)
}
inline ::rp4::GatewayParam* InsertRelationExpReq::release_param1() {

    ::rp4::GatewayParam* temp = param1_;
    param1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::GatewayParam*
InsertRelationExpReq::unsafe_arena_release_param1() {
    // @@protoc_insertion_point(field_release:rp4.InsertRelationExpReq.param1)

    ::rp4::GatewayParam* temp = param1_;
    param1_ = nullptr;
    return temp;
}
inline ::rp4::GatewayParam* InsertRelationExpReq::_internal_mutable_param1() {

    if (param1_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::GatewayParam>(GetArenaForAllocation());
        param1_ = p;
    }
    return param1_;
}
inline ::rp4::GatewayParam* InsertRelationExpReq::mutable_param1() {
    ::rp4::GatewayParam* _msg = _internal_mutable_param1();
    // @@protoc_insertion_point(field_mutable:rp4.InsertRelationExpReq.param1)
    return _msg;
}
inline void
InsertRelationExpReq::set_allocated_param1(::rp4::GatewayParam* param1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete param1_;
    }
    if (param1) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::GatewayParam>::GetOwningArena(param1);
        if (message_arena != submessage_arena) {
            param1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, param1, submessage_arena);
        }

    } else {
    }
    param1_ = param1;
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertRelationExpReq.param1)
}

// .rp4.GatewayParam param2 = 3;
inline bool InsertRelationExpReq::_internal_has_param2() const {
    return this != internal_default_instance() && param2_ != nullptr;
}
inline bool InsertRelationExpReq::has_param2() const {
    return _internal_has_param2();
}
inline void InsertRelationExpReq::clear_param2() {
    if (GetArenaForAllocation() == nullptr && param2_ != nullptr) {
        delete param2_;
    }
    param2_ = nullptr;
}
inline const ::rp4::GatewayParam&
InsertRelationExpReq::_internal_param2() const {
    const ::rp4::GatewayParam* p = param2_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::GatewayParam&>(
                              ::rp4::_GatewayParam_default_instance_);
}
inline const ::rp4::GatewayParam& InsertRelationExpReq::param2() const {
    // @@protoc_insertion_point(field_get:rp4.InsertRelationExpReq.param2)
    return _internal_param2();
}
inline void InsertRelationExpReq::unsafe_arena_set_allocated_param2(
    ::rp4::GatewayParam* param2) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param2_);
    }
    param2_ = param2;
    if (param2) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.InsertRelationExpReq.param2)
}
inline ::rp4::GatewayParam* InsertRelationExpReq::release_param2() {

    ::rp4::GatewayParam* temp = param2_;
    param2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::GatewayParam*
InsertRelationExpReq::unsafe_arena_release_param2() {
    // @@protoc_insertion_point(field_release:rp4.InsertRelationExpReq.param2)

    ::rp4::GatewayParam* temp = param2_;
    param2_ = nullptr;
    return temp;
}
inline ::rp4::GatewayParam* InsertRelationExpReq::_internal_mutable_param2() {

    if (param2_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::GatewayParam>(GetArenaForAllocation());
        param2_ = p;
    }
    return param2_;
}
inline ::rp4::GatewayParam* InsertRelationExpReq::mutable_param2() {
    ::rp4::GatewayParam* _msg = _internal_mutable_param2();
    // @@protoc_insertion_point(field_mutable:rp4.InsertRelationExpReq.param2)
    return _msg;
}
inline void
InsertRelationExpReq::set_allocated_param2(::rp4::GatewayParam* param2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete param2_;
    }
    if (param2) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::GatewayParam>::GetOwningArena(param2);
        if (message_arena != submessage_arena) {
            param2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, param2, submessage_arena);
        }

    } else {
    }
    param2_ = param2;
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertRelationExpReq.param2)
}

// .rp4.RelationCode relation = 4;
inline void InsertRelationExpReq::clear_relation() { relation_ = 0; }
inline ::rp4::RelationCode InsertRelationExpReq::_internal_relation() const {
    return static_cast<::rp4::RelationCode>(relation_);
}
inline ::rp4::RelationCode InsertRelationExpReq::relation() const {
    // @@protoc_insertion_point(field_get:rp4.InsertRelationExpReq.relation)
    return _internal_relation();
}
inline void
InsertRelationExpReq::_internal_set_relation(::rp4::RelationCode value) {

    relation_ = value;
}
inline void InsertRelationExpReq::set_relation(::rp4::RelationCode value) {
    _internal_set_relation(value);
    // @@protoc_insertion_point(field_set:rp4.InsertRelationExpReq.relation)
}

// -------------------------------------------------------------------

// InsertRelationExpResp

// .rp4.Res res = 1;
inline void InsertRelationExpResp::clear_res() { res_ = 0; }
inline ::rp4::Res InsertRelationExpResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res InsertRelationExpResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.InsertRelationExpResp.res)
    return _internal_res();
}
inline void InsertRelationExpResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void InsertRelationExpResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.InsertRelationExpResp.res)
}

// -------------------------------------------------------------------

// ClearRelationExpReq

// int32 procId = 1;
inline void ClearRelationExpReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ClearRelationExpReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearRelationExpReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearRelationExpReq.procId)
    return _internal_procid();
}
inline void ClearRelationExpReq::_internal_set_procid(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void
ClearRelationExpReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearRelationExpReq.procId)
}

// -------------------------------------------------------------------

// ClearRelationExpResp

// .rp4.Res res = 1;
inline void ClearRelationExpResp::clear_res() { res_ = 0; }
inline ::rp4::Res ClearRelationExpResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ClearRelationExpResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ClearRelationExpResp.res)
    return _internal_res();
}
inline void ClearRelationExpResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ClearRelationExpResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ClearRelationExpResp.res)
}

// -------------------------------------------------------------------

// ClearResMapReq

// int32 procId = 1;
inline void ClearResMapReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearResMapReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearResMapReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearResMapReq.procId)
    return _internal_procid();
}
inline void
ClearResMapReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ClearResMapReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearResMapReq.procId)
}

// -------------------------------------------------------------------

// ClearResMapResp

// .rp4.Res res = 1;
inline void ClearResMapResp::clear_res() { res_ = 0; }
inline ::rp4::Res ClearResMapResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ClearResMapResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ClearResMapResp.res)
    return _internal_res();
}
inline void ClearResMapResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ClearResMapResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ClearResMapResp.res)
}

// -------------------------------------------------------------------

// ModResMapReq

// int32 procId = 1;
inline void ModResMapReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ModResMapReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModResMapReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ModResMapReq.procId)
    return _internal_procid();
}
inline void
ModResMapReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ModResMapReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ModResMapReq.procId)
}

// int32 key = 2;
inline void ModResMapReq::clear_key() { key_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ModResMapReq::_internal_key() const {
    return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ModResMapReq::key() const {
    // @@protoc_insertion_point(field_get:rp4.ModResMapReq.key)
    return _internal_key();
}
inline void
ModResMapReq::_internal_set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {

    key_ = value;
}
inline void ModResMapReq::set_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_key(value);
    // @@protoc_insertion_point(field_set:rp4.ModResMapReq.key)
}

// .rp4.GateEntry entry = 3;
inline bool ModResMapReq::_internal_has_entry() const {
    return this != internal_default_instance() && entry_ != nullptr;
}
inline bool ModResMapReq::has_entry() const { return _internal_has_entry(); }
inline void ModResMapReq::clear_entry() {
    if (GetArenaForAllocation() == nullptr && entry_ != nullptr) {
        delete entry_;
    }
    entry_ = nullptr;
}
inline const ::rp4::GateEntry& ModResMapReq::_internal_entry() const {
    const ::rp4::GateEntry* p = entry_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::GateEntry&>(
                              ::rp4::_GateEntry_default_instance_);
}
inline const ::rp4::GateEntry& ModResMapReq::entry() const {
    // @@protoc_insertion_point(field_get:rp4.ModResMapReq.entry)
    return _internal_entry();
}
inline void
ModResMapReq::unsafe_arena_set_allocated_entry(::rp4::GateEntry* entry) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entry_);
    }
    entry_ = entry;
    if (entry) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.ModResMapReq.entry)
}
inline ::rp4::GateEntry* ModResMapReq::release_entry() {

    ::rp4::GateEntry* temp = entry_;
    entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::GateEntry* ModResMapReq::unsafe_arena_release_entry() {
    // @@protoc_insertion_point(field_release:rp4.ModResMapReq.entry)

    ::rp4::GateEntry* temp = entry_;
    entry_ = nullptr;
    return temp;
}
inline ::rp4::GateEntry* ModResMapReq::_internal_mutable_entry() {

    if (entry_ == nullptr) {
        auto* p = CreateMaybeMessage<::rp4::GateEntry>(GetArenaForAllocation());
        entry_ = p;
    }
    return entry_;
}
inline ::rp4::GateEntry* ModResMapReq::mutable_entry() {
    ::rp4::GateEntry* _msg = _internal_mutable_entry();
    // @@protoc_insertion_point(field_mutable:rp4.ModResMapReq.entry)
    return _msg;
}
inline void ModResMapReq::set_allocated_entry(::rp4::GateEntry* entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete entry_;
    }
    if (entry) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::GateEntry>::GetOwningArena(entry);
        if (message_arena != submessage_arena) {
            entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, entry, submessage_arena);
        }

    } else {
    }
    entry_ = entry;
    // @@protoc_insertion_point(field_set_allocated:rp4.ModResMapReq.entry)
}

// -------------------------------------------------------------------

// ModResMapResp

// .rp4.Res res = 1;
inline void ModResMapResp::clear_res() { res_ = 0; }
inline ::rp4::Res ModResMapResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ModResMapResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ModResMapResp.res)
    return _internal_res();
}
inline void ModResMapResp::_internal_set_res(::rp4::Res value) { res_ = value; }
inline void ModResMapResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ModResMapResp.res)
}

// -------------------------------------------------------------------

// SetNoTableReq

// int32 procId = 1;
inline void SetNoTableReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 SetNoTableReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetNoTableReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.SetNoTableReq.procId)
    return _internal_procid();
}
inline void
SetNoTableReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void SetNoTableReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.SetNoTableReq.procId)
}

// int32 matcherId = 2;
inline void SetNoTableReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetNoTableReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetNoTableReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.SetNoTableReq.matcherId)
    return _internal_matcherid();
}
inline void
SetNoTableReq::_internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void SetNoTableReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.SetNoTableReq.matcherId)
}

// bool noTable = 3;
inline void SetNoTableReq::clear_notable() { notable_ = false; }
inline bool SetNoTableReq::_internal_notable() const { return notable_; }
inline bool SetNoTableReq::notable() const {
    // @@protoc_insertion_point(field_get:rp4.SetNoTableReq.noTable)
    return _internal_notable();
}
inline void SetNoTableReq::_internal_set_notable(bool value) {

    notable_ = value;
}
inline void SetNoTableReq::set_notable(bool value) {
    _internal_set_notable(value);
    // @@protoc_insertion_point(field_set:rp4.SetNoTableReq.noTable)
}

// -------------------------------------------------------------------

// SetNoTableResp

// .rp4.Res res = 1;
inline void SetNoTableResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetNoTableResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetNoTableResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetNoTableResp.res)
    return _internal_res();
}
inline void SetNoTableResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetNoTableResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetNoTableResp.res)
}

// -------------------------------------------------------------------

// ActionProc

// int32 actionId = 1;
inline void ActionProc::clear_actionid() { actionid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProc::_internal_actionid() const {
    return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProc::actionid() const {
    // @@protoc_insertion_point(field_get:rp4.ActionProc.actionId)
    return _internal_actionid();
}
inline void
ActionProc::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    actionid_ = value;
}
inline void ActionProc::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_actionid(value);
    // @@protoc_insertion_point(field_set:rp4.ActionProc.actionId)
}

// int32 procId = 2;
inline void ActionProc::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProc::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActionProc::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ActionProc.procId)
    return _internal_procid();
}
inline void
ActionProc::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ActionProc::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ActionProc.procId)
}

// -------------------------------------------------------------------

// SetActionProcReq

// int32 procId = 1;
inline void SetActionProcReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetActionProcReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetActionProcReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.SetActionProcReq.procId)
    return _internal_procid();
}
inline void
SetActionProcReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void SetActionProcReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.SetActionProcReq.procId)
}

// int32 matcherId = 2;
inline void SetActionProcReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetActionProcReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetActionProcReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.SetActionProcReq.matcherId)
    return _internal_matcherid();
}
inline void SetActionProcReq::_internal_set_matcherid(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
SetActionProcReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.SetActionProcReq.matcherId)
}

// repeated .rp4.ActionProc actionProcs = 3;
inline int SetActionProcReq::_internal_actionprocs_size() const {
    return actionprocs_.size();
}
inline int SetActionProcReq::actionprocs_size() const {
    return _internal_actionprocs_size();
}
inline void SetActionProcReq::clear_actionprocs() { actionprocs_.Clear(); }
inline ::rp4::ActionProc* SetActionProcReq::mutable_actionprocs(int index) {
    // @@protoc_insertion_point(field_mutable:rp4.SetActionProcReq.actionProcs)
    return actionprocs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::ActionProc>*
SetActionProcReq::mutable_actionprocs() {
    // @@protoc_insertion_point(field_mutable_list:rp4.SetActionProcReq.actionProcs)
    return &actionprocs_;
}
inline const ::rp4::ActionProc&
SetActionProcReq::_internal_actionprocs(int index) const {
    return actionprocs_.Get(index);
}
inline const ::rp4::ActionProc& SetActionProcReq::actionprocs(int index) const {
    // @@protoc_insertion_point(field_get:rp4.SetActionProcReq.actionProcs)
    return _internal_actionprocs(index);
}
inline ::rp4::ActionProc* SetActionProcReq::_internal_add_actionprocs() {
    return actionprocs_.Add();
}
inline ::rp4::ActionProc* SetActionProcReq::add_actionprocs() {
    ::rp4::ActionProc* _add = _internal_add_actionprocs();
    // @@protoc_insertion_point(field_add:rp4.SetActionProcReq.actionProcs)
    return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::ActionProc>&
SetActionProcReq::actionprocs() const {
    // @@protoc_insertion_point(field_list:rp4.SetActionProcReq.actionProcs)
    return actionprocs_;
}

// -------------------------------------------------------------------

// SetActionProcResp

// .rp4.Res res = 1;
inline void SetActionProcResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetActionProcResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetActionProcResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetActionProcResp.res)
    return _internal_res();
}
inline void SetActionProcResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetActionProcResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetActionProcResp.res)
}

// -------------------------------------------------------------------

// SetMemConfigReq

// int32 procId = 1;
inline void SetMemConfigReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMemConfigReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.procId)
    return _internal_procid();
}
inline void
SetMemConfigReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void SetMemConfigReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.procId)
}

// int32 matcherId = 2;
inline void SetMemConfigReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMemConfigReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.matcherId)
    return _internal_matcherid();
}
inline void
SetMemConfigReq::_internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
SetMemConfigReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.matcherId)
}

// int32 keyWidth = 3;
inline void SetMemConfigReq::clear_keywidth() { keywidth_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMemConfigReq::_internal_keywidth() const {
    return keywidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::keywidth() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.keyWidth)
    return _internal_keywidth();
}
inline void
SetMemConfigReq::_internal_set_keywidth(::PROTOBUF_NAMESPACE_ID::int32 value) {

    keywidth_ = value;
}
inline void
SetMemConfigReq::set_keywidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_keywidth(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.keyWidth)
}

// int32 valueWidth = 4;
inline void SetMemConfigReq::clear_valuewidth() { valuewidth_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMemConfigReq::_internal_valuewidth() const {
    return valuewidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::valuewidth() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.valueWidth)
    return _internal_valuewidth();
}
inline void SetMemConfigReq::_internal_set_valuewidth(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    valuewidth_ = value;
}
inline void
SetMemConfigReq::set_valuewidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_valuewidth(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.valueWidth)
}

// bytes keyConfig = 5;
inline void SetMemConfigReq::clear_keyconfig() { keyconfig_.ClearToEmpty(); }
inline const std::string& SetMemConfigReq::keyconfig() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.keyConfig)
    return _internal_keyconfig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void
SetMemConfigReq::set_keyconfig(ArgT0&& arg0, ArgT... args) {

    keyconfig_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.keyConfig)
}
inline std::string* SetMemConfigReq::mutable_keyconfig() {
    std::string* _s = _internal_mutable_keyconfig();
    // @@protoc_insertion_point(field_mutable:rp4.SetMemConfigReq.keyConfig)
    return _s;
}
inline const std::string& SetMemConfigReq::_internal_keyconfig() const {
    return keyconfig_.Get();
}
inline void SetMemConfigReq::_internal_set_keyconfig(const std::string& value) {

    keyconfig_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        value, GetArenaForAllocation());
}
inline std::string* SetMemConfigReq::_internal_mutable_keyconfig() {

    return keyconfig_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* SetMemConfigReq::release_keyconfig() {
    // @@protoc_insertion_point(field_release:rp4.SetMemConfigReq.keyConfig)
    return keyconfig_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void SetMemConfigReq::set_allocated_keyconfig(std::string* keyconfig) {
    if (keyconfig != nullptr) {

    } else {
    }
    keyconfig_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        keyconfig, GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.SetMemConfigReq.keyConfig)
}

// bytes valueConfig = 6;
inline void SetMemConfigReq::clear_valueconfig() {
    valueconfig_.ClearToEmpty();
}
inline const std::string& SetMemConfigReq::valueconfig() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.valueConfig)
    return _internal_valueconfig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void
SetMemConfigReq::set_valueconfig(ArgT0&& arg0, ArgT... args) {

    valueconfig_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.valueConfig)
}
inline std::string* SetMemConfigReq::mutable_valueconfig() {
    std::string* _s = _internal_mutable_valueconfig();
    // @@protoc_insertion_point(field_mutable:rp4.SetMemConfigReq.valueConfig)
    return _s;
}
inline const std::string& SetMemConfigReq::_internal_valueconfig() const {
    return valueconfig_.Get();
}
inline void
SetMemConfigReq::_internal_set_valueconfig(const std::string& value) {

    valueconfig_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        value, GetArenaForAllocation());
}
inline std::string* SetMemConfigReq::_internal_mutable_valueconfig() {

    return valueconfig_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* SetMemConfigReq::release_valueconfig() {
    // @@protoc_insertion_point(field_release:rp4.SetMemConfigReq.valueConfig)
    return valueconfig_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void
SetMemConfigReq::set_allocated_valueconfig(std::string* valueconfig) {
    if (valueconfig != nullptr) {

    } else {
    }
    valueconfig_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        valueconfig, GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.SetMemConfigReq.valueConfig)
}

// .rp4.MatchType matchType = 7;
inline void SetMemConfigReq::clear_matchtype() { matchtype_ = 0; }
inline ::rp4::MatchType SetMemConfigReq::_internal_matchtype() const {
    return static_cast<::rp4::MatchType>(matchtype_);
}
inline ::rp4::MatchType SetMemConfigReq::matchtype() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.matchType)
    return _internal_matchtype();
}
inline void SetMemConfigReq::_internal_set_matchtype(::rp4::MatchType value) {

    matchtype_ = value;
}
inline void SetMemConfigReq::set_matchtype(::rp4::MatchType value) {
    _internal_set_matchtype(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.matchType)
}

// int32 depth = 8;
inline void SetMemConfigReq::clear_depth() { depth_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::_internal_depth() const {
    return depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::depth() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.depth)
    return _internal_depth();
}
inline void
SetMemConfigReq::_internal_set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {

    depth_ = value;
}
inline void SetMemConfigReq::set_depth(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_depth(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.depth)
}

// int32 missActId = 9;
inline void SetMemConfigReq::clear_missactid() { missactid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMemConfigReq::_internal_missactid() const {
    return missactid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMemConfigReq::missactid() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigReq.missActId)
    return _internal_missactid();
}
inline void
SetMemConfigReq::_internal_set_missactid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    missactid_ = value;
}
inline void
SetMemConfigReq::set_missactid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_missactid(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigReq.missActId)
}

// -------------------------------------------------------------------

// SetMemConfigResp

// .rp4.Res res = 1;
inline void SetMemConfigResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetMemConfigResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetMemConfigResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetMemConfigResp.res)
    return _internal_res();
}
inline void SetMemConfigResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetMemConfigResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetMemConfigResp.res)
}

// -------------------------------------------------------------------

// SetFieldInfoReq

// int32 procId = 1;
inline void SetFieldInfoReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetFieldInfoReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetFieldInfoReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.SetFieldInfoReq.procId)
    return _internal_procid();
}
inline void
SetFieldInfoReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void SetFieldInfoReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.SetFieldInfoReq.procId)
}

// int32 matcherId = 2;
inline void SetFieldInfoReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetFieldInfoReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetFieldInfoReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.SetFieldInfoReq.matcherId)
    return _internal_matcherid();
}
inline void
SetFieldInfoReq::_internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
SetFieldInfoReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.SetFieldInfoReq.matcherId)
}

// repeated .rp4.FieldInfo fdInfos = 3;
inline int SetFieldInfoReq::_internal_fdinfos_size() const {
    return fdinfos_.size();
}
inline int SetFieldInfoReq::fdinfos_size() const {
    return _internal_fdinfos_size();
}
inline void SetFieldInfoReq::clear_fdinfos() { fdinfos_.Clear(); }
inline ::rp4::FieldInfo* SetFieldInfoReq::mutable_fdinfos(int index) {
    // @@protoc_insertion_point(field_mutable:rp4.SetFieldInfoReq.fdInfos)
    return fdinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>*
SetFieldInfoReq::mutable_fdinfos() {
    // @@protoc_insertion_point(field_mutable_list:rp4.SetFieldInfoReq.fdInfos)
    return &fdinfos_;
}
inline const ::rp4::FieldInfo&
SetFieldInfoReq::_internal_fdinfos(int index) const {
    return fdinfos_.Get(index);
}
inline const ::rp4::FieldInfo& SetFieldInfoReq::fdinfos(int index) const {
    // @@protoc_insertion_point(field_get:rp4.SetFieldInfoReq.fdInfos)
    return _internal_fdinfos(index);
}
inline ::rp4::FieldInfo* SetFieldInfoReq::_internal_add_fdinfos() {
    return fdinfos_.Add();
}
inline ::rp4::FieldInfo* SetFieldInfoReq::add_fdinfos() {
    ::rp4::FieldInfo* _add = _internal_add_fdinfos();
    // @@protoc_insertion_point(field_add:rp4.SetFieldInfoReq.fdInfos)
    return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::FieldInfo>&
SetFieldInfoReq::fdinfos() const {
    // @@protoc_insertion_point(field_list:rp4.SetFieldInfoReq.fdInfos)
    return fdinfos_;
}

// -------------------------------------------------------------------

// SetFieldInfoResp

// .rp4.Res res = 1;
inline void SetFieldInfoResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetFieldInfoResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetFieldInfoResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetFieldInfoResp.res)
    return _internal_res();
}
inline void SetFieldInfoResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetFieldInfoResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetFieldInfoResp.res)
}

// -------------------------------------------------------------------

// InsertSramEntryReq

// int32 procId = 1;
inline void InsertSramEntryReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertSramEntryReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertSramEntryReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryReq.procId)
    return _internal_procid();
}
inline void
InsertSramEntryReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void
InsertSramEntryReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryReq.procId)
}

// int32 matcherId = 2;
inline void InsertSramEntryReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertSramEntryReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertSramEntryReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryReq.matcherId)
    return _internal_matcherid();
}
inline void InsertSramEntryReq::_internal_set_matcherid(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
InsertSramEntryReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryReq.matcherId)
}

// bytes key = 3;
inline void InsertSramEntryReq::clear_key() { key_.ClearToEmpty(); }
inline const std::string& InsertSramEntryReq::key() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryReq.key)
    return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void InsertSramEntryReq::set_key(ArgT0&& arg0,
                                                               ArgT... args) {

    key_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryReq.key)
}
inline std::string* InsertSramEntryReq::mutable_key() {
    std::string* _s = _internal_mutable_key();
    // @@protoc_insertion_point(field_mutable:rp4.InsertSramEntryReq.key)
    return _s;
}
inline const std::string& InsertSramEntryReq::_internal_key() const {
    return key_.Get();
}
inline void InsertSramEntryReq::_internal_set_key(const std::string& value) {

    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
             value, GetArenaForAllocation());
}
inline std::string* InsertSramEntryReq::_internal_mutable_key() {

    return key_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* InsertSramEntryReq::release_key() {
    // @@protoc_insertion_point(field_release:rp4.InsertSramEntryReq.key)
    return key_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void InsertSramEntryReq::set_allocated_key(std::string* key) {
    if (key != nullptr) {

    } else {
    }
    key_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
        GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertSramEntryReq.key)
}

// bytes value = 4;
inline void InsertSramEntryReq::clear_value() { value_.ClearToEmpty(); }
inline const std::string& InsertSramEntryReq::value() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryReq.value)
    return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void InsertSramEntryReq::set_value(ArgT0&& arg0,
                                                                 ArgT... args) {

    value_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryReq.value)
}
inline std::string* InsertSramEntryReq::mutable_value() {
    std::string* _s = _internal_mutable_value();
    // @@protoc_insertion_point(field_mutable:rp4.InsertSramEntryReq.value)
    return _s;
}
inline const std::string& InsertSramEntryReq::_internal_value() const {
    return value_.Get();
}
inline void InsertSramEntryReq::_internal_set_value(const std::string& value) {

    value_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        value, GetArenaForAllocation());
}
inline std::string* InsertSramEntryReq::_internal_mutable_value() {

    return value_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* InsertSramEntryReq::release_value() {
    // @@protoc_insertion_point(field_release:rp4.InsertSramEntryReq.value)
    return value_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void InsertSramEntryReq::set_allocated_value(std::string* value) {
    if (value != nullptr) {

    } else {
    }
    value_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value, GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertSramEntryReq.value)
}

// int32 key_byte_len = 5;
inline void InsertSramEntryReq::clear_key_byte_len() { key_byte_len_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertSramEntryReq::_internal_key_byte_len() const {
    return key_byte_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertSramEntryReq::key_byte_len() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryReq.key_byte_len)
    return _internal_key_byte_len();
}
inline void InsertSramEntryReq::_internal_set_key_byte_len(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    key_byte_len_ = value;
}
inline void
InsertSramEntryReq::set_key_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_key_byte_len(value);
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryReq.key_byte_len)
}

// int32 value_byte_len = 6;
inline void InsertSramEntryReq::clear_value_byte_len() { value_byte_len_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertSramEntryReq::_internal_value_byte_len() const {
    return value_byte_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertSramEntryReq::value_byte_len() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryReq.value_byte_len)
    return _internal_value_byte_len();
}
inline void InsertSramEntryReq::_internal_set_value_byte_len(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    value_byte_len_ = value;
}
inline void
InsertSramEntryReq::set_value_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_value_byte_len(value);
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryReq.value_byte_len)
}

// -------------------------------------------------------------------

// InsertSramEntryResp

// .rp4.Res res = 1;
inline void InsertSramEntryResp::clear_res() { res_ = 0; }
inline ::rp4::Res InsertSramEntryResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res InsertSramEntryResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.InsertSramEntryResp.res)
    return _internal_res();
}
inline void InsertSramEntryResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void InsertSramEntryResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.InsertSramEntryResp.res)
}

// -------------------------------------------------------------------

// InsertTcamEntryReq

// int32 procId = 1;
inline void InsertTcamEntryReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertTcamEntryReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertTcamEntryReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.procId)
    return _internal_procid();
}
inline void
InsertTcamEntryReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void
InsertTcamEntryReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.procId)
}

// int32 matcherId = 2;
inline void InsertTcamEntryReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertTcamEntryReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertTcamEntryReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.matcherId)
    return _internal_matcherid();
}
inline void InsertTcamEntryReq::_internal_set_matcherid(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
InsertTcamEntryReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.matcherId)
}

// bytes key = 3;
inline void InsertTcamEntryReq::clear_key() { key_.ClearToEmpty(); }
inline const std::string& InsertTcamEntryReq::key() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.key)
    return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void InsertTcamEntryReq::set_key(ArgT0&& arg0,
                                                               ArgT... args) {

    key_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.key)
}
inline std::string* InsertTcamEntryReq::mutable_key() {
    std::string* _s = _internal_mutable_key();
    // @@protoc_insertion_point(field_mutable:rp4.InsertTcamEntryReq.key)
    return _s;
}
inline const std::string& InsertTcamEntryReq::_internal_key() const {
    return key_.Get();
}
inline void InsertTcamEntryReq::_internal_set_key(const std::string& value) {

    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
             value, GetArenaForAllocation());
}
inline std::string* InsertTcamEntryReq::_internal_mutable_key() {

    return key_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* InsertTcamEntryReq::release_key() {
    // @@protoc_insertion_point(field_release:rp4.InsertTcamEntryReq.key)
    return key_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void InsertTcamEntryReq::set_allocated_key(std::string* key) {
    if (key != nullptr) {

    } else {
    }
    key_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
        GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertTcamEntryReq.key)
}

// bytes mask = 4;
inline void InsertTcamEntryReq::clear_mask() { mask_.ClearToEmpty(); }
inline const std::string& InsertTcamEntryReq::mask() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.mask)
    return _internal_mask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void InsertTcamEntryReq::set_mask(ArgT0&& arg0,
                                                                ArgT... args) {

    mask_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.mask)
}
inline std::string* InsertTcamEntryReq::mutable_mask() {
    std::string* _s = _internal_mutable_mask();
    // @@protoc_insertion_point(field_mutable:rp4.InsertTcamEntryReq.mask)
    return _s;
}
inline const std::string& InsertTcamEntryReq::_internal_mask() const {
    return mask_.Get();
}
inline void InsertTcamEntryReq::_internal_set_mask(const std::string& value) {

    mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
              value, GetArenaForAllocation());
}
inline std::string* InsertTcamEntryReq::_internal_mutable_mask() {

    return mask_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* InsertTcamEntryReq::release_mask() {
    // @@protoc_insertion_point(field_release:rp4.InsertTcamEntryReq.mask)
    return mask_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void InsertTcamEntryReq::set_allocated_mask(std::string* mask) {
    if (mask != nullptr) {

    } else {
    }
    mask_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask,
        GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertTcamEntryReq.mask)
}

// bytes value = 5;
inline void InsertTcamEntryReq::clear_value() { value_.ClearToEmpty(); }
inline const std::string& InsertTcamEntryReq::value() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.value)
    return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void InsertTcamEntryReq::set_value(ArgT0&& arg0,
                                                                 ArgT... args) {

    value_.SetBytes(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.value)
}
inline std::string* InsertTcamEntryReq::mutable_value() {
    std::string* _s = _internal_mutable_value();
    // @@protoc_insertion_point(field_mutable:rp4.InsertTcamEntryReq.value)
    return _s;
}
inline const std::string& InsertTcamEntryReq::_internal_value() const {
    return value_.Get();
}
inline void InsertTcamEntryReq::_internal_set_value(const std::string& value) {

    value_.Set(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        value, GetArenaForAllocation());
}
inline std::string* InsertTcamEntryReq::_internal_mutable_value() {

    return value_.Mutable(
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
        GetArenaForAllocation());
}
inline std::string* InsertTcamEntryReq::release_value() {
    // @@protoc_insertion_point(field_release:rp4.InsertTcamEntryReq.value)
    return value_.Release(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaForAllocation());
}
inline void InsertTcamEntryReq::set_allocated_value(std::string* value) {
    if (value != nullptr) {

    } else {
    }
    value_.SetAllocated(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        value, GetArenaForAllocation());
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertTcamEntryReq.value)
}

// int32 key_byte_len = 6;
inline void InsertTcamEntryReq::clear_key_byte_len() { key_byte_len_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertTcamEntryReq::_internal_key_byte_len() const {
    return key_byte_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertTcamEntryReq::key_byte_len() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.key_byte_len)
    return _internal_key_byte_len();
}
inline void InsertTcamEntryReq::_internal_set_key_byte_len(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    key_byte_len_ = value;
}
inline void
InsertTcamEntryReq::set_key_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_key_byte_len(value);
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.key_byte_len)
}

// int32 value_byte_len = 7;
inline void InsertTcamEntryReq::clear_value_byte_len() { value_byte_len_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertTcamEntryReq::_internal_value_byte_len() const {
    return value_byte_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertTcamEntryReq::value_byte_len() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryReq.value_byte_len)
    return _internal_value_byte_len();
}
inline void InsertTcamEntryReq::_internal_set_value_byte_len(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    value_byte_len_ = value;
}
inline void
InsertTcamEntryReq::set_value_byte_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_value_byte_len(value);
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryReq.value_byte_len)
}

// -------------------------------------------------------------------

// InsertTcamEntryResp

// .rp4.Res res = 1;
inline void InsertTcamEntryResp::clear_res() { res_ = 0; }
inline ::rp4::Res InsertTcamEntryResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res InsertTcamEntryResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.InsertTcamEntryResp.res)
    return _internal_res();
}
inline void InsertTcamEntryResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void InsertTcamEntryResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.InsertTcamEntryResp.res)
}

// -------------------------------------------------------------------

// ClearOldConfigReq

// int32 procId = 1;
inline void ClearOldConfigReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ClearOldConfigReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearOldConfigReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearOldConfigReq.procId)
    return _internal_procid();
}
inline void
ClearOldConfigReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void
ClearOldConfigReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearOldConfigReq.procId)
}

// int32 matcherId = 2;
inline void ClearOldConfigReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
ClearOldConfigReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearOldConfigReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearOldConfigReq.matcherId)
    return _internal_matcherid();
}
inline void ClearOldConfigReq::_internal_set_matcherid(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
ClearOldConfigReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearOldConfigReq.matcherId)
}

// -------------------------------------------------------------------

// ClearOldConfigResp

// .rp4.Res res = 1;
inline void ClearOldConfigResp::clear_res() { res_ = 0; }
inline ::rp4::Res ClearOldConfigResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ClearOldConfigResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ClearOldConfigResp.res)
    return _internal_res();
}
inline void ClearOldConfigResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ClearOldConfigResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ClearOldConfigResp.res)
}

// -------------------------------------------------------------------

// SetMissActIdReq

// int32 procId = 1;
inline void SetMissActIdReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMissActIdReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMissActIdReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.SetMissActIdReq.procId)
    return _internal_procid();
}
inline void
SetMissActIdReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void SetMissActIdReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.SetMissActIdReq.procId)
}

// int32 matcherId = 2;
inline void SetMissActIdReq::clear_matcherid() { matcherid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMissActIdReq::_internal_matcherid() const {
    return matcherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMissActIdReq::matcherid() const {
    // @@protoc_insertion_point(field_get:rp4.SetMissActIdReq.matcherId)
    return _internal_matcherid();
}
inline void
SetMissActIdReq::_internal_set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    matcherid_ = value;
}
inline void
SetMissActIdReq::set_matcherid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_matcherid(value);
    // @@protoc_insertion_point(field_set:rp4.SetMissActIdReq.matcherId)
}

// int32 miss_act_id = 3;
inline void SetMissActIdReq::clear_miss_act_id() { miss_act_id_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
SetMissActIdReq::_internal_miss_act_id() const {
    return miss_act_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetMissActIdReq::miss_act_id() const {
    // @@protoc_insertion_point(field_get:rp4.SetMissActIdReq.miss_act_id)
    return _internal_miss_act_id();
}
inline void SetMissActIdReq::_internal_set_miss_act_id(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {

    miss_act_id_ = value;
}
inline void
SetMissActIdReq::set_miss_act_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_miss_act_id(value);
    // @@protoc_insertion_point(field_set:rp4.SetMissActIdReq.miss_act_id)
}

// -------------------------------------------------------------------

// SetMissActIdResp

// .rp4.Res res = 1;
inline void SetMissActIdResp::clear_res() { res_ = 0; }
inline ::rp4::Res SetMissActIdResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res SetMissActIdResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.SetMissActIdResp.res)
    return _internal_res();
}
inline void SetMissActIdResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void SetMissActIdResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.SetMissActIdResp.res)
}

// -------------------------------------------------------------------

// Parameter

// .rp4.ParameterType type = 1;
inline void Parameter::clear_type() { type_ = 0; }
inline ::rp4::ParameterType Parameter::_internal_type() const {
    return static_cast<::rp4::ParameterType>(type_);
}
inline ::rp4::ParameterType Parameter::type() const {
    // @@protoc_insertion_point(field_get:rp4.Parameter.type)
    return _internal_type();
}
inline void Parameter::_internal_set_type(::rp4::ParameterType value) {

    type_ = value;
}
inline void Parameter::set_type(::rp4::ParameterType value) {
    _internal_set_type(value);
    // @@protoc_insertion_point(field_set:rp4.Parameter.type)
}

// int32 hdrId = 2;
inline bool Parameter::_internal_has_hdrid() const {
    return val_case() == kHdrId;
}
inline bool Parameter::has_hdrid() const { return _internal_has_hdrid(); }
inline void Parameter::set_has_hdrid() { _oneof_case_[0] = kHdrId; }
inline void Parameter::clear_hdrid() {
    if (_internal_has_hdrid()) {
        val_.hdrid_ = 0;
        clear_has_val();
    }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::_internal_hdrid() const {
    if (_internal_has_hdrid()) {
        return val_.hdrid_;
    }
    return 0;
}
inline void
Parameter::_internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    if (!_internal_has_hdrid()) {
        clear_val();
        set_has_hdrid();
    }
    val_.hdrid_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::hdrid() const {
    // @@protoc_insertion_point(field_get:rp4.Parameter.hdrId)
    return _internal_hdrid();
}
inline void Parameter::set_hdrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_hdrid(value);
    // @@protoc_insertion_point(field_set:rp4.Parameter.hdrId)
}

// .rp4.FieldInfo field = 3;
inline bool Parameter::_internal_has_field() const {
    return val_case() == kField;
}
inline bool Parameter::has_field() const { return _internal_has_field(); }
inline void Parameter::set_has_field() { _oneof_case_[0] = kField; }
inline void Parameter::clear_field() {
    if (_internal_has_field()) {
        if (GetArenaForAllocation() == nullptr) {
            delete val_.field_;
        }
        clear_has_val();
    }
}
inline ::rp4::FieldInfo* Parameter::release_field() {
    // @@protoc_insertion_point(field_release:rp4.Parameter.field)
    if (_internal_has_field()) {
        clear_has_val();
        ::rp4::FieldInfo* temp = val_.field_;
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
        val_.field_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::rp4::FieldInfo& Parameter::_internal_field() const {
    return _internal_has_field() ? *val_.field_
                                 : reinterpret_cast<::rp4::FieldInfo&>(
                                       ::rp4::_FieldInfo_default_instance_);
}
inline const ::rp4::FieldInfo& Parameter::field() const {
    // @@protoc_insertion_point(field_get:rp4.Parameter.field)
    return _internal_field();
}
inline ::rp4::FieldInfo* Parameter::unsafe_arena_release_field() {
    // @@protoc_insertion_point(field_unsafe_arena_release:rp4.Parameter.field)
    if (_internal_has_field()) {
        clear_has_val();
        ::rp4::FieldInfo* temp = val_.field_;
        val_.field_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void
Parameter::unsafe_arena_set_allocated_field(::rp4::FieldInfo* field) {
    clear_val();
    if (field) {
        set_has_field();
        val_.field_ = field;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.Parameter.field)
}
inline ::rp4::FieldInfo* Parameter::_internal_mutable_field() {
    if (!_internal_has_field()) {
        clear_val();
        set_has_field();
        val_.field_ =
            CreateMaybeMessage<::rp4::FieldInfo>(GetArenaForAllocation());
    }
    return val_.field_;
}
inline ::rp4::FieldInfo* Parameter::mutable_field() {
    ::rp4::FieldInfo* _msg = _internal_mutable_field();
    // @@protoc_insertion_point(field_mutable:rp4.Parameter.field)
    return _msg;
}

// .rp4.Data constantData = 4;
inline bool Parameter::_internal_has_constantdata() const {
    return val_case() == kConstantData;
}
inline bool Parameter::has_constantdata() const {
    return _internal_has_constantdata();
}
inline void Parameter::set_has_constantdata() {
    _oneof_case_[0] = kConstantData;
}
inline void Parameter::clear_constantdata() {
    if (_internal_has_constantdata()) {
        if (GetArenaForAllocation() == nullptr) {
            delete val_.constantdata_;
        }
        clear_has_val();
    }
}
inline ::rp4::Data* Parameter::release_constantdata() {
    // @@protoc_insertion_point(field_release:rp4.Parameter.constantData)
    if (_internal_has_constantdata()) {
        clear_has_val();
        ::rp4::Data* temp = val_.constantdata_;
        if (GetArenaForAllocation() != nullptr) {
            temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
        }
        val_.constantdata_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline const ::rp4::Data& Parameter::_internal_constantdata() const {
    return _internal_has_constantdata()
               ? *val_.constantdata_
               : reinterpret_cast<::rp4::Data&>(::rp4::_Data_default_instance_);
}
inline const ::rp4::Data& Parameter::constantdata() const {
    // @@protoc_insertion_point(field_get:rp4.Parameter.constantData)
    return _internal_constantdata();
}
inline ::rp4::Data* Parameter::unsafe_arena_release_constantdata() {
    // @@protoc_insertion_point(field_unsafe_arena_release:rp4.Parameter.constantData)
    if (_internal_has_constantdata()) {
        clear_has_val();
        ::rp4::Data* temp = val_.constantdata_;
        val_.constantdata_ = nullptr;
        return temp;
    } else {
        return nullptr;
    }
}
inline void
Parameter::unsafe_arena_set_allocated_constantdata(::rp4::Data* constantdata) {
    clear_val();
    if (constantdata) {
        set_has_constantdata();
        val_.constantdata_ = constantdata;
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.Parameter.constantData)
}
inline ::rp4::Data* Parameter::_internal_mutable_constantdata() {
    if (!_internal_has_constantdata()) {
        clear_val();
        set_has_constantdata();
        val_.constantdata_ =
            CreateMaybeMessage<::rp4::Data>(GetArenaForAllocation());
    }
    return val_.constantdata_;
}
inline ::rp4::Data* Parameter::mutable_constantdata() {
    ::rp4::Data* _msg = _internal_mutable_constantdata();
    // @@protoc_insertion_point(field_mutable:rp4.Parameter.constantData)
    return _msg;
}

// int32 actionParaId = 5;
inline bool Parameter::_internal_has_actionparaid() const {
    return val_case() == kActionParaId;
}
inline bool Parameter::has_actionparaid() const {
    return _internal_has_actionparaid();
}
inline void Parameter::set_has_actionparaid() {
    _oneof_case_[0] = kActionParaId;
}
inline void Parameter::clear_actionparaid() {
    if (_internal_has_actionparaid()) {
        val_.actionparaid_ = 0;
        clear_has_val();
    }
}
inline ::PROTOBUF_NAMESPACE_ID::int32
Parameter::_internal_actionparaid() const {
    if (_internal_has_actionparaid()) {
        return val_.actionparaid_;
    }
    return 0;
}
inline void
Parameter::_internal_set_actionparaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    if (!_internal_has_actionparaid()) {
        clear_val();
        set_has_actionparaid();
    }
    val_.actionparaid_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::actionparaid() const {
    // @@protoc_insertion_point(field_get:rp4.Parameter.actionParaId)
    return _internal_actionparaid();
}
inline void Parameter::set_actionparaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_actionparaid(value);
    // @@protoc_insertion_point(field_set:rp4.Parameter.actionParaId)
}

// .rp4.OpCode op = 6;
inline bool Parameter::_internal_has_op() const { return val_case() == kOp; }
inline bool Parameter::has_op() const { return _internal_has_op(); }
inline void Parameter::set_has_op() { _oneof_case_[0] = kOp; }
inline void Parameter::clear_op() {
    if (_internal_has_op()) {
        val_.op_ = 0;
        clear_has_val();
    }
}
inline ::rp4::OpCode Parameter::_internal_op() const {
    if (_internal_has_op()) {
        return static_cast<::rp4::OpCode>(val_.op_);
    }
    return static_cast<::rp4::OpCode>(0);
}
inline ::rp4::OpCode Parameter::op() const {
    // @@protoc_insertion_point(field_get:rp4.Parameter.op)
    return _internal_op();
}
inline void Parameter::_internal_set_op(::rp4::OpCode value) {
    if (!_internal_has_op()) {
        clear_val();
        set_has_op();
    }
    val_.op_ = value;
}
inline void Parameter::set_op(::rp4::OpCode value) {
    _internal_set_op(value);
    // @@protoc_insertion_point(field_set:rp4.Parameter.op)
}

inline bool Parameter::has_val() const { return val_case() != VAL_NOT_SET; }
inline void Parameter::clear_has_val() { _oneof_case_[0] = VAL_NOT_SET; }
inline Parameter::ValCase Parameter::val_case() const {
    return Parameter::ValCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExpTreeNode

// .rp4.Parameter opt = 1;
inline bool ExpTreeNode::_internal_has_opt() const {
    return this != internal_default_instance() && opt_ != nullptr;
}
inline bool ExpTreeNode::has_opt() const { return _internal_has_opt(); }
inline void ExpTreeNode::clear_opt() {
    if (GetArenaForAllocation() == nullptr && opt_ != nullptr) {
        delete opt_;
    }
    opt_ = nullptr;
}
inline const ::rp4::Parameter& ExpTreeNode::_internal_opt() const {
    const ::rp4::Parameter* p = opt_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::Parameter&>(
                              ::rp4::_Parameter_default_instance_);
}
inline const ::rp4::Parameter& ExpTreeNode::opt() const {
    // @@protoc_insertion_point(field_get:rp4.ExpTreeNode.opt)
    return _internal_opt();
}
inline void ExpTreeNode::unsafe_arena_set_allocated_opt(::rp4::Parameter* opt) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(opt_);
    }
    opt_ = opt;
    if (opt) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.ExpTreeNode.opt)
}
inline ::rp4::Parameter* ExpTreeNode::release_opt() {

    ::rp4::Parameter* temp = opt_;
    opt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::Parameter* ExpTreeNode::unsafe_arena_release_opt() {
    // @@protoc_insertion_point(field_release:rp4.ExpTreeNode.opt)

    ::rp4::Parameter* temp = opt_;
    opt_ = nullptr;
    return temp;
}
inline ::rp4::Parameter* ExpTreeNode::_internal_mutable_opt() {

    if (opt_ == nullptr) {
        auto* p = CreateMaybeMessage<::rp4::Parameter>(GetArenaForAllocation());
        opt_ = p;
    }
    return opt_;
}
inline ::rp4::Parameter* ExpTreeNode::mutable_opt() {
    ::rp4::Parameter* _msg = _internal_mutable_opt();
    // @@protoc_insertion_point(field_mutable:rp4.ExpTreeNode.opt)
    return _msg;
}
inline void ExpTreeNode::set_allocated_opt(::rp4::Parameter* opt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete opt_;
    }
    if (opt) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::Parameter>::GetOwningArena(opt);
        if (message_arena != submessage_arena) {
            opt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, opt, submessage_arena);
        }

    } else {
    }
    opt_ = opt;
    // @@protoc_insertion_point(field_set_allocated:rp4.ExpTreeNode.opt)
}

// .rp4.ExpTreeNode left = 2;
inline bool ExpTreeNode::_internal_has_left() const {
    return this != internal_default_instance() && left_ != nullptr;
}
inline bool ExpTreeNode::has_left() const { return _internal_has_left(); }
inline void ExpTreeNode::clear_left() {
    if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
        delete left_;
    }
    left_ = nullptr;
}
inline const ::rp4::ExpTreeNode& ExpTreeNode::_internal_left() const {
    const ::rp4::ExpTreeNode* p = left_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::ExpTreeNode&>(
                              ::rp4::_ExpTreeNode_default_instance_);
}
inline const ::rp4::ExpTreeNode& ExpTreeNode::left() const {
    // @@protoc_insertion_point(field_get:rp4.ExpTreeNode.left)
    return _internal_left();
}
inline void
ExpTreeNode::unsafe_arena_set_allocated_left(::rp4::ExpTreeNode* left) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
    }
    left_ = left;
    if (left) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.ExpTreeNode.left)
}
inline ::rp4::ExpTreeNode* ExpTreeNode::release_left() {

    ::rp4::ExpTreeNode* temp = left_;
    left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::ExpTreeNode* ExpTreeNode::unsafe_arena_release_left() {
    // @@protoc_insertion_point(field_release:rp4.ExpTreeNode.left)

    ::rp4::ExpTreeNode* temp = left_;
    left_ = nullptr;
    return temp;
}
inline ::rp4::ExpTreeNode* ExpTreeNode::_internal_mutable_left() {

    if (left_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::ExpTreeNode>(GetArenaForAllocation());
        left_ = p;
    }
    return left_;
}
inline ::rp4::ExpTreeNode* ExpTreeNode::mutable_left() {
    ::rp4::ExpTreeNode* _msg = _internal_mutable_left();
    // @@protoc_insertion_point(field_mutable:rp4.ExpTreeNode.left)
    return _msg;
}
inline void ExpTreeNode::set_allocated_left(::rp4::ExpTreeNode* left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete left_;
    }
    if (left) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::ExpTreeNode>::GetOwningArena(left);
        if (message_arena != submessage_arena) {
            left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, left, submessage_arena);
        }

    } else {
    }
    left_ = left;
    // @@protoc_insertion_point(field_set_allocated:rp4.ExpTreeNode.left)
}

// .rp4.ExpTreeNode right = 3;
inline bool ExpTreeNode::_internal_has_right() const {
    return this != internal_default_instance() && right_ != nullptr;
}
inline bool ExpTreeNode::has_right() const { return _internal_has_right(); }
inline void ExpTreeNode::clear_right() {
    if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
        delete right_;
    }
    right_ = nullptr;
}
inline const ::rp4::ExpTreeNode& ExpTreeNode::_internal_right() const {
    const ::rp4::ExpTreeNode* p = right_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::ExpTreeNode&>(
                              ::rp4::_ExpTreeNode_default_instance_);
}
inline const ::rp4::ExpTreeNode& ExpTreeNode::right() const {
    // @@protoc_insertion_point(field_get:rp4.ExpTreeNode.right)
    return _internal_right();
}
inline void
ExpTreeNode::unsafe_arena_set_allocated_right(::rp4::ExpTreeNode* right) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
    }
    right_ = right;
    if (right) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.ExpTreeNode.right)
}
inline ::rp4::ExpTreeNode* ExpTreeNode::release_right() {

    ::rp4::ExpTreeNode* temp = right_;
    right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::ExpTreeNode* ExpTreeNode::unsafe_arena_release_right() {
    // @@protoc_insertion_point(field_release:rp4.ExpTreeNode.right)

    ::rp4::ExpTreeNode* temp = right_;
    right_ = nullptr;
    return temp;
}
inline ::rp4::ExpTreeNode* ExpTreeNode::_internal_mutable_right() {

    if (right_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::ExpTreeNode>(GetArenaForAllocation());
        right_ = p;
    }
    return right_;
}
inline ::rp4::ExpTreeNode* ExpTreeNode::mutable_right() {
    ::rp4::ExpTreeNode* _msg = _internal_mutable_right();
    // @@protoc_insertion_point(field_mutable:rp4.ExpTreeNode.right)
    return _msg;
}
inline void ExpTreeNode::set_allocated_right(::rp4::ExpTreeNode* right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete right_;
    }
    if (right) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::ExpTreeNode>::GetOwningArena(right);
        if (message_arena != submessage_arena) {
            right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, right, submessage_arena);
        }

    } else {
    }
    right_ = right;
    // @@protoc_insertion_point(field_set_allocated:rp4.ExpTreeNode.right)
}

// -------------------------------------------------------------------

// Prim

// .rp4.FieldInfo lvalue = 1;
inline bool Prim::_internal_has_lvalue() const {
    return this != internal_default_instance() && lvalue_ != nullptr;
}
inline bool Prim::has_lvalue() const { return _internal_has_lvalue(); }
inline void Prim::clear_lvalue() {
    if (GetArenaForAllocation() == nullptr && lvalue_ != nullptr) {
        delete lvalue_;
    }
    lvalue_ = nullptr;
}
inline const ::rp4::FieldInfo& Prim::_internal_lvalue() const {
    const ::rp4::FieldInfo* p = lvalue_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::FieldInfo&>(
                              ::rp4::_FieldInfo_default_instance_);
}
inline const ::rp4::FieldInfo& Prim::lvalue() const {
    // @@protoc_insertion_point(field_get:rp4.Prim.lvalue)
    return _internal_lvalue();
}
inline void Prim::unsafe_arena_set_allocated_lvalue(::rp4::FieldInfo* lvalue) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lvalue_);
    }
    lvalue_ = lvalue;
    if (lvalue) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.Prim.lvalue)
}
inline ::rp4::FieldInfo* Prim::release_lvalue() {

    ::rp4::FieldInfo* temp = lvalue_;
    lvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::FieldInfo* Prim::unsafe_arena_release_lvalue() {
    // @@protoc_insertion_point(field_release:rp4.Prim.lvalue)

    ::rp4::FieldInfo* temp = lvalue_;
    lvalue_ = nullptr;
    return temp;
}
inline ::rp4::FieldInfo* Prim::_internal_mutable_lvalue() {

    if (lvalue_ == nullptr) {
        auto* p = CreateMaybeMessage<::rp4::FieldInfo>(GetArenaForAllocation());
        lvalue_ = p;
    }
    return lvalue_;
}
inline ::rp4::FieldInfo* Prim::mutable_lvalue() {
    ::rp4::FieldInfo* _msg = _internal_mutable_lvalue();
    // @@protoc_insertion_point(field_mutable:rp4.Prim.lvalue)
    return _msg;
}
inline void Prim::set_allocated_lvalue(::rp4::FieldInfo* lvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete lvalue_;
    }
    if (lvalue) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::FieldInfo>::GetOwningArena(lvalue);
        if (message_arena != submessage_arena) {
            lvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, lvalue, submessage_arena);
        }

    } else {
    }
    lvalue_ = lvalue;
    // @@protoc_insertion_point(field_set_allocated:rp4.Prim.lvalue)
}

// .rp4.ExpTreeNode root = 2;
inline bool Prim::_internal_has_root() const {
    return this != internal_default_instance() && root_ != nullptr;
}
inline bool Prim::has_root() const { return _internal_has_root(); }
inline void Prim::clear_root() {
    if (GetArenaForAllocation() == nullptr && root_ != nullptr) {
        delete root_;
    }
    root_ = nullptr;
}
inline const ::rp4::ExpTreeNode& Prim::_internal_root() const {
    const ::rp4::ExpTreeNode* p = root_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::ExpTreeNode&>(
                              ::rp4::_ExpTreeNode_default_instance_);
}
inline const ::rp4::ExpTreeNode& Prim::root() const {
    // @@protoc_insertion_point(field_get:rp4.Prim.root)
    return _internal_root();
}
inline void Prim::unsafe_arena_set_allocated_root(::rp4::ExpTreeNode* root) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
    }
    root_ = root;
    if (root) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.Prim.root)
}
inline ::rp4::ExpTreeNode* Prim::release_root() {

    ::rp4::ExpTreeNode* temp = root_;
    root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::ExpTreeNode* Prim::unsafe_arena_release_root() {
    // @@protoc_insertion_point(field_release:rp4.Prim.root)

    ::rp4::ExpTreeNode* temp = root_;
    root_ = nullptr;
    return temp;
}
inline ::rp4::ExpTreeNode* Prim::_internal_mutable_root() {

    if (root_ == nullptr) {
        auto* p =
            CreateMaybeMessage<::rp4::ExpTreeNode>(GetArenaForAllocation());
        root_ = p;
    }
    return root_;
}
inline ::rp4::ExpTreeNode* Prim::mutable_root() {
    ::rp4::ExpTreeNode* _msg = _internal_mutable_root();
    // @@protoc_insertion_point(field_mutable:rp4.Prim.root)
    return _msg;
}
inline void Prim::set_allocated_root(::rp4::ExpTreeNode* root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete root_;
    }
    if (root) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::ExpTreeNode>::GetOwningArena(root);
        if (message_arena != submessage_arena) {
            root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, root, submessage_arena);
        }

    } else {
    }
    root_ = root;
    // @@protoc_insertion_point(field_set_allocated:rp4.Prim.root)
}

// -------------------------------------------------------------------

// Action

// int32 paraNum = 1;
inline void Action::clear_paranum() { paranum_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::_internal_paranum() const {
    return paranum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::paranum() const {
    // @@protoc_insertion_point(field_get:rp4.Action.paraNum)
    return _internal_paranum();
}
inline void
Action::_internal_set_paranum(::PROTOBUF_NAMESPACE_ID::int32 value) {

    paranum_ = value;
}
inline void Action::set_paranum(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_paranum(value);
    // @@protoc_insertion_point(field_set:rp4.Action.paraNum)
}

// repeated .rp4.Prim prims = 2;
inline int Action::_internal_prims_size() const { return prims_.size(); }
inline int Action::prims_size() const { return _internal_prims_size(); }
inline void Action::clear_prims() { prims_.Clear(); }
inline ::rp4::Prim* Action::mutable_prims(int index) {
    // @@protoc_insertion_point(field_mutable:rp4.Action.prims)
    return prims_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::Prim>*
Action::mutable_prims() {
    // @@protoc_insertion_point(field_mutable_list:rp4.Action.prims)
    return &prims_;
}
inline const ::rp4::Prim& Action::_internal_prims(int index) const {
    return prims_.Get(index);
}
inline const ::rp4::Prim& Action::prims(int index) const {
    // @@protoc_insertion_point(field_get:rp4.Action.prims)
    return _internal_prims(index);
}
inline ::rp4::Prim* Action::_internal_add_prims() { return prims_.Add(); }
inline ::rp4::Prim* Action::add_prims() {
    ::rp4::Prim* _add = _internal_add_prims();
    // @@protoc_insertion_point(field_add:rp4.Action.prims)
    return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::rp4::Prim>&
Action::prims() const {
    // @@protoc_insertion_point(field_list:rp4.Action.prims)
    return prims_;
}

// repeated int32 actionParaLens = 4;
inline int Action::_internal_actionparalens_size() const {
    return actionparalens_.size();
}
inline int Action::actionparalens_size() const {
    return _internal_actionparalens_size();
}
inline void Action::clear_actionparalens() { actionparalens_.Clear(); }
inline ::PROTOBUF_NAMESPACE_ID::int32
Action::_internal_actionparalens(int index) const {
    return actionparalens_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::actionparalens(int index) const {
    // @@protoc_insertion_point(field_get:rp4.Action.actionParaLens)
    return _internal_actionparalens(index);
}
inline void Action::set_actionparalens(int index,
                                       ::PROTOBUF_NAMESPACE_ID::int32 value) {
    actionparalens_.Set(index, value);
    // @@protoc_insertion_point(field_set:rp4.Action.actionParaLens)
}
inline void
Action::_internal_add_actionparalens(::PROTOBUF_NAMESPACE_ID::int32 value) {
    actionparalens_.Add(value);
}
inline void Action::add_actionparalens(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_add_actionparalens(value);
    // @@protoc_insertion_point(field_add:rp4.Action.actionParaLens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::int32>&
Action::_internal_actionparalens() const {
    return actionparalens_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<
    ::PROTOBUF_NAMESPACE_ID::int32>&
Action::actionparalens() const {
    // @@protoc_insertion_point(field_list:rp4.Action.actionParaLens)
    return _internal_actionparalens();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
Action::_internal_mutable_actionparalens() {
    return &actionparalens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::PROTOBUF_NAMESPACE_ID::int32>*
Action::mutable_actionparalens() {
    // @@protoc_insertion_point(field_mutable_list:rp4.Action.actionParaLens)
    return _internal_mutable_actionparalens();
}

// -------------------------------------------------------------------

// InsertActionReq

// int32 procId = 1;
inline void InsertActionReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertActionReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertActionReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertActionReq.procId)
    return _internal_procid();
}
inline void
InsertActionReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void InsertActionReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertActionReq.procId)
}

// .rp4.Action action = 2;
inline bool InsertActionReq::_internal_has_action() const {
    return this != internal_default_instance() && action_ != nullptr;
}
inline bool InsertActionReq::has_action() const {
    return _internal_has_action();
}
inline void InsertActionReq::clear_action() {
    if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
        delete action_;
    }
    action_ = nullptr;
}
inline const ::rp4::Action& InsertActionReq::_internal_action() const {
    const ::rp4::Action* p = action_;
    return p != nullptr ? *p
                        : reinterpret_cast<const ::rp4::Action&>(
                              ::rp4::_Action_default_instance_);
}
inline const ::rp4::Action& InsertActionReq::action() const {
    // @@protoc_insertion_point(field_get:rp4.InsertActionReq.action)
    return _internal_action();
}
inline void
InsertActionReq::unsafe_arena_set_allocated_action(::rp4::Action* action) {
    if (GetArenaForAllocation() == nullptr) {
        delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
    }
    action_ = action;
    if (action) {

    } else {
    }
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rp4.InsertActionReq.action)
}
inline ::rp4::Action* InsertActionReq::release_action() {

    ::rp4::Action* temp = action_;
    action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
    auto* old = reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    if (GetArenaForAllocation() == nullptr) {
        delete old;
    }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
    if (GetArenaForAllocation() != nullptr) {
        temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
#endif // !PROTOBUF_FORCE_COPY_IN_RELEASE
    return temp;
}
inline ::rp4::Action* InsertActionReq::unsafe_arena_release_action() {
    // @@protoc_insertion_point(field_release:rp4.InsertActionReq.action)

    ::rp4::Action* temp = action_;
    action_ = nullptr;
    return temp;
}
inline ::rp4::Action* InsertActionReq::_internal_mutable_action() {

    if (action_ == nullptr) {
        auto* p = CreateMaybeMessage<::rp4::Action>(GetArenaForAllocation());
        action_ = p;
    }
    return action_;
}
inline ::rp4::Action* InsertActionReq::mutable_action() {
    ::rp4::Action* _msg = _internal_mutable_action();
    // @@protoc_insertion_point(field_mutable:rp4.InsertActionReq.action)
    return _msg;
}
inline void InsertActionReq::set_allocated_action(::rp4::Action* action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
    if (message_arena == nullptr) {
        delete action_;
    }
    if (action) {
        ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
            ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
                ::rp4::Action>::GetOwningArena(action);
        if (message_arena != submessage_arena) {
            action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                message_arena, action, submessage_arena);
        }

    } else {
    }
    action_ = action;
    // @@protoc_insertion_point(field_set_allocated:rp4.InsertActionReq.action)
}

// int32 actionId = 3;
inline void InsertActionReq::clear_actionid() { actionid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32
InsertActionReq::_internal_actionid() const {
    return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InsertActionReq::actionid() const {
    // @@protoc_insertion_point(field_get:rp4.InsertActionReq.actionId)
    return _internal_actionid();
}
inline void
InsertActionReq::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    actionid_ = value;
}
inline void
InsertActionReq::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_actionid(value);
    // @@protoc_insertion_point(field_set:rp4.InsertActionReq.actionId)
}

// -------------------------------------------------------------------

// InsertActionResp

// .rp4.Res res = 1;
inline void InsertActionResp::clear_res() { res_ = 0; }
inline ::rp4::Res InsertActionResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res InsertActionResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.InsertActionResp.res)
    return _internal_res();
}
inline void InsertActionResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void InsertActionResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.InsertActionResp.res)
}

// -------------------------------------------------------------------

// ClearActionReq

// int32 procId = 1;
inline void ClearActionReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearActionReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClearActionReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.ClearActionReq.procId)
    return _internal_procid();
}
inline void
ClearActionReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void ClearActionReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.ClearActionReq.procId)
}

// -------------------------------------------------------------------

// ClearActionResp

// .rp4.Res res = 1;
inline void ClearActionResp::clear_res() { res_ = 0; }
inline ::rp4::Res ClearActionResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res ClearActionResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.ClearActionResp.res)
    return _internal_res();
}
inline void ClearActionResp::_internal_set_res(::rp4::Res value) {

    res_ = value;
}
inline void ClearActionResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.ClearActionResp.res)
}

// -------------------------------------------------------------------

// DelActionReq

// int32 procId = 1;
inline void DelActionReq::clear_procid() { procid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 DelActionReq::_internal_procid() const {
    return procid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelActionReq::procid() const {
    // @@protoc_insertion_point(field_get:rp4.DelActionReq.procId)
    return _internal_procid();
}
inline void
DelActionReq::_internal_set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    procid_ = value;
}
inline void DelActionReq::set_procid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_procid(value);
    // @@protoc_insertion_point(field_set:rp4.DelActionReq.procId)
}

// int32 actionId = 2;
inline void DelActionReq::clear_actionid() { actionid_ = 0; }
inline ::PROTOBUF_NAMESPACE_ID::int32 DelActionReq::_internal_actionid() const {
    return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DelActionReq::actionid() const {
    // @@protoc_insertion_point(field_get:rp4.DelActionReq.actionId)
    return _internal_actionid();
}
inline void
DelActionReq::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {

    actionid_ = value;
}
inline void DelActionReq::set_actionid(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_actionid(value);
    // @@protoc_insertion_point(field_set:rp4.DelActionReq.actionId)
}

// -------------------------------------------------------------------

// DelActionResp

// .rp4.Res res = 1;
inline void DelActionResp::clear_res() { res_ = 0; }
inline ::rp4::Res DelActionResp::_internal_res() const {
    return static_cast<::rp4::Res>(res_);
}
inline ::rp4::Res DelActionResp::res() const {
    // @@protoc_insertion_point(field_get:rp4.DelActionResp.res)
    return _internal_res();
}
inline void DelActionResp::_internal_set_res(::rp4::Res value) { res_ = value; }
inline void DelActionResp::set_res(::rp4::Res value) {
    _internal_set_res(value);
    // @@protoc_insertion_point(field_set:rp4.DelActionResp.res)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace rp4

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum<::rp4::Res> : ::std::true_type {};
template <> inline const EnumDescriptor* GetEnumDescriptor<::rp4::Res>() {
    return ::rp4::Res_descriptor();
}
template <> struct is_proto_enum<::rp4::FieldType> : ::std::true_type {};
template <> inline const EnumDescriptor* GetEnumDescriptor<::rp4::FieldType>() {
    return ::rp4::FieldType_descriptor();
}
template <> struct is_proto_enum<::rp4::ParameterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rp4::ParameterType>() {
    return ::rp4::ParameterType_descriptor();
}
template <> struct is_proto_enum<::rp4::RelationCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rp4::RelationCode>() {
    return ::rp4::RelationCode_descriptor();
}
template <> struct is_proto_enum<::rp4::GateEntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rp4::GateEntryType>() {
    return ::rp4::GateEntryType_descriptor();
}
template <> struct is_proto_enum<::rp4::MatchType> : ::std::true_type {};
template <> inline const EnumDescriptor* GetEnumDescriptor<::rp4::MatchType>() {
    return ::rp4::MatchType_descriptor();
}
template <> struct is_proto_enum<::rp4::OpCode> : ::std::true_type {};
template <> inline const EnumDescriptor* GetEnumDescriptor<::rp4::OpCode>() {
    return ::rp4::OpCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_controller_5fto_5fdataplane_2eproto
