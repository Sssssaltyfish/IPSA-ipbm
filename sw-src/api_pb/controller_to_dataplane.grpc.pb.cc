// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: controller_to_dataplane.proto

#include "controller_to_dataplane.pb.h"
#include "controller_to_dataplane.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rp4 {

static const char* CfgService_method_names[] = {
  "/rp4.CfgService/setMetadata",
  "/rp4.CfgService/initParserLevel",
  "/rp4.CfgService/modParserEntry",
  "/rp4.CfgService/clearParser",
  "/rp4.CfgService/insertRelationExp",
  "/rp4.CfgService/clearRelationExp",
  "/rp4.CfgService/clearResMap",
  "/rp4.CfgService/modResMap",
  "/rp4.CfgService/setDefaultGateEntry",
  "/rp4.CfgService/setNoTable",
  "/rp4.CfgService/setActionProc",
  "/rp4.CfgService/setMemConfig",
  "/rp4.CfgService/setFieldInfo",
  "/rp4.CfgService/clearOldConfig",
  "/rp4.CfgService/setMissActId",
  "/rp4.CfgService/insertSramEntry",
  "/rp4.CfgService/insertTcamEntry",
  "/rp4.CfgService/insertAction",
  "/rp4.CfgService/clearAction",
  "/rp4.CfgService/delAction",
};

std::unique_ptr< CfgService::Stub> CfgService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CfgService::Stub> stub(new CfgService::Stub(channel, options));
  return stub;
}

CfgService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_setMetadata_(CfgService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_initParserLevel_(CfgService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modParserEntry_(CfgService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearParser_(CfgService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_insertRelationExp_(CfgService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearRelationExp_(CfgService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearResMap_(CfgService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_modResMap_(CfgService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setDefaultGateEntry_(CfgService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setNoTable_(CfgService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setActionProc_(CfgService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setMemConfig_(CfgService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setFieldInfo_(CfgService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearOldConfig_(CfgService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setMissActId_(CfgService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_insertSramEntry_(CfgService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_insertTcamEntry_(CfgService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_insertAction_(CfgService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_clearAction_(CfgService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delAction_(CfgService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CfgService::Stub::setMetadata(::grpc::ClientContext* context, const ::rp4::SetMetadataReq& request, ::rp4::SetMetadataResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetMetadataReq, ::rp4::SetMetadataResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMetadata_, context, request, response);
}

void CfgService::Stub::async::setMetadata(::grpc::ClientContext* context, const ::rp4::SetMetadataReq* request, ::rp4::SetMetadataResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetMetadataReq, ::rp4::SetMetadataResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMetadata_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setMetadata(::grpc::ClientContext* context, const ::rp4::SetMetadataReq* request, ::rp4::SetMetadataResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMetadata_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetMetadataResp>* CfgService::Stub::PrepareAsyncsetMetadataRaw(::grpc::ClientContext* context, const ::rp4::SetMetadataReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetMetadataResp, ::rp4::SetMetadataReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMetadata_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetMetadataResp>* CfgService::Stub::AsyncsetMetadataRaw(::grpc::ClientContext* context, const ::rp4::SetMetadataReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMetadataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::initParserLevel(::grpc::ClientContext* context, const ::rp4::ParserLevelReq& request, ::rp4::ParserLevelResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ParserLevelReq, ::rp4::ParserLevelResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_initParserLevel_, context, request, response);
}

void CfgService::Stub::async::initParserLevel(::grpc::ClientContext* context, const ::rp4::ParserLevelReq* request, ::rp4::ParserLevelResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ParserLevelReq, ::rp4::ParserLevelResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initParserLevel_, context, request, response, std::move(f));
}

void CfgService::Stub::async::initParserLevel(::grpc::ClientContext* context, const ::rp4::ParserLevelReq* request, ::rp4::ParserLevelResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_initParserLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ParserLevelResp>* CfgService::Stub::PrepareAsyncinitParserLevelRaw(::grpc::ClientContext* context, const ::rp4::ParserLevelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ParserLevelResp, ::rp4::ParserLevelReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_initParserLevel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ParserLevelResp>* CfgService::Stub::AsyncinitParserLevelRaw(::grpc::ClientContext* context, const ::rp4::ParserLevelReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinitParserLevelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::modParserEntry(::grpc::ClientContext* context, const ::rp4::ModParserEntryReq& request, ::rp4::ModParserEntryResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ModParserEntryReq, ::rp4::ModParserEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modParserEntry_, context, request, response);
}

void CfgService::Stub::async::modParserEntry(::grpc::ClientContext* context, const ::rp4::ModParserEntryReq* request, ::rp4::ModParserEntryResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ModParserEntryReq, ::rp4::ModParserEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modParserEntry_, context, request, response, std::move(f));
}

void CfgService::Stub::async::modParserEntry(::grpc::ClientContext* context, const ::rp4::ModParserEntryReq* request, ::rp4::ModParserEntryResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modParserEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ModParserEntryResp>* CfgService::Stub::PrepareAsyncmodParserEntryRaw(::grpc::ClientContext* context, const ::rp4::ModParserEntryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ModParserEntryResp, ::rp4::ModParserEntryReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modParserEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ModParserEntryResp>* CfgService::Stub::AsyncmodParserEntryRaw(::grpc::ClientContext* context, const ::rp4::ModParserEntryReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodParserEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::clearParser(::grpc::ClientContext* context, const ::rp4::ClearParserReq& request, ::rp4::ClearParserResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ClearParserReq, ::rp4::ClearParserResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearParser_, context, request, response);
}

void CfgService::Stub::async::clearParser(::grpc::ClientContext* context, const ::rp4::ClearParserReq* request, ::rp4::ClearParserResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ClearParserReq, ::rp4::ClearParserResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearParser_, context, request, response, std::move(f));
}

void CfgService::Stub::async::clearParser(::grpc::ClientContext* context, const ::rp4::ClearParserReq* request, ::rp4::ClearParserResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearParser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearParserResp>* CfgService::Stub::PrepareAsyncclearParserRaw(::grpc::ClientContext* context, const ::rp4::ClearParserReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ClearParserResp, ::rp4::ClearParserReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearParser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearParserResp>* CfgService::Stub::AsyncclearParserRaw(::grpc::ClientContext* context, const ::rp4::ClearParserReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearParserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::insertRelationExp(::grpc::ClientContext* context, const ::rp4::InsertRelationExpReq& request, ::rp4::InsertRelationExpResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::InsertRelationExpReq, ::rp4::InsertRelationExpResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_insertRelationExp_, context, request, response);
}

void CfgService::Stub::async::insertRelationExp(::grpc::ClientContext* context, const ::rp4::InsertRelationExpReq* request, ::rp4::InsertRelationExpResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::InsertRelationExpReq, ::rp4::InsertRelationExpResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertRelationExp_, context, request, response, std::move(f));
}

void CfgService::Stub::async::insertRelationExp(::grpc::ClientContext* context, const ::rp4::InsertRelationExpReq* request, ::rp4::InsertRelationExpResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertRelationExp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertRelationExpResp>* CfgService::Stub::PrepareAsyncinsertRelationExpRaw(::grpc::ClientContext* context, const ::rp4::InsertRelationExpReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::InsertRelationExpResp, ::rp4::InsertRelationExpReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_insertRelationExp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertRelationExpResp>* CfgService::Stub::AsyncinsertRelationExpRaw(::grpc::ClientContext* context, const ::rp4::InsertRelationExpReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinsertRelationExpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::clearRelationExp(::grpc::ClientContext* context, const ::rp4::ClearRelationExpReq& request, ::rp4::ClearRelationExpResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ClearRelationExpReq, ::rp4::ClearRelationExpResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearRelationExp_, context, request, response);
}

void CfgService::Stub::async::clearRelationExp(::grpc::ClientContext* context, const ::rp4::ClearRelationExpReq* request, ::rp4::ClearRelationExpResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ClearRelationExpReq, ::rp4::ClearRelationExpResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearRelationExp_, context, request, response, std::move(f));
}

void CfgService::Stub::async::clearRelationExp(::grpc::ClientContext* context, const ::rp4::ClearRelationExpReq* request, ::rp4::ClearRelationExpResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearRelationExp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearRelationExpResp>* CfgService::Stub::PrepareAsyncclearRelationExpRaw(::grpc::ClientContext* context, const ::rp4::ClearRelationExpReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ClearRelationExpResp, ::rp4::ClearRelationExpReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearRelationExp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearRelationExpResp>* CfgService::Stub::AsyncclearRelationExpRaw(::grpc::ClientContext* context, const ::rp4::ClearRelationExpReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearRelationExpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::clearResMap(::grpc::ClientContext* context, const ::rp4::ClearResMapReq& request, ::rp4::ClearResMapResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ClearResMapReq, ::rp4::ClearResMapResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearResMap_, context, request, response);
}

void CfgService::Stub::async::clearResMap(::grpc::ClientContext* context, const ::rp4::ClearResMapReq* request, ::rp4::ClearResMapResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ClearResMapReq, ::rp4::ClearResMapResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearResMap_, context, request, response, std::move(f));
}

void CfgService::Stub::async::clearResMap(::grpc::ClientContext* context, const ::rp4::ClearResMapReq* request, ::rp4::ClearResMapResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearResMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearResMapResp>* CfgService::Stub::PrepareAsyncclearResMapRaw(::grpc::ClientContext* context, const ::rp4::ClearResMapReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ClearResMapResp, ::rp4::ClearResMapReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearResMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearResMapResp>* CfgService::Stub::AsyncclearResMapRaw(::grpc::ClientContext* context, const ::rp4::ClearResMapReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearResMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::modResMap(::grpc::ClientContext* context, const ::rp4::ModResMapReq& request, ::rp4::ModResMapResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ModResMapReq, ::rp4::ModResMapResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_modResMap_, context, request, response);
}

void CfgService::Stub::async::modResMap(::grpc::ClientContext* context, const ::rp4::ModResMapReq* request, ::rp4::ModResMapResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ModResMapReq, ::rp4::ModResMapResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modResMap_, context, request, response, std::move(f));
}

void CfgService::Stub::async::modResMap(::grpc::ClientContext* context, const ::rp4::ModResMapReq* request, ::rp4::ModResMapResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_modResMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ModResMapResp>* CfgService::Stub::PrepareAsyncmodResMapRaw(::grpc::ClientContext* context, const ::rp4::ModResMapReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ModResMapResp, ::rp4::ModResMapReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_modResMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ModResMapResp>* CfgService::Stub::AsyncmodResMapRaw(::grpc::ClientContext* context, const ::rp4::ModResMapReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmodResMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::setDefaultGateEntry(::grpc::ClientContext* context, const ::rp4::SetDefaultGateEntryReq& request, ::rp4::SetDefaultGateEntryResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetDefaultGateEntryReq, ::rp4::SetDefaultGateEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setDefaultGateEntry_, context, request, response);
}

void CfgService::Stub::async::setDefaultGateEntry(::grpc::ClientContext* context, const ::rp4::SetDefaultGateEntryReq* request, ::rp4::SetDefaultGateEntryResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetDefaultGateEntryReq, ::rp4::SetDefaultGateEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDefaultGateEntry_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setDefaultGateEntry(::grpc::ClientContext* context, const ::rp4::SetDefaultGateEntryReq* request, ::rp4::SetDefaultGateEntryResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setDefaultGateEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetDefaultGateEntryResp>* CfgService::Stub::PrepareAsyncsetDefaultGateEntryRaw(::grpc::ClientContext* context, const ::rp4::SetDefaultGateEntryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetDefaultGateEntryResp, ::rp4::SetDefaultGateEntryReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setDefaultGateEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetDefaultGateEntryResp>* CfgService::Stub::AsyncsetDefaultGateEntryRaw(::grpc::ClientContext* context, const ::rp4::SetDefaultGateEntryReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetDefaultGateEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::setNoTable(::grpc::ClientContext* context, const ::rp4::SetNoTableReq& request, ::rp4::SetNoTableResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetNoTableReq, ::rp4::SetNoTableResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setNoTable_, context, request, response);
}

void CfgService::Stub::async::setNoTable(::grpc::ClientContext* context, const ::rp4::SetNoTableReq* request, ::rp4::SetNoTableResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetNoTableReq, ::rp4::SetNoTableResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setNoTable_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setNoTable(::grpc::ClientContext* context, const ::rp4::SetNoTableReq* request, ::rp4::SetNoTableResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setNoTable_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetNoTableResp>* CfgService::Stub::PrepareAsyncsetNoTableRaw(::grpc::ClientContext* context, const ::rp4::SetNoTableReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetNoTableResp, ::rp4::SetNoTableReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setNoTable_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetNoTableResp>* CfgService::Stub::AsyncsetNoTableRaw(::grpc::ClientContext* context, const ::rp4::SetNoTableReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetNoTableRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::setActionProc(::grpc::ClientContext* context, const ::rp4::SetActionProcReq& request, ::rp4::SetActionProcResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetActionProcReq, ::rp4::SetActionProcResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setActionProc_, context, request, response);
}

void CfgService::Stub::async::setActionProc(::grpc::ClientContext* context, const ::rp4::SetActionProcReq* request, ::rp4::SetActionProcResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetActionProcReq, ::rp4::SetActionProcResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setActionProc_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setActionProc(::grpc::ClientContext* context, const ::rp4::SetActionProcReq* request, ::rp4::SetActionProcResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setActionProc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetActionProcResp>* CfgService::Stub::PrepareAsyncsetActionProcRaw(::grpc::ClientContext* context, const ::rp4::SetActionProcReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetActionProcResp, ::rp4::SetActionProcReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setActionProc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetActionProcResp>* CfgService::Stub::AsyncsetActionProcRaw(::grpc::ClientContext* context, const ::rp4::SetActionProcReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetActionProcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::setMemConfig(::grpc::ClientContext* context, const ::rp4::SetMemConfigReq& request, ::rp4::SetMemConfigResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetMemConfigReq, ::rp4::SetMemConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMemConfig_, context, request, response);
}

void CfgService::Stub::async::setMemConfig(::grpc::ClientContext* context, const ::rp4::SetMemConfigReq* request, ::rp4::SetMemConfigResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetMemConfigReq, ::rp4::SetMemConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMemConfig_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setMemConfig(::grpc::ClientContext* context, const ::rp4::SetMemConfigReq* request, ::rp4::SetMemConfigResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMemConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetMemConfigResp>* CfgService::Stub::PrepareAsyncsetMemConfigRaw(::grpc::ClientContext* context, const ::rp4::SetMemConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetMemConfigResp, ::rp4::SetMemConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMemConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetMemConfigResp>* CfgService::Stub::AsyncsetMemConfigRaw(::grpc::ClientContext* context, const ::rp4::SetMemConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMemConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::setFieldInfo(::grpc::ClientContext* context, const ::rp4::SetFieldInfoReq& request, ::rp4::SetFieldInfoResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetFieldInfoReq, ::rp4::SetFieldInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setFieldInfo_, context, request, response);
}

void CfgService::Stub::async::setFieldInfo(::grpc::ClientContext* context, const ::rp4::SetFieldInfoReq* request, ::rp4::SetFieldInfoResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetFieldInfoReq, ::rp4::SetFieldInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFieldInfo_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setFieldInfo(::grpc::ClientContext* context, const ::rp4::SetFieldInfoReq* request, ::rp4::SetFieldInfoResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setFieldInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetFieldInfoResp>* CfgService::Stub::PrepareAsyncsetFieldInfoRaw(::grpc::ClientContext* context, const ::rp4::SetFieldInfoReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetFieldInfoResp, ::rp4::SetFieldInfoReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setFieldInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetFieldInfoResp>* CfgService::Stub::AsyncsetFieldInfoRaw(::grpc::ClientContext* context, const ::rp4::SetFieldInfoReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetFieldInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::clearOldConfig(::grpc::ClientContext* context, const ::rp4::ClearOldConfigReq& request, ::rp4::ClearOldConfigResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ClearOldConfigReq, ::rp4::ClearOldConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearOldConfig_, context, request, response);
}

void CfgService::Stub::async::clearOldConfig(::grpc::ClientContext* context, const ::rp4::ClearOldConfigReq* request, ::rp4::ClearOldConfigResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ClearOldConfigReq, ::rp4::ClearOldConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearOldConfig_, context, request, response, std::move(f));
}

void CfgService::Stub::async::clearOldConfig(::grpc::ClientContext* context, const ::rp4::ClearOldConfigReq* request, ::rp4::ClearOldConfigResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearOldConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearOldConfigResp>* CfgService::Stub::PrepareAsyncclearOldConfigRaw(::grpc::ClientContext* context, const ::rp4::ClearOldConfigReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ClearOldConfigResp, ::rp4::ClearOldConfigReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearOldConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearOldConfigResp>* CfgService::Stub::AsyncclearOldConfigRaw(::grpc::ClientContext* context, const ::rp4::ClearOldConfigReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearOldConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::setMissActId(::grpc::ClientContext* context, const ::rp4::SetMissActIdReq& request, ::rp4::SetMissActIdResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::SetMissActIdReq, ::rp4::SetMissActIdResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setMissActId_, context, request, response);
}

void CfgService::Stub::async::setMissActId(::grpc::ClientContext* context, const ::rp4::SetMissActIdReq* request, ::rp4::SetMissActIdResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::SetMissActIdReq, ::rp4::SetMissActIdResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMissActId_, context, request, response, std::move(f));
}

void CfgService::Stub::async::setMissActId(::grpc::ClientContext* context, const ::rp4::SetMissActIdReq* request, ::rp4::SetMissActIdResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setMissActId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetMissActIdResp>* CfgService::Stub::PrepareAsyncsetMissActIdRaw(::grpc::ClientContext* context, const ::rp4::SetMissActIdReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::SetMissActIdResp, ::rp4::SetMissActIdReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setMissActId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::SetMissActIdResp>* CfgService::Stub::AsyncsetMissActIdRaw(::grpc::ClientContext* context, const ::rp4::SetMissActIdReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetMissActIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::insertSramEntry(::grpc::ClientContext* context, const ::rp4::InsertSramEntryReq& request, ::rp4::InsertSramEntryResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::InsertSramEntryReq, ::rp4::InsertSramEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_insertSramEntry_, context, request, response);
}

void CfgService::Stub::async::insertSramEntry(::grpc::ClientContext* context, const ::rp4::InsertSramEntryReq* request, ::rp4::InsertSramEntryResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::InsertSramEntryReq, ::rp4::InsertSramEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertSramEntry_, context, request, response, std::move(f));
}

void CfgService::Stub::async::insertSramEntry(::grpc::ClientContext* context, const ::rp4::InsertSramEntryReq* request, ::rp4::InsertSramEntryResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertSramEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertSramEntryResp>* CfgService::Stub::PrepareAsyncinsertSramEntryRaw(::grpc::ClientContext* context, const ::rp4::InsertSramEntryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::InsertSramEntryResp, ::rp4::InsertSramEntryReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_insertSramEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertSramEntryResp>* CfgService::Stub::AsyncinsertSramEntryRaw(::grpc::ClientContext* context, const ::rp4::InsertSramEntryReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinsertSramEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::insertTcamEntry(::grpc::ClientContext* context, const ::rp4::InsertTcamEntryReq& request, ::rp4::InsertTcamEntryResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::InsertTcamEntryReq, ::rp4::InsertTcamEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_insertTcamEntry_, context, request, response);
}

void CfgService::Stub::async::insertTcamEntry(::grpc::ClientContext* context, const ::rp4::InsertTcamEntryReq* request, ::rp4::InsertTcamEntryResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::InsertTcamEntryReq, ::rp4::InsertTcamEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertTcamEntry_, context, request, response, std::move(f));
}

void CfgService::Stub::async::insertTcamEntry(::grpc::ClientContext* context, const ::rp4::InsertTcamEntryReq* request, ::rp4::InsertTcamEntryResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertTcamEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertTcamEntryResp>* CfgService::Stub::PrepareAsyncinsertTcamEntryRaw(::grpc::ClientContext* context, const ::rp4::InsertTcamEntryReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::InsertTcamEntryResp, ::rp4::InsertTcamEntryReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_insertTcamEntry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertTcamEntryResp>* CfgService::Stub::AsyncinsertTcamEntryRaw(::grpc::ClientContext* context, const ::rp4::InsertTcamEntryReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinsertTcamEntryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::insertAction(::grpc::ClientContext* context, const ::rp4::InsertActionReq& request, ::rp4::InsertActionResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::InsertActionReq, ::rp4::InsertActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_insertAction_, context, request, response);
}

void CfgService::Stub::async::insertAction(::grpc::ClientContext* context, const ::rp4::InsertActionReq* request, ::rp4::InsertActionResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::InsertActionReq, ::rp4::InsertActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertAction_, context, request, response, std::move(f));
}

void CfgService::Stub::async::insertAction(::grpc::ClientContext* context, const ::rp4::InsertActionReq* request, ::rp4::InsertActionResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_insertAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertActionResp>* CfgService::Stub::PrepareAsyncinsertActionRaw(::grpc::ClientContext* context, const ::rp4::InsertActionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::InsertActionResp, ::rp4::InsertActionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_insertAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::InsertActionResp>* CfgService::Stub::AsyncinsertActionRaw(::grpc::ClientContext* context, const ::rp4::InsertActionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncinsertActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::clearAction(::grpc::ClientContext* context, const ::rp4::ClearActionReq& request, ::rp4::ClearActionResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::ClearActionReq, ::rp4::ClearActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_clearAction_, context, request, response);
}

void CfgService::Stub::async::clearAction(::grpc::ClientContext* context, const ::rp4::ClearActionReq* request, ::rp4::ClearActionResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::ClearActionReq, ::rp4::ClearActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearAction_, context, request, response, std::move(f));
}

void CfgService::Stub::async::clearAction(::grpc::ClientContext* context, const ::rp4::ClearActionReq* request, ::rp4::ClearActionResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_clearAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearActionResp>* CfgService::Stub::PrepareAsyncclearActionRaw(::grpc::ClientContext* context, const ::rp4::ClearActionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::ClearActionResp, ::rp4::ClearActionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_clearAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::ClearActionResp>* CfgService::Stub::AsyncclearActionRaw(::grpc::ClientContext* context, const ::rp4::ClearActionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncclearActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CfgService::Stub::delAction(::grpc::ClientContext* context, const ::rp4::DelActionReq& request, ::rp4::DelActionResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rp4::DelActionReq, ::rp4::DelActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delAction_, context, request, response);
}

void CfgService::Stub::async::delAction(::grpc::ClientContext* context, const ::rp4::DelActionReq* request, ::rp4::DelActionResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rp4::DelActionReq, ::rp4::DelActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delAction_, context, request, response, std::move(f));
}

void CfgService::Stub::async::delAction(::grpc::ClientContext* context, const ::rp4::DelActionReq* request, ::rp4::DelActionResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rp4::DelActionResp>* CfgService::Stub::PrepareAsyncdelActionRaw(::grpc::ClientContext* context, const ::rp4::DelActionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rp4::DelActionResp, ::rp4::DelActionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rp4::DelActionResp>* CfgService::Stub::AsyncdelActionRaw(::grpc::ClientContext* context, const ::rp4::DelActionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

CfgService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetMetadataReq, ::rp4::SetMetadataResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetMetadataReq* req,
             ::rp4::SetMetadataResp* resp) {
               return service->setMetadata(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ParserLevelReq, ::rp4::ParserLevelResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ParserLevelReq* req,
             ::rp4::ParserLevelResp* resp) {
               return service->initParserLevel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ModParserEntryReq, ::rp4::ModParserEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ModParserEntryReq* req,
             ::rp4::ModParserEntryResp* resp) {
               return service->modParserEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ClearParserReq, ::rp4::ClearParserResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ClearParserReq* req,
             ::rp4::ClearParserResp* resp) {
               return service->clearParser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::InsertRelationExpReq, ::rp4::InsertRelationExpResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::InsertRelationExpReq* req,
             ::rp4::InsertRelationExpResp* resp) {
               return service->insertRelationExp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ClearRelationExpReq, ::rp4::ClearRelationExpResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ClearRelationExpReq* req,
             ::rp4::ClearRelationExpResp* resp) {
               return service->clearRelationExp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ClearResMapReq, ::rp4::ClearResMapResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ClearResMapReq* req,
             ::rp4::ClearResMapResp* resp) {
               return service->clearResMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ModResMapReq, ::rp4::ModResMapResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ModResMapReq* req,
             ::rp4::ModResMapResp* resp) {
               return service->modResMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetDefaultGateEntryReq, ::rp4::SetDefaultGateEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetDefaultGateEntryReq* req,
             ::rp4::SetDefaultGateEntryResp* resp) {
               return service->setDefaultGateEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetNoTableReq, ::rp4::SetNoTableResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetNoTableReq* req,
             ::rp4::SetNoTableResp* resp) {
               return service->setNoTable(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetActionProcReq, ::rp4::SetActionProcResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetActionProcReq* req,
             ::rp4::SetActionProcResp* resp) {
               return service->setActionProc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetMemConfigReq, ::rp4::SetMemConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetMemConfigReq* req,
             ::rp4::SetMemConfigResp* resp) {
               return service->setMemConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetFieldInfoReq, ::rp4::SetFieldInfoResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetFieldInfoReq* req,
             ::rp4::SetFieldInfoResp* resp) {
               return service->setFieldInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ClearOldConfigReq, ::rp4::ClearOldConfigResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ClearOldConfigReq* req,
             ::rp4::ClearOldConfigResp* resp) {
               return service->clearOldConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::SetMissActIdReq, ::rp4::SetMissActIdResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::SetMissActIdReq* req,
             ::rp4::SetMissActIdResp* resp) {
               return service->setMissActId(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::InsertSramEntryReq, ::rp4::InsertSramEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::InsertSramEntryReq* req,
             ::rp4::InsertSramEntryResp* resp) {
               return service->insertSramEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::InsertTcamEntryReq, ::rp4::InsertTcamEntryResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::InsertTcamEntryReq* req,
             ::rp4::InsertTcamEntryResp* resp) {
               return service->insertTcamEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::InsertActionReq, ::rp4::InsertActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::InsertActionReq* req,
             ::rp4::InsertActionResp* resp) {
               return service->insertAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::ClearActionReq, ::rp4::ClearActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::ClearActionReq* req,
             ::rp4::ClearActionResp* resp) {
               return service->clearAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CfgService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CfgService::Service, ::rp4::DelActionReq, ::rp4::DelActionResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CfgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rp4::DelActionReq* req,
             ::rp4::DelActionResp* resp) {
               return service->delAction(ctx, req, resp);
             }, this)));
}

CfgService::Service::~Service() {
}

::grpc::Status CfgService::Service::setMetadata(::grpc::ServerContext* context, const ::rp4::SetMetadataReq* request, ::rp4::SetMetadataResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::initParserLevel(::grpc::ServerContext* context, const ::rp4::ParserLevelReq* request, ::rp4::ParserLevelResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::modParserEntry(::grpc::ServerContext* context, const ::rp4::ModParserEntryReq* request, ::rp4::ModParserEntryResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::clearParser(::grpc::ServerContext* context, const ::rp4::ClearParserReq* request, ::rp4::ClearParserResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::insertRelationExp(::grpc::ServerContext* context, const ::rp4::InsertRelationExpReq* request, ::rp4::InsertRelationExpResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::clearRelationExp(::grpc::ServerContext* context, const ::rp4::ClearRelationExpReq* request, ::rp4::ClearRelationExpResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::clearResMap(::grpc::ServerContext* context, const ::rp4::ClearResMapReq* request, ::rp4::ClearResMapResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::modResMap(::grpc::ServerContext* context, const ::rp4::ModResMapReq* request, ::rp4::ModResMapResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::setDefaultGateEntry(::grpc::ServerContext* context, const ::rp4::SetDefaultGateEntryReq* request, ::rp4::SetDefaultGateEntryResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::setNoTable(::grpc::ServerContext* context, const ::rp4::SetNoTableReq* request, ::rp4::SetNoTableResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::setActionProc(::grpc::ServerContext* context, const ::rp4::SetActionProcReq* request, ::rp4::SetActionProcResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::setMemConfig(::grpc::ServerContext* context, const ::rp4::SetMemConfigReq* request, ::rp4::SetMemConfigResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::setFieldInfo(::grpc::ServerContext* context, const ::rp4::SetFieldInfoReq* request, ::rp4::SetFieldInfoResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::clearOldConfig(::grpc::ServerContext* context, const ::rp4::ClearOldConfigReq* request, ::rp4::ClearOldConfigResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::setMissActId(::grpc::ServerContext* context, const ::rp4::SetMissActIdReq* request, ::rp4::SetMissActIdResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::insertSramEntry(::grpc::ServerContext* context, const ::rp4::InsertSramEntryReq* request, ::rp4::InsertSramEntryResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::insertTcamEntry(::grpc::ServerContext* context, const ::rp4::InsertTcamEntryReq* request, ::rp4::InsertTcamEntryResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::insertAction(::grpc::ServerContext* context, const ::rp4::InsertActionReq* request, ::rp4::InsertActionResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::clearAction(::grpc::ServerContext* context, const ::rp4::ClearActionReq* request, ::rp4::ClearActionResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CfgService::Service::delAction(::grpc::ServerContext* context, const ::rp4::DelActionReq* request, ::rp4::DelActionResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rp4

