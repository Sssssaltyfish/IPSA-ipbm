header ethernet_t {
	bit<48>	dst_address;
	bit<48>	src_address;
	bit<16>	ether_type;
}
header ipv4_t {
	bit<4>	version;
	bit<4>	ihl;
	bit<8>	type_service;
	bit<16>	total_length;
	bit<16>	identification;
	bit<3>	flags;
	bit<13>	fragment_offset;
	bit<8>	ttl;
	bit<8>	protocol;
	bit<16>	header_checksum;
	bit<32>	src_address;
	bit<32>	dst_address;
}
header mpls_t {
	bit<20>	label;
	bit<3>	exp;
	bit<1>	bos;
	bit<8>	ttl;
}
struct metadata {
	bit<1>	tmp;
} meta;
struct headers {
	ethernet_t	ethernet;
	ipv4_t	ipv4;
	mpls_t	mpls;
} hdr;

struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
} standard_metadata;

parser MyParser(packet_in packet) {
	state start {
		packet.extract(hdr.ethernet);
		transition select(hdr.ethernet.ether_type) {
			0x8847: parse_mpls;
			default: accept;
		}
	}
	state parse_mpls {
		packet.extract(hdr.mpls);
		transition accept;
	}
}

actions {
	action NoAction() {
	}
	action drop_1() {
		standard_metadata.drop = 1;
	}
	action drop_2() {
		standard_metadata.drop = 1;
	}
	action drop_3() {
		standard_metadata.drop = 1;
	}
	action drop_4() {
		standard_metadata.drop = 1;
	}
	action forward(bit<9> port, bit<20> next_label) {
		standard_metadata.egress_spec = port;
		hdr.mpls.label = next_label;
	}
	action act() {
		meta.tmp = true;
	}
	action act_0() {
		meta.tmp = false;
	}
	action dest_check__HIT__() {
	}
	action dest_check__MISS__() {
	}
}

tables {
	table dest_check {
		key = {
			hdr.ethernet.dst_address: exact;
		}
		size = 1024;
		value_width = 16;
		default_action = dest_check__MISS__;
	}
	table tbl_act {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act;
	}
	table tbl_act_0 {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = act_0;
	}
	table ip_forward {
		key = {
			hdr.ipv4.dst_address: lpm;
		}
		size = 1024;
		value_width = 16;
		default_action = drop_2;
	}
	table mpls_forward {
		key = {
			hdr.mpls.label: exact;
		}
		size = 1024;
		value_width = 45;
		default_action = drop_1;
	}
	table tbl_drop {
		key = {
		}
		size = 1024;
		value_width = 16;
		default_action = drop_4;
	}
}

control MyIngress {
	stage node_2 {
		parser {
			ethernet;
			ipv4;
		};
		matcher {
			switch (hdr.ipv4.isValid()) {
				0b1: table(dest_check);
				*: stage(node_8);
			}
		};
		executor {
			dest_check__HIT__: tbl_act_s;
			dest_check__MISS__: tbl_act_0_s;
		};
	}
	stage node_6 {
		parser {
			ipv4;
		};
		matcher {
			switch (meta.tmp) {
				0b1: table(ip_forward);
				*: None;
			}
		};
		executor {
			drop_2: None;
		};
	}
	stage node_8 {
		parser {
			mpls;
		};
		matcher {
			switch (hdr.mpls.isValid()) {
				0b1: table(mpls_forward);
				*: table(tbl_drop);
			}
		};
		executor {
			drop_1: None;
			forward: None;
			drop_4: None;
		};
	}
	stage tbl_act_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act);
			}
		};
		executor {
			act: node_6;
		};
	}
	stage tbl_act_0_s {
		parser {
		};
		matcher {
			switch (1) {
				0b1: table(tbl_act_0);
			}
		};
		executor {
			act_0: node_6;
		};
	}
}
control MyEgress {
}

