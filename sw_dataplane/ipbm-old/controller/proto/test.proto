syntax = "proto3";

package rp4;

service ModService {
  rpc handleMatchTable(FlowEntryModRequest) returns (FlowEntryModResponse);
  rpc addParserInfo(ModParserInfo) returns (ModParserInfoResponse);
  rpc addMatcherInfo(ModMatcherInfo) returns (ModMatcherInfoResponse);
  rpc addActionInfo(ModActionInfo) returns (ModActionInfoResponse);
}

message FlowEntryModResponse { // to response the result of modification
  enum ModRes
  {
    ADD_OK = 0;
    DELETE_OK = 1;
    MOD_OK = 2;
    NO_ENTRY = 3; // modify or delete with no such entry
    TABLE_OVERFLOW = 4; // flow entry num exceeds max
  }
  ModRes res = 1;
}

message FlowEntryModRequest { // add, delete or modify flow entry in data plane
  int32 table_id = 1; // table flag, find table

  message FlowEntry
  {
    string key = 1; // because of match_key is variable length, define it as string
    int32 action_id = 2; // the action is implemented in device as built-in, search by id;
    repeated int32 action_data = 3; // define parameters as Array
  }

  FlowEntry srcFlow = 2; // the original flow in device flow match table(modify, delete); new flow(add)

  enum ModType
  {
    INSERT = 0;
    DELETE = 1;
    MODIFY = 2;
  }

  ModType mod_type = 3; // tell device the modification type
  FlowEntry modFlow = 4; // if mod_type=2, modFlow is useful
}

message ModParserInfo { // we only consider header adding by now, improvement will be done later
  // int32 processor_id = 1; // modifying which processor's parser
  int32 header_id = 1; // define header id
  sint32 header_length = 2;

  int32 next_header_type_internal_offset = 3; // tell the place where next_header_type start
  int32 next_header_type_length = 4;

  message Field { // field in header
    int32 field_id = 1;
    int32 field_length = 2;
    int32 internal_offset = 3;
  }

  message NextHeader {
    int32 header_id = 1;
    string tag = 2;
  }

  repeated Field fields = 5; // list field in the header
  repeated NextHeader next_headers = 6; // list next_headers in current header
}

message ModParserInfoResponse {
  enum ModRes
  {
    OK = 0;
    FAIL = 1;
  }
  ModRes parser_mod_res = 1;
}

message ModMatcherInfo {
  int32 processor_id = 1; // which matcher

  enum MatchType
  {
    EXACT = 0;
    TERNARY = 1;
    LPM = 2;
    RANGE = 3;
  }

  message MatchField // {header_id.field_id : match_type}
  {
    int32 header_id = 1;
    int32 field_id = 2;
    MatchType match_type = 3;
  }

  repeated MatchField match_fields = 2; // list of match fields

  enum MatchTableType
  {
    SRAM = 0;
    TCAM = 1;
  }

  MatchTableType table_type = 3;
  int32 table_id = 4; // determine which table to search

}

message ModMatcherInfoResponse {
  enum ModRes
  {
    OK = 0;
    FAIL = 1;
  }
  ModRes matcher_mod_res = 1;
}

message ModActionInfo {
  /**
      ipv4.ttl = ipv4.ttl - 1;
      standard_metadata.egress_spec = parameter.port;
   */

  int32 processor_id = 1;
  int32 action_id = 2;
  repeated int32 instruction_sets = 3;

  message ParameterElement
  {
    message Parameter
    {
      int32 prefix_id = 1;// ipv4.ttl : 2(prefix).18(suffix)
      int32 suffix_id = 2;
    }
    repeated Parameter parameters = 1; // a = b + c, three parameters
  }

  repeated ParameterElement parameter_elements = 4; // corresponding to the number of instruction set
}

message ModActionInfoResponse{
  enum ModRes
  {
    OK = 0;
    FAIL = 1;
  }
  ModRes action_add_res = 1;
}