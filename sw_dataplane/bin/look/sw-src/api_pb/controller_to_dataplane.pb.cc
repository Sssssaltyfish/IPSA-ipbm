// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_to_dataplane.proto

#include "controller_to_dataplane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rp4 {
constexpr HeaderInfo::HeaderInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headerid_(0)
  , headerlength_(0)
  , headeroffset_(0){}
struct HeaderInfoDefaultTypeInternal {
  constexpr HeaderInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderInfoDefaultTypeInternal() {}
  union {
    HeaderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderInfoDefaultTypeInternal _HeaderInfo_default_instance_;
constexpr SetMetadataReq::SetMetadataReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headerinfos_(){}
struct SetMetadataReqDefaultTypeInternal {
  constexpr SetMetadataReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMetadataReqDefaultTypeInternal() {}
  union {
    SetMetadataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMetadataReqDefaultTypeInternal _SetMetadataReq_default_instance_;
constexpr SetMetadataResp::SetMetadataResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetMetadataRespDefaultTypeInternal {
  constexpr SetMetadataRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMetadataRespDefaultTypeInternal() {}
  union {
    SetMetadataResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMetadataRespDefaultTypeInternal _SetMetadataResp_default_instance_;
constexpr ClearStageReq::ClearStageReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0){}
struct ClearStageReqDefaultTypeInternal {
  constexpr ClearStageReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearStageReqDefaultTypeInternal() {}
  union {
    ClearStageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearStageReqDefaultTypeInternal _ClearStageReq_default_instance_;
constexpr ParserLevelReq::ParserLevelReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0)
  , parserlevel_(0){}
struct ParserLevelReqDefaultTypeInternal {
  constexpr ParserLevelReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParserLevelReqDefaultTypeInternal() {}
  union {
    ParserLevelReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParserLevelReqDefaultTypeInternal _ParserLevelReq_default_instance_;
constexpr ParserLevelResp::ParserLevelResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ParserLevelRespDefaultTypeInternal {
  constexpr ParserLevelRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParserLevelRespDefaultTypeInternal() {}
  union {
    ParserLevelResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParserLevelRespDefaultTypeInternal _ParserLevelResp_default_instance_;
constexpr FieldInfo::FieldInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hdrid_(0)
  , internaloffset_(0)
  , fieldlen_(0)
  , fieldtype_(0)
{}
struct FieldInfoDefaultTypeInternal {
  constexpr FieldInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldInfoDefaultTypeInternal() {}
  union {
    FieldInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
constexpr ModParserEntryReq::ModParserEntryReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transfds_()
  , procid_(0)
  , parserlevel_(0)
  , state_(0)
  , key_(0u)
  , mask_(0)
  , hdrid_(0)
  , hdrlen_(0)
  , nextstate_(0)
  , transfieldnum_(0)
  , miss_act_(0){}
struct ModParserEntryReqDefaultTypeInternal {
  constexpr ModParserEntryReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModParserEntryReqDefaultTypeInternal() {}
  union {
    ModParserEntryReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModParserEntryReqDefaultTypeInternal _ModParserEntryReq_default_instance_;
constexpr ModParserEntryResp::ModParserEntryResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ModParserEntryRespDefaultTypeInternal {
  constexpr ModParserEntryRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModParserEntryRespDefaultTypeInternal() {}
  union {
    ModParserEntryResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModParserEntryRespDefaultTypeInternal _ModParserEntryResp_default_instance_;
constexpr ClearParserReq::ClearParserReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0){}
struct ClearParserReqDefaultTypeInternal {
  constexpr ClearParserReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearParserReqDefaultTypeInternal() {}
  union {
    ClearParserReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearParserReqDefaultTypeInternal _ClearParserReq_default_instance_;
constexpr ClearParserResp::ClearParserResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ClearParserRespDefaultTypeInternal {
  constexpr ClearParserRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearParserRespDefaultTypeInternal() {}
  union {
    ClearParserResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearParserRespDefaultTypeInternal _ClearParserResp_default_instance_;
constexpr Data::Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , len_(0){}
struct DataDefaultTypeInternal {
  constexpr DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataDefaultTypeInternal _Data_default_instance_;
constexpr GateEntry::GateEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , val_(0){}
struct GateEntryDefaultTypeInternal {
  constexpr GateEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GateEntryDefaultTypeInternal() {}
  union {
    GateEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GateEntryDefaultTypeInternal _GateEntry_default_instance_;
constexpr SetDefaultGateEntryReq::SetDefaultGateEntryReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : default_entry_(nullptr)
  , proc_id_(0){}
struct SetDefaultGateEntryReqDefaultTypeInternal {
  constexpr SetDefaultGateEntryReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDefaultGateEntryReqDefaultTypeInternal() {}
  union {
    SetDefaultGateEntryReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDefaultGateEntryReqDefaultTypeInternal _SetDefaultGateEntryReq_default_instance_;
constexpr SetDefaultGateEntryResp::SetDefaultGateEntryResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetDefaultGateEntryRespDefaultTypeInternal {
  constexpr SetDefaultGateEntryRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetDefaultGateEntryRespDefaultTypeInternal() {}
  union {
    SetDefaultGateEntryResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetDefaultGateEntryRespDefaultTypeInternal _SetDefaultGateEntryResp_default_instance_;
constexpr GatewayParam::GatewayParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paramtype_(0)

  , _oneof_case_{}{}
struct GatewayParamDefaultTypeInternal {
  constexpr GatewayParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GatewayParamDefaultTypeInternal() {}
  union {
    GatewayParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GatewayParamDefaultTypeInternal _GatewayParam_default_instance_;
constexpr RelationExp::RelationExp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param1_(nullptr)
  , param2_(nullptr)
  , relation_(0)
{}
struct RelationExpDefaultTypeInternal {
  constexpr RelationExpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelationExpDefaultTypeInternal() {}
  union {
    RelationExp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelationExpDefaultTypeInternal _RelationExp_default_instance_;
constexpr InsertRelationExpReq::InsertRelationExpReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param1_(nullptr)
  , param2_(nullptr)
  , procid_(0)
  , relation_(0)
{}
struct InsertRelationExpReqDefaultTypeInternal {
  constexpr InsertRelationExpReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRelationExpReqDefaultTypeInternal() {}
  union {
    InsertRelationExpReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRelationExpReqDefaultTypeInternal _InsertRelationExpReq_default_instance_;
constexpr InsertRelationExpResp::InsertRelationExpResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct InsertRelationExpRespDefaultTypeInternal {
  constexpr InsertRelationExpRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertRelationExpRespDefaultTypeInternal() {}
  union {
    InsertRelationExpResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertRelationExpRespDefaultTypeInternal _InsertRelationExpResp_default_instance_;
constexpr ClearRelationExpReq::ClearRelationExpReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0){}
struct ClearRelationExpReqDefaultTypeInternal {
  constexpr ClearRelationExpReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearRelationExpReqDefaultTypeInternal() {}
  union {
    ClearRelationExpReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearRelationExpReqDefaultTypeInternal _ClearRelationExpReq_default_instance_;
constexpr ClearRelationExpResp::ClearRelationExpResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ClearRelationExpRespDefaultTypeInternal {
  constexpr ClearRelationExpRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearRelationExpRespDefaultTypeInternal() {}
  union {
    ClearRelationExpResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearRelationExpRespDefaultTypeInternal _ClearRelationExpResp_default_instance_;
constexpr ClearResMapReq::ClearResMapReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0){}
struct ClearResMapReqDefaultTypeInternal {
  constexpr ClearResMapReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearResMapReqDefaultTypeInternal() {}
  union {
    ClearResMapReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearResMapReqDefaultTypeInternal _ClearResMapReq_default_instance_;
constexpr ClearResMapResp::ClearResMapResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ClearResMapRespDefaultTypeInternal {
  constexpr ClearResMapRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearResMapRespDefaultTypeInternal() {}
  union {
    ClearResMapResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearResMapRespDefaultTypeInternal _ClearResMapResp_default_instance_;
constexpr ModResMapReq::ModResMapReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_(nullptr)
  , procid_(0)
  , key_(0){}
struct ModResMapReqDefaultTypeInternal {
  constexpr ModResMapReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModResMapReqDefaultTypeInternal() {}
  union {
    ModResMapReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModResMapReqDefaultTypeInternal _ModResMapReq_default_instance_;
constexpr ModResMapResp::ModResMapResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ModResMapRespDefaultTypeInternal {
  constexpr ModResMapRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModResMapRespDefaultTypeInternal() {}
  union {
    ModResMapResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModResMapRespDefaultTypeInternal _ModResMapResp_default_instance_;
constexpr SetNoTableReq::SetNoTableReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0)
  , matcherid_(0)
  , notable_(false){}
struct SetNoTableReqDefaultTypeInternal {
  constexpr SetNoTableReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetNoTableReqDefaultTypeInternal() {}
  union {
    SetNoTableReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetNoTableReqDefaultTypeInternal _SetNoTableReq_default_instance_;
constexpr SetNoTableResp::SetNoTableResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetNoTableRespDefaultTypeInternal {
  constexpr SetNoTableRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetNoTableRespDefaultTypeInternal() {}
  union {
    SetNoTableResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetNoTableRespDefaultTypeInternal _SetNoTableResp_default_instance_;
constexpr ActionProc::ActionProc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionid_(0)
  , procid_(0){}
struct ActionProcDefaultTypeInternal {
  constexpr ActionProcDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionProcDefaultTypeInternal() {}
  union {
    ActionProc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionProcDefaultTypeInternal _ActionProc_default_instance_;
constexpr SetActionProcReq::SetActionProcReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actionprocs_()
  , procid_(0)
  , matcherid_(0){}
struct SetActionProcReqDefaultTypeInternal {
  constexpr SetActionProcReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetActionProcReqDefaultTypeInternal() {}
  union {
    SetActionProcReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetActionProcReqDefaultTypeInternal _SetActionProcReq_default_instance_;
constexpr SetActionProcResp::SetActionProcResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetActionProcRespDefaultTypeInternal {
  constexpr SetActionProcRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetActionProcRespDefaultTypeInternal() {}
  union {
    SetActionProcResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetActionProcRespDefaultTypeInternal _SetActionProcResp_default_instance_;
constexpr SetMemConfigReq::SetMemConfigReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keyconfig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , valueconfig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , procid_(0)
  , matcherid_(0)
  , keywidth_(0)
  , valuewidth_(0)
  , matchtype_(0)

  , depth_(0)
  , missactid_(0){}
struct SetMemConfigReqDefaultTypeInternal {
  constexpr SetMemConfigReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMemConfigReqDefaultTypeInternal() {}
  union {
    SetMemConfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMemConfigReqDefaultTypeInternal _SetMemConfigReq_default_instance_;
constexpr SetMemConfigResp::SetMemConfigResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetMemConfigRespDefaultTypeInternal {
  constexpr SetMemConfigRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMemConfigRespDefaultTypeInternal() {}
  union {
    SetMemConfigResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMemConfigRespDefaultTypeInternal _SetMemConfigResp_default_instance_;
constexpr SetFieldInfoReq::SetFieldInfoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fdinfos_()
  , procid_(0)
  , matcherid_(0){}
struct SetFieldInfoReqDefaultTypeInternal {
  constexpr SetFieldInfoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetFieldInfoReqDefaultTypeInternal() {}
  union {
    SetFieldInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetFieldInfoReqDefaultTypeInternal _SetFieldInfoReq_default_instance_;
constexpr SetFieldInfoResp::SetFieldInfoResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetFieldInfoRespDefaultTypeInternal {
  constexpr SetFieldInfoRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetFieldInfoRespDefaultTypeInternal() {}
  union {
    SetFieldInfoResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetFieldInfoRespDefaultTypeInternal _SetFieldInfoResp_default_instance_;
constexpr InsertSramEntryReq::InsertSramEntryReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , procid_(0)
  , matcherid_(0)
  , key_byte_len_(0)
  , value_byte_len_(0){}
struct InsertSramEntryReqDefaultTypeInternal {
  constexpr InsertSramEntryReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertSramEntryReqDefaultTypeInternal() {}
  union {
    InsertSramEntryReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertSramEntryReqDefaultTypeInternal _InsertSramEntryReq_default_instance_;
constexpr InsertSramEntryResp::InsertSramEntryResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct InsertSramEntryRespDefaultTypeInternal {
  constexpr InsertSramEntryRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertSramEntryRespDefaultTypeInternal() {}
  union {
    InsertSramEntryResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertSramEntryRespDefaultTypeInternal _InsertSramEntryResp_default_instance_;
constexpr InsertTcamEntryReq::InsertTcamEntryReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mask_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , procid_(0)
  , matcherid_(0)
  , key_byte_len_(0)
  , value_byte_len_(0){}
struct InsertTcamEntryReqDefaultTypeInternal {
  constexpr InsertTcamEntryReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertTcamEntryReqDefaultTypeInternal() {}
  union {
    InsertTcamEntryReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertTcamEntryReqDefaultTypeInternal _InsertTcamEntryReq_default_instance_;
constexpr InsertTcamEntryResp::InsertTcamEntryResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct InsertTcamEntryRespDefaultTypeInternal {
  constexpr InsertTcamEntryRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertTcamEntryRespDefaultTypeInternal() {}
  union {
    InsertTcamEntryResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertTcamEntryRespDefaultTypeInternal _InsertTcamEntryResp_default_instance_;
constexpr ClearOldConfigReq::ClearOldConfigReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0)
  , matcherid_(0){}
struct ClearOldConfigReqDefaultTypeInternal {
  constexpr ClearOldConfigReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearOldConfigReqDefaultTypeInternal() {}
  union {
    ClearOldConfigReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearOldConfigReqDefaultTypeInternal _ClearOldConfigReq_default_instance_;
constexpr ClearOldConfigResp::ClearOldConfigResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ClearOldConfigRespDefaultTypeInternal {
  constexpr ClearOldConfigRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearOldConfigRespDefaultTypeInternal() {}
  union {
    ClearOldConfigResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearOldConfigRespDefaultTypeInternal _ClearOldConfigResp_default_instance_;
constexpr SetMissActIdReq::SetMissActIdReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0)
  , matcherid_(0)
  , miss_act_id_(0){}
struct SetMissActIdReqDefaultTypeInternal {
  constexpr SetMissActIdReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMissActIdReqDefaultTypeInternal() {}
  union {
    SetMissActIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMissActIdReqDefaultTypeInternal _SetMissActIdReq_default_instance_;
constexpr SetMissActIdResp::SetMissActIdResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct SetMissActIdRespDefaultTypeInternal {
  constexpr SetMissActIdRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetMissActIdRespDefaultTypeInternal() {}
  union {
    SetMissActIdResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetMissActIdRespDefaultTypeInternal _SetMissActIdResp_default_instance_;
constexpr Parameter::Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct ParameterDefaultTypeInternal {
  constexpr ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDefaultTypeInternal() {}
  union {
    Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDefaultTypeInternal _Parameter_default_instance_;
constexpr ExpTreeNode::ExpTreeNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opt_(nullptr)
  , left_(nullptr)
  , right_(nullptr){}
struct ExpTreeNodeDefaultTypeInternal {
  constexpr ExpTreeNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpTreeNodeDefaultTypeInternal() {}
  union {
    ExpTreeNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpTreeNodeDefaultTypeInternal _ExpTreeNode_default_instance_;
constexpr Prim::Prim(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lvalue_(nullptr)
  , root_(nullptr){}
struct PrimDefaultTypeInternal {
  constexpr PrimDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrimDefaultTypeInternal() {}
  union {
    Prim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrimDefaultTypeInternal _Prim_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prims_()
  , actionparalens_()
  , _actionparalens_cached_byte_size_(0)
  , paranum_(0){}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr InsertActionReq::InsertActionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(nullptr)
  , procid_(0)
  , actionid_(0){}
struct InsertActionReqDefaultTypeInternal {
  constexpr InsertActionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertActionReqDefaultTypeInternal() {}
  union {
    InsertActionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertActionReqDefaultTypeInternal _InsertActionReq_default_instance_;
constexpr InsertActionResp::InsertActionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct InsertActionRespDefaultTypeInternal {
  constexpr InsertActionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertActionRespDefaultTypeInternal() {}
  union {
    InsertActionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertActionRespDefaultTypeInternal _InsertActionResp_default_instance_;
constexpr ClearActionReq::ClearActionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0){}
struct ClearActionReqDefaultTypeInternal {
  constexpr ClearActionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearActionReqDefaultTypeInternal() {}
  union {
    ClearActionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearActionReqDefaultTypeInternal _ClearActionReq_default_instance_;
constexpr ClearActionResp::ClearActionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct ClearActionRespDefaultTypeInternal {
  constexpr ClearActionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClearActionRespDefaultTypeInternal() {}
  union {
    ClearActionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClearActionRespDefaultTypeInternal _ClearActionResp_default_instance_;
constexpr DelActionReq::DelActionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : procid_(0)
  , actionid_(0){}
struct DelActionReqDefaultTypeInternal {
  constexpr DelActionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelActionReqDefaultTypeInternal() {}
  union {
    DelActionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelActionReqDefaultTypeInternal _DelActionReq_default_instance_;
constexpr DelActionResp::DelActionResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : res_(0)
{}
struct DelActionRespDefaultTypeInternal {
  constexpr DelActionRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DelActionRespDefaultTypeInternal() {}
  union {
    DelActionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DelActionRespDefaultTypeInternal _DelActionResp_default_instance_;
}  // namespace rp4
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_controller_5fto_5fdataplane_2eproto[52];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_controller_5fto_5fdataplane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_controller_5fto_5fdataplane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::HeaderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::HeaderInfo, headerid_),
  PROTOBUF_FIELD_OFFSET(::rp4::HeaderInfo, headerlength_),
  PROTOBUF_FIELD_OFFSET(::rp4::HeaderInfo, headeroffset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMetadataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMetadataReq, headerinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMetadataResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMetadataResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearStageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearStageReq, procid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ParserLevelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ParserLevelReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::ParserLevelReq, parserlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ParserLevelResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ParserLevelResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::FieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::FieldInfo, hdrid_),
  PROTOBUF_FIELD_OFFSET(::rp4::FieldInfo, internaloffset_),
  PROTOBUF_FIELD_OFFSET(::rp4::FieldInfo, fieldlen_),
  PROTOBUF_FIELD_OFFSET(::rp4::FieldInfo, fieldtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, parserlevel_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, state_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, key_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, mask_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, hdrid_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, hdrlen_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, nextstate_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, transfieldnum_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, transfds_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryReq, miss_act_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ModParserEntryResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearParserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearParserReq, procid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearParserResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearParserResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::Data, len_),
  PROTOBUF_FIELD_OFFSET(::rp4::Data, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::GateEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::GateEntry, type_),
  PROTOBUF_FIELD_OFFSET(::rp4::GateEntry, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetDefaultGateEntryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetDefaultGateEntryReq, proc_id_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetDefaultGateEntryReq, default_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetDefaultGateEntryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetDefaultGateEntryResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::GatewayParam, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rp4::GatewayParam, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::GatewayParam, paramtype_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rp4::GatewayParam, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::RelationExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::RelationExp, param1_),
  PROTOBUF_FIELD_OFFSET(::rp4::RelationExp, param2_),
  PROTOBUF_FIELD_OFFSET(::rp4::RelationExp, relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpReq, param1_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpReq, param2_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpReq, relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertRelationExpResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearRelationExpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearRelationExpReq, procid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearRelationExpResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearRelationExpResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearResMapReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearResMapReq, procid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearResMapResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearResMapResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ModResMapReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ModResMapReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModResMapReq, key_),
  PROTOBUF_FIELD_OFFSET(::rp4::ModResMapReq, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ModResMapResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ModResMapResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetNoTableReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetNoTableReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetNoTableReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetNoTableReq, notable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetNoTableResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetNoTableResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ActionProc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ActionProc, actionid_),
  PROTOBUF_FIELD_OFFSET(::rp4::ActionProc, procid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetActionProcReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetActionProcReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetActionProcReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetActionProcReq, actionprocs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetActionProcResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetActionProcResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, keywidth_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, valuewidth_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, keyconfig_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, valueconfig_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, matchtype_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, depth_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigReq, missactid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMemConfigResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetFieldInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetFieldInfoReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetFieldInfoReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetFieldInfoReq, fdinfos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetFieldInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetFieldInfoResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, key_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, value_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, key_byte_len_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryReq, value_byte_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertSramEntryResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, key_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, mask_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, value_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, key_byte_len_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryReq, value_byte_len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertTcamEntryResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearOldConfigReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearOldConfigReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::ClearOldConfigReq, matcherid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearOldConfigResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearOldConfigResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMissActIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMissActIdReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMissActIdReq, matcherid_),
  PROTOBUF_FIELD_OFFSET(::rp4::SetMissActIdReq, miss_act_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMissActIdResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::SetMissActIdResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rp4::Parameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::Parameter, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rp4::Parameter, val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ExpTreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ExpTreeNode, opt_),
  PROTOBUF_FIELD_OFFSET(::rp4::ExpTreeNode, left_),
  PROTOBUF_FIELD_OFFSET(::rp4::ExpTreeNode, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::Prim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::Prim, lvalue_),
  PROTOBUF_FIELD_OFFSET(::rp4::Prim, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::Action, paranum_),
  PROTOBUF_FIELD_OFFSET(::rp4::Action, prims_),
  PROTOBUF_FIELD_OFFSET(::rp4::Action, actionparalens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertActionReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertActionReq, action_),
  PROTOBUF_FIELD_OFFSET(::rp4::InsertActionReq, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::InsertActionResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearActionReq, procid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::ClearActionResp, res_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::DelActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::DelActionReq, procid_),
  PROTOBUF_FIELD_OFFSET(::rp4::DelActionReq, actionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rp4::DelActionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rp4::DelActionResp, res_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rp4::HeaderInfo)},
  { 9, -1, -1, sizeof(::rp4::SetMetadataReq)},
  { 16, -1, -1, sizeof(::rp4::SetMetadataResp)},
  { 23, -1, -1, sizeof(::rp4::ClearStageReq)},
  { 30, -1, -1, sizeof(::rp4::ParserLevelReq)},
  { 38, -1, -1, sizeof(::rp4::ParserLevelResp)},
  { 45, -1, -1, sizeof(::rp4::FieldInfo)},
  { 55, -1, -1, sizeof(::rp4::ModParserEntryReq)},
  { 72, -1, -1, sizeof(::rp4::ModParserEntryResp)},
  { 79, -1, -1, sizeof(::rp4::ClearParserReq)},
  { 86, -1, -1, sizeof(::rp4::ClearParserResp)},
  { 93, -1, -1, sizeof(::rp4::Data)},
  { 101, -1, -1, sizeof(::rp4::GateEntry)},
  { 109, -1, -1, sizeof(::rp4::SetDefaultGateEntryReq)},
  { 117, -1, -1, sizeof(::rp4::SetDefaultGateEntryResp)},
  { 124, -1, -1, sizeof(::rp4::GatewayParam)},
  { 134, -1, -1, sizeof(::rp4::RelationExp)},
  { 143, -1, -1, sizeof(::rp4::InsertRelationExpReq)},
  { 153, -1, -1, sizeof(::rp4::InsertRelationExpResp)},
  { 160, -1, -1, sizeof(::rp4::ClearRelationExpReq)},
  { 167, -1, -1, sizeof(::rp4::ClearRelationExpResp)},
  { 174, -1, -1, sizeof(::rp4::ClearResMapReq)},
  { 181, -1, -1, sizeof(::rp4::ClearResMapResp)},
  { 188, -1, -1, sizeof(::rp4::ModResMapReq)},
  { 197, -1, -1, sizeof(::rp4::ModResMapResp)},
  { 204, -1, -1, sizeof(::rp4::SetNoTableReq)},
  { 213, -1, -1, sizeof(::rp4::SetNoTableResp)},
  { 220, -1, -1, sizeof(::rp4::ActionProc)},
  { 228, -1, -1, sizeof(::rp4::SetActionProcReq)},
  { 237, -1, -1, sizeof(::rp4::SetActionProcResp)},
  { 244, -1, -1, sizeof(::rp4::SetMemConfigReq)},
  { 259, -1, -1, sizeof(::rp4::SetMemConfigResp)},
  { 266, -1, -1, sizeof(::rp4::SetFieldInfoReq)},
  { 275, -1, -1, sizeof(::rp4::SetFieldInfoResp)},
  { 282, -1, -1, sizeof(::rp4::InsertSramEntryReq)},
  { 294, -1, -1, sizeof(::rp4::InsertSramEntryResp)},
  { 301, -1, -1, sizeof(::rp4::InsertTcamEntryReq)},
  { 314, -1, -1, sizeof(::rp4::InsertTcamEntryResp)},
  { 321, -1, -1, sizeof(::rp4::ClearOldConfigReq)},
  { 329, -1, -1, sizeof(::rp4::ClearOldConfigResp)},
  { 336, -1, -1, sizeof(::rp4::SetMissActIdReq)},
  { 345, -1, -1, sizeof(::rp4::SetMissActIdResp)},
  { 352, -1, -1, sizeof(::rp4::Parameter)},
  { 365, -1, -1, sizeof(::rp4::ExpTreeNode)},
  { 374, -1, -1, sizeof(::rp4::Prim)},
  { 382, -1, -1, sizeof(::rp4::Action)},
  { 391, -1, -1, sizeof(::rp4::InsertActionReq)},
  { 400, -1, -1, sizeof(::rp4::InsertActionResp)},
  { 407, -1, -1, sizeof(::rp4::ClearActionReq)},
  { 414, -1, -1, sizeof(::rp4::ClearActionResp)},
  { 421, -1, -1, sizeof(::rp4::DelActionReq)},
  { 429, -1, -1, sizeof(::rp4::DelActionResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_HeaderInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetMetadataReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetMetadataResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearStageReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ParserLevelReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ParserLevelResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_FieldInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ModParserEntryReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ModParserEntryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearParserReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearParserResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_GateEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetDefaultGateEntryReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetDefaultGateEntryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_GatewayParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_RelationExp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertRelationExpReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertRelationExpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearRelationExpReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearRelationExpResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearResMapReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearResMapResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ModResMapReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ModResMapResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetNoTableReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetNoTableResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ActionProc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetActionProcReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetActionProcResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetMemConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetMemConfigResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetFieldInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetFieldInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertSramEntryReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertSramEntryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertTcamEntryReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertTcamEntryResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearOldConfigReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearOldConfigResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetMissActIdReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_SetMissActIdResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ExpTreeNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_Prim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertActionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_InsertActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearActionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_ClearActionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_DelActionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rp4::_DelActionResp_default_instance_),
};

const char descriptor_table_protodef_controller_5fto_5fdataplane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035controller_to_dataplane.proto\022\003rp4\"J\n\n"
  "HeaderInfo\022\020\n\010headerId\030\001 \001(\005\022\024\n\014headerLe"
  "ngth\030\002 \001(\005\022\024\n\014headerOffset\030\003 \001(\005\"6\n\016SetM"
  "etadataReq\022$\n\013headerInfos\030\001 \003(\0132\017.rp4.He"
  "aderInfo\"(\n\017SetMetadataResp\022\025\n\003res\030\001 \001(\016"
  "2\010.rp4.Res\"\037\n\rClearStageReq\022\016\n\006procId\030\001 "
  "\001(\005\"5\n\016ParserLevelReq\022\016\n\006procId\030\001 \001(\005\022\023\n"
  "\013parserLevel\030\002 \001(\005\"(\n\017ParserLevelResp\022\025\n"
  "\003res\030\001 \001(\0162\010.rp4.Res\"g\n\tFieldInfo\022\r\n\005hdr"
  "Id\030\001 \001(\005\022\026\n\016internalOffset\030\002 \001(\005\022\020\n\010fiel"
  "dLen\030\003 \001(\005\022!\n\tfieldType\030\004 \001(\0162\016.rp4.Fiel"
  "dType\"\337\001\n\021ModParserEntryReq\022\016\n\006procId\030\001 "
  "\001(\005\022\023\n\013parserLevel\030\002 \001(\005\022\r\n\005state\030\003 \001(\005\022"
  "\013\n\003key\030\004 \001(\r\022\014\n\004mask\030\005 \001(\005\022\r\n\005hdrId\030\006 \001("
  "\005\022\016\n\006hdrLen\030\007 \001(\005\022\021\n\tnextState\030\010 \001(\005\022\025\n\r"
  "transFieldNum\030\t \001(\005\022 \n\010transFds\030\n \003(\0132\016."
  "rp4.FieldInfo\022\020\n\010miss_act\030\013 \001(\005\"+\n\022ModPa"
  "rserEntryResp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\" \n\016"
  "ClearParserReq\022\016\n\006procId\030\001 \001(\005\"(\n\017ClearP"
  "arserResp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\" \n\004Data"
  "\022\013\n\003len\030\001 \001(\005\022\013\n\003val\030\002 \001(\014\":\n\tGateEntry\022"
  " \n\004type\030\001 \001(\0162\022.rp4.GateEntryType\022\013\n\003val"
  "\030\002 \001(\005\"P\n\026SetDefaultGateEntryReq\022\017\n\007proc"
  "_id\030\001 \001(\005\022%\n\rdefault_entry\030\002 \001(\0132\016.rp4.G"
  "ateEntry\"0\n\027SetDefaultGateEntryResp\022\025\n\003r"
  "es\030\001 \001(\0162\010.rp4.Res\"z\n\014GatewayParam\022%\n\tpa"
  "ramType\030\001 \001(\0162\022.rp4.ParameterType\022\037\n\005fie"
  "ld\030\002 \001(\0132\016.rp4.FieldInfoH\000\022\031\n\004data\030\003 \001(\013"
  "2\t.rp4.DataH\000B\007\n\005value\"x\n\013RelationExp\022!\n"
  "\006param1\030\001 \001(\0132\021.rp4.GatewayParam\022!\n\006para"
  "m2\030\002 \001(\0132\021.rp4.GatewayParam\022#\n\010relation\030"
  "\003 \001(\0162\021.rp4.RelationCode\"\221\001\n\024InsertRelat"
  "ionExpReq\022\016\n\006procId\030\001 \001(\005\022!\n\006param1\030\002 \001("
  "\0132\021.rp4.GatewayParam\022!\n\006param2\030\003 \001(\0132\021.r"
  "p4.GatewayParam\022#\n\010relation\030\004 \001(\0162\021.rp4."
  "RelationCode\".\n\025InsertRelationExpResp\022\025\n"
  "\003res\030\001 \001(\0162\010.rp4.Res\"%\n\023ClearRelationExp"
  "Req\022\016\n\006procId\030\001 \001(\005\"-\n\024ClearRelationExpR"
  "esp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\" \n\016ClearResMa"
  "pReq\022\016\n\006procId\030\001 \001(\005\"(\n\017ClearResMapResp\022"
  "\025\n\003res\030\001 \001(\0162\010.rp4.Res\"J\n\014ModResMapReq\022\016"
  "\n\006procId\030\001 \001(\005\022\013\n\003key\030\002 \001(\005\022\035\n\005entry\030\003 \001"
  "(\0132\016.rp4.GateEntry\"&\n\rModResMapResp\022\025\n\003r"
  "es\030\001 \001(\0162\010.rp4.Res\"C\n\rSetNoTableReq\022\016\n\006p"
  "rocId\030\001 \001(\005\022\021\n\tmatcherId\030\002 \001(\005\022\017\n\007noTabl"
  "e\030\003 \001(\010\"\'\n\016SetNoTableResp\022\025\n\003res\030\001 \001(\0162\010"
  ".rp4.Res\".\n\nActionProc\022\020\n\010actionId\030\001 \001(\005"
  "\022\016\n\006procId\030\002 \001(\005\"[\n\020SetActionProcReq\022\016\n\006"
  "procId\030\001 \001(\005\022\021\n\tmatcherId\030\002 \001(\005\022$\n\013actio"
  "nProcs\030\003 \003(\0132\017.rp4.ActionProc\"*\n\021SetActi"
  "onProcResp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\"\307\001\n\017Se"
  "tMemConfigReq\022\016\n\006procId\030\001 \001(\005\022\021\n\tmatcher"
  "Id\030\002 \001(\005\022\020\n\010keyWidth\030\003 \001(\005\022\022\n\nvalueWidth"
  "\030\004 \001(\005\022\021\n\tkeyConfig\030\005 \001(\014\022\023\n\013valueConfig"
  "\030\006 \001(\014\022!\n\tmatchType\030\007 \001(\0162\016.rp4.MatchTyp"
  "e\022\r\n\005depth\030\010 \001(\005\022\021\n\tmissActId\030\t \001(\005\")\n\020S"
  "etMemConfigResp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\"U"
  "\n\017SetFieldInfoReq\022\016\n\006procId\030\001 \001(\005\022\021\n\tmat"
  "cherId\030\002 \001(\005\022\037\n\007fdInfos\030\003 \003(\0132\016.rp4.Fiel"
  "dInfo\")\n\020SetFieldInfoResp\022\025\n\003res\030\001 \001(\0162\010"
  ".rp4.Res\"\201\001\n\022InsertSramEntryReq\022\016\n\006procI"
  "d\030\001 \001(\005\022\021\n\tmatcherId\030\002 \001(\005\022\013\n\003key\030\003 \001(\014\022"
  "\r\n\005value\030\004 \001(\014\022\024\n\014key_byte_len\030\005 \001(\005\022\026\n\016"
  "value_byte_len\030\006 \001(\005\",\n\023InsertSramEntryR"
  "esp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\"\217\001\n\022InsertTca"
  "mEntryReq\022\016\n\006procId\030\001 \001(\005\022\021\n\tmatcherId\030\002"
  " \001(\005\022\013\n\003key\030\003 \001(\014\022\014\n\004mask\030\004 \001(\014\022\r\n\005value"
  "\030\005 \001(\014\022\024\n\014key_byte_len\030\006 \001(\005\022\026\n\016value_by"
  "te_len\030\007 \001(\005\",\n\023InsertTcamEntryResp\022\025\n\003r"
  "es\030\001 \001(\0162\010.rp4.Res\"6\n\021ClearOldConfigReq\022"
  "\016\n\006procId\030\001 \001(\005\022\021\n\tmatcherId\030\002 \001(\005\"+\n\022Cl"
  "earOldConfigResp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\""
  "I\n\017SetMissActIdReq\022\016\n\006procId\030\001 \001(\005\022\021\n\tma"
  "tcherId\030\002 \001(\005\022\023\n\013miss_act_id\030\003 \001(\005\")\n\020Se"
  "tMissActIdResp\022\025\n\003res\030\001 \001(\0162\010.rp4.Res\"\274\001"
  "\n\tParameter\022 \n\004type\030\001 \001(\0162\022.rp4.Paramete"
  "rType\022\017\n\005hdrId\030\002 \001(\005H\000\022\037\n\005field\030\003 \001(\0132\016."
  "rp4.FieldInfoH\000\022!\n\014constantData\030\004 \001(\0132\t."
  "rp4.DataH\000\022\026\n\014actionParaId\030\005 \001(\005H\000\022\031\n\002op"
  "\030\006 \001(\0162\013.rp4.OpCodeH\000B\005\n\003val\"k\n\013ExpTreeN"
  "ode\022\033\n\003opt\030\001 \001(\0132\016.rp4.Parameter\022\036\n\004left"
  "\030\002 \001(\0132\020.rp4.ExpTreeNode\022\037\n\005right\030\003 \001(\0132"
  "\020.rp4.ExpTreeNode\"F\n\004Prim\022\036\n\006lvalue\030\001 \001("
  "\0132\016.rp4.FieldInfo\022\036\n\004root\030\002 \001(\0132\020.rp4.Ex"
  "pTreeNode\"K\n\006Action\022\017\n\007paraNum\030\001 \001(\005\022\030\n\005"
  "prims\030\002 \003(\0132\t.rp4.Prim\022\026\n\016actionParaLens"
  "\030\004 \003(\005\"P\n\017InsertActionReq\022\016\n\006procId\030\001 \001("
  "\005\022\033\n\006action\030\002 \001(\0132\013.rp4.Action\022\020\n\010action"
  "Id\030\003 \001(\005\")\n\020InsertActionResp\022\025\n\003res\030\001 \001("
  "\0162\010.rp4.Res\" \n\016ClearActionReq\022\016\n\006procId\030"
  "\001 \001(\005\"(\n\017ClearActionResp\022\025\n\003res\030\001 \001(\0162\010."
  "rp4.Res\"0\n\014DelActionReq\022\016\n\006procId\030\001 \001(\005\022"
  "\020\n\010actionId\030\002 \001(\005\"&\n\rDelActionResp\022\025\n\003re"
  "s\030\001 \001(\0162\010.rp4.Res*\027\n\003Res\022\006\n\002OK\020\000\022\010\n\004FAIL"
  "\020\001*1\n\tFieldType\022\006\n\002FD\020\000\022\t\n\005VALID\020\001\022\007\n\003HI"
  "T\020\002\022\010\n\004MISS\020\003*M\n\rParameterType\022\014\n\010CONSTA"
  "NT\020\000\022\n\n\006HEADER\020\001\022\t\n\005FIELD\020\002\022\t\n\005PARAM\020\003\022\014"
  "\n\010OPERATOR\020\004*A\n\014RelationCode\022\006\n\002GT\020\000\022\007\n\003"
  "GTE\020\001\022\006\n\002LT\020\002\022\007\n\003LTE\020\003\022\006\n\002EQ\020\004\022\007\n\003NEQ\020\005*"
  "%\n\rGateEntryType\022\t\n\005TABLE\020\000\022\t\n\005STAGE\020\001*,"
  "\n\tMatchType\022\t\n\005EXACT\020\000\022\013\n\007TERNARY\020\001\022\007\n\003L"
  "PM\020\002*\215\001\n\006OpCode\022\007\n\003ADD\020\000\022\007\n\003SUB\020\001\022\r\n\tSET"
  "_FIELD\020\002\022\016\n\nCOPY_FIELD\020\003\022\016\n\nSHIFT_LEFT\020\004"
  "\022\017\n\013SHIFT_RIGHT\020\005\022\013\n\007BIT_AND\020\006\022\n\n\006BIT_OR"
  "\020\007\022\013\n\007BIT_XOR\020\010\022\013\n\007BIT_NEG\020\t2\376\t\n\nCfgServ"
  "ice\0228\n\013setMetadata\022\023.rp4.SetMetadataReq\032"
  "\024.rp4.SetMetadataResp\022<\n\017initParserLevel"
  "\022\023.rp4.ParserLevelReq\032\024.rp4.ParserLevelR"
  "esp\022A\n\016modParserEntry\022\026.rp4.ModParserEnt"
  "ryReq\032\027.rp4.ModParserEntryResp\0228\n\013clearP"
  "arser\022\023.rp4.ClearParserReq\032\024.rp4.ClearPa"
  "rserResp\022J\n\021insertRelationExp\022\031.rp4.Inse"
  "rtRelationExpReq\032\032.rp4.InsertRelationExp"
  "Resp\022G\n\020clearRelationExp\022\030.rp4.ClearRela"
  "tionExpReq\032\031.rp4.ClearRelationExpResp\0228\n"
  "\013clearResMap\022\023.rp4.ClearResMapReq\032\024.rp4."
  "ClearResMapResp\0222\n\tmodResMap\022\021.rp4.ModRe"
  "sMapReq\032\022.rp4.ModResMapResp\022P\n\023setDefaul"
  "tGateEntry\022\033.rp4.SetDefaultGateEntryReq\032"
  "\034.rp4.SetDefaultGateEntryResp\0225\n\nsetNoTa"
  "ble\022\022.rp4.SetNoTableReq\032\023.rp4.SetNoTable"
  "Resp\022>\n\rsetActionProc\022\025.rp4.SetActionPro"
  "cReq\032\026.rp4.SetActionProcResp\022;\n\014setMemCo"
  "nfig\022\024.rp4.SetMemConfigReq\032\025.rp4.SetMemC"
  "onfigResp\022;\n\014setFieldInfo\022\024.rp4.SetField"
  "InfoReq\032\025.rp4.SetFieldInfoResp\022A\n\016clearO"
  "ldConfig\022\026.rp4.ClearOldConfigReq\032\027.rp4.C"
  "learOldConfigResp\022;\n\014setMissActId\022\024.rp4."
  "SetMissActIdReq\032\025.rp4.SetMissActIdResp\022D"
  "\n\017insertSramEntry\022\027.rp4.InsertSramEntryR"
  "eq\032\030.rp4.InsertSramEntryResp\022D\n\017insertTc"
  "amEntry\022\027.rp4.InsertTcamEntryReq\032\030.rp4.I"
  "nsertTcamEntryResp\022;\n\014insertAction\022\024.rp4"
  ".InsertActionReq\032\025.rp4.InsertActionResp\022"
  "8\n\013clearAction\022\023.rp4.ClearActionReq\032\024.rp"
  "4.ClearActionResp\0222\n\tdelAction\022\021.rp4.Del"
  "ActionReq\032\022.rp4.DelActionRespb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_controller_5fto_5fdataplane_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controller_5fto_5fdataplane_2eproto = {
  false, false, 5477, descriptor_table_protodef_controller_5fto_5fdataplane_2eproto, "controller_to_dataplane.proto", 
  &descriptor_table_controller_5fto_5fdataplane_2eproto_once, nullptr, 0, 52,
  schemas, file_default_instances, TableStruct_controller_5fto_5fdataplane_2eproto::offsets,
  file_level_metadata_controller_5fto_5fdataplane_2eproto, file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto, file_level_service_descriptors_controller_5fto_5fdataplane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_controller_5fto_5fdataplane_2eproto_getter() {
  return &descriptor_table_controller_5fto_5fdataplane_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_controller_5fto_5fdataplane_2eproto(&descriptor_table_controller_5fto_5fdataplane_2eproto);
namespace rp4 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Res_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[0];
}
bool Res_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[1];
}
bool FieldType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[2];
}
bool ParameterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelationCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[3];
}
bool RelationCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GateEntryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[4];
}
bool GateEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[5];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fto_5fdataplane_2eproto);
  return file_level_enum_descriptors_controller_5fto_5fdataplane_2eproto[6];
}
bool OpCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class HeaderInfo::_Internal {
 public:
};

HeaderInfo::HeaderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.HeaderInfo)
}
HeaderInfo::HeaderInfo(const HeaderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&headerid_, &from.headerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&headeroffset_) -
    reinterpret_cast<char*>(&headerid_)) + sizeof(headeroffset_));
  // @@protoc_insertion_point(copy_constructor:rp4.HeaderInfo)
}

void HeaderInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&headerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&headeroffset_) -
    reinterpret_cast<char*>(&headerid_)) + sizeof(headeroffset_));
}

HeaderInfo::~HeaderInfo() {
  // @@protoc_insertion_point(destructor:rp4.HeaderInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeaderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeaderInfo::ArenaDtor(void* object) {
  HeaderInfo* _this = reinterpret_cast< HeaderInfo* >(object);
  (void)_this;
}
void HeaderInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeaderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeaderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.HeaderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&headerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&headeroffset_) -
      reinterpret_cast<char*>(&headerid_)) + sizeof(headeroffset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 headerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          headerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 headerLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          headerlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 headerOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          headeroffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeaderInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.HeaderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 headerId = 1;
  if (this->_internal_headerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_headerid(), target);
  }

  // int32 headerLength = 2;
  if (this->_internal_headerlength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_headerlength(), target);
  }

  // int32 headerOffset = 3;
  if (this->_internal_headeroffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_headeroffset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.HeaderInfo)
  return target;
}

size_t HeaderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.HeaderInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 headerId = 1;
  if (this->_internal_headerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_headerid());
  }

  // int32 headerLength = 2;
  if (this->_internal_headerlength() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_headerlength());
  }

  // int32 headerOffset = 3;
  if (this->_internal_headeroffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_headeroffset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeaderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderInfo::GetClassData() const { return &_class_data_; }

void HeaderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeaderInfo *>(to)->MergeFrom(
      static_cast<const HeaderInfo &>(from));
}


void HeaderInfo::MergeFrom(const HeaderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.HeaderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_headerid() != 0) {
    _internal_set_headerid(from._internal_headerid());
  }
  if (from._internal_headerlength() != 0) {
    _internal_set_headerlength(from._internal_headerlength());
  }
  if (from._internal_headeroffset() != 0) {
    _internal_set_headeroffset(from._internal_headeroffset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderInfo::CopyFrom(const HeaderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.HeaderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderInfo::IsInitialized() const {
  return true;
}

void HeaderInfo::InternalSwap(HeaderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeaderInfo, headeroffset_)
      + sizeof(HeaderInfo::headeroffset_)
      - PROTOBUF_FIELD_OFFSET(HeaderInfo, headerid_)>(
          reinterpret_cast<char*>(&headerid_),
          reinterpret_cast<char*>(&other->headerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[0]);
}

// ===================================================================

class SetMetadataReq::_Internal {
 public:
};

SetMetadataReq::SetMetadataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headerinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetMetadataReq)
}
SetMetadataReq::SetMetadataReq(const SetMetadataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      headerinfos_(from.headerinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rp4.SetMetadataReq)
}

void SetMetadataReq::SharedCtor() {
}

SetMetadataReq::~SetMetadataReq() {
  // @@protoc_insertion_point(destructor:rp4.SetMetadataReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetMetadataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMetadataReq::ArenaDtor(void* object) {
  SetMetadataReq* _this = reinterpret_cast< SetMetadataReq* >(object);
  (void)_this;
}
void SetMetadataReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMetadataReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMetadataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetMetadataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headerinfos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMetadataReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rp4.HeaderInfo headerInfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headerinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMetadataReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetMetadataReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rp4.HeaderInfo headerInfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headerinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_headerinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetMetadataReq)
  return target;
}

size_t SetMetadataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetMetadataReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rp4.HeaderInfo headerInfos = 1;
  total_size += 1UL * this->_internal_headerinfos_size();
  for (const auto& msg : this->headerinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMetadataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMetadataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMetadataReq::GetClassData() const { return &_class_data_; }

void SetMetadataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMetadataReq *>(to)->MergeFrom(
      static_cast<const SetMetadataReq &>(from));
}


void SetMetadataReq::MergeFrom(const SetMetadataReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetMetadataReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headerinfos_.MergeFrom(from.headerinfos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMetadataReq::CopyFrom(const SetMetadataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetMetadataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMetadataReq::IsInitialized() const {
  return true;
}

void SetMetadataReq::InternalSwap(SetMetadataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headerinfos_.InternalSwap(&other->headerinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMetadataReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[1]);
}

// ===================================================================

class SetMetadataResp::_Internal {
 public:
};

SetMetadataResp::SetMetadataResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetMetadataResp)
}
SetMetadataResp::SetMetadataResp(const SetMetadataResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetMetadataResp)
}

void SetMetadataResp::SharedCtor() {
res_ = 0;
}

SetMetadataResp::~SetMetadataResp() {
  // @@protoc_insertion_point(destructor:rp4.SetMetadataResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetMetadataResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMetadataResp::ArenaDtor(void* object) {
  SetMetadataResp* _this = reinterpret_cast< SetMetadataResp* >(object);
  (void)_this;
}
void SetMetadataResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMetadataResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMetadataResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetMetadataResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMetadataResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMetadataResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetMetadataResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetMetadataResp)
  return target;
}

size_t SetMetadataResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetMetadataResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMetadataResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMetadataResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMetadataResp::GetClassData() const { return &_class_data_; }

void SetMetadataResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMetadataResp *>(to)->MergeFrom(
      static_cast<const SetMetadataResp &>(from));
}


void SetMetadataResp::MergeFrom(const SetMetadataResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetMetadataResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMetadataResp::CopyFrom(const SetMetadataResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetMetadataResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMetadataResp::IsInitialized() const {
  return true;
}

void SetMetadataResp::InternalSwap(SetMetadataResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMetadataResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[2]);
}

// ===================================================================

class ClearStageReq::_Internal {
 public:
};

ClearStageReq::ClearStageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearStageReq)
}
ClearStageReq::ClearStageReq(const ClearStageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procid_ = from.procid_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearStageReq)
}

void ClearStageReq::SharedCtor() {
procid_ = 0;
}

ClearStageReq::~ClearStageReq() {
  // @@protoc_insertion_point(destructor:rp4.ClearStageReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearStageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearStageReq::ArenaDtor(void* object) {
  ClearStageReq* _this = reinterpret_cast< ClearStageReq* >(object);
  (void)_this;
}
void ClearStageReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearStageReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearStageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearStageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearStageReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearStageReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearStageReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearStageReq)
  return target;
}

size_t ClearStageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearStageReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearStageReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearStageReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearStageReq::GetClassData() const { return &_class_data_; }

void ClearStageReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearStageReq *>(to)->MergeFrom(
      static_cast<const ClearStageReq &>(from));
}


void ClearStageReq::MergeFrom(const ClearStageReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearStageReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearStageReq::CopyFrom(const ClearStageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearStageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearStageReq::IsInitialized() const {
  return true;
}

void ClearStageReq::InternalSwap(ClearStageReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(procid_, other->procid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearStageReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[3]);
}

// ===================================================================

class ParserLevelReq::_Internal {
 public:
};

ParserLevelReq::ParserLevelReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ParserLevelReq)
}
ParserLevelReq::ParserLevelReq(const ParserLevelReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&parserlevel_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(parserlevel_));
  // @@protoc_insertion_point(copy_constructor:rp4.ParserLevelReq)
}

void ParserLevelReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parserlevel_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(parserlevel_));
}

ParserLevelReq::~ParserLevelReq() {
  // @@protoc_insertion_point(destructor:rp4.ParserLevelReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParserLevelReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParserLevelReq::ArenaDtor(void* object) {
  ParserLevelReq* _this = reinterpret_cast< ParserLevelReq* >(object);
  (void)_this;
}
void ParserLevelReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParserLevelReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParserLevelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ParserLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parserlevel_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(parserlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParserLevelReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parserLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parserlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParserLevelReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ParserLevelReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 parserLevel = 2;
  if (this->_internal_parserlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parserlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ParserLevelReq)
  return target;
}

size_t ParserLevelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ParserLevelReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 parserLevel = 2;
  if (this->_internal_parserlevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_parserlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParserLevelReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParserLevelReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParserLevelReq::GetClassData() const { return &_class_data_; }

void ParserLevelReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParserLevelReq *>(to)->MergeFrom(
      static_cast<const ParserLevelReq &>(from));
}


void ParserLevelReq::MergeFrom(const ParserLevelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ParserLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_parserlevel() != 0) {
    _internal_set_parserlevel(from._internal_parserlevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParserLevelReq::CopyFrom(const ParserLevelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ParserLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParserLevelReq::IsInitialized() const {
  return true;
}

void ParserLevelReq::InternalSwap(ParserLevelReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ParserLevelReq, parserlevel_)
      + sizeof(ParserLevelReq::parserlevel_)
      - PROTOBUF_FIELD_OFFSET(ParserLevelReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ParserLevelReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[4]);
}

// ===================================================================

class ParserLevelResp::_Internal {
 public:
};

ParserLevelResp::ParserLevelResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ParserLevelResp)
}
ParserLevelResp::ParserLevelResp(const ParserLevelResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ParserLevelResp)
}

void ParserLevelResp::SharedCtor() {
res_ = 0;
}

ParserLevelResp::~ParserLevelResp() {
  // @@protoc_insertion_point(destructor:rp4.ParserLevelResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ParserLevelResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ParserLevelResp::ArenaDtor(void* object) {
  ParserLevelResp* _this = reinterpret_cast< ParserLevelResp* >(object);
  (void)_this;
}
void ParserLevelResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ParserLevelResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ParserLevelResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ParserLevelResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ParserLevelResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ParserLevelResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ParserLevelResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ParserLevelResp)
  return target;
}

size_t ParserLevelResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ParserLevelResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ParserLevelResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ParserLevelResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ParserLevelResp::GetClassData() const { return &_class_data_; }

void ParserLevelResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ParserLevelResp *>(to)->MergeFrom(
      static_cast<const ParserLevelResp &>(from));
}


void ParserLevelResp::MergeFrom(const ParserLevelResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ParserLevelResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ParserLevelResp::CopyFrom(const ParserLevelResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ParserLevelResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParserLevelResp::IsInitialized() const {
  return true;
}

void ParserLevelResp::InternalSwap(ParserLevelResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ParserLevelResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[5]);
}

// ===================================================================

class FieldInfo::_Internal {
 public:
};

FieldInfo::FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.FieldInfo)
}
FieldInfo::FieldInfo(const FieldInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hdrid_, &from.hdrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldtype_) -
    reinterpret_cast<char*>(&hdrid_)) + sizeof(fieldtype_));
  // @@protoc_insertion_point(copy_constructor:rp4.FieldInfo)
}

void FieldInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hdrid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldtype_) -
    reinterpret_cast<char*>(&hdrid_)) + sizeof(fieldtype_));
}

FieldInfo::~FieldInfo() {
  // @@protoc_insertion_point(destructor:rp4.FieldInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FieldInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FieldInfo::ArenaDtor(void* object) {
  FieldInfo* _this = reinterpret_cast< FieldInfo* >(object);
  (void)_this;
}
void FieldInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hdrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fieldtype_) -
      reinterpret_cast<char*>(&hdrid_)) + sizeof(fieldtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hdrId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hdrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 internalOffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          internaloffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fieldLen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fieldlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.FieldType fieldType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fieldtype(static_cast<::rp4::FieldType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.FieldInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hdrId = 1;
  if (this->_internal_hdrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hdrid(), target);
  }

  // int32 internalOffset = 2;
  if (this->_internal_internaloffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_internaloffset(), target);
  }

  // int32 fieldLen = 3;
  if (this->_internal_fieldlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fieldlen(), target);
  }

  // .rp4.FieldType fieldType = 4;
  if (this->_internal_fieldtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_fieldtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.FieldInfo)
  return target;
}

size_t FieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.FieldInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hdrId = 1;
  if (this->_internal_hdrid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hdrid());
  }

  // int32 internalOffset = 2;
  if (this->_internal_internaloffset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_internaloffset());
  }

  // int32 fieldLen = 3;
  if (this->_internal_fieldlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fieldlen());
  }

  // .rp4.FieldType fieldType = 4;
  if (this->_internal_fieldtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fieldtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FieldInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldInfo::GetClassData() const { return &_class_data_; }

void FieldInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FieldInfo *>(to)->MergeFrom(
      static_cast<const FieldInfo &>(from));
}


void FieldInfo::MergeFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.FieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hdrid() != 0) {
    _internal_set_hdrid(from._internal_hdrid());
  }
  if (from._internal_internaloffset() != 0) {
    _internal_set_internaloffset(from._internal_internaloffset());
  }
  if (from._internal_fieldlen() != 0) {
    _internal_set_fieldlen(from._internal_fieldlen());
  }
  if (from._internal_fieldtype() != 0) {
    _internal_set_fieldtype(from._internal_fieldtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldInfo::CopyFrom(const FieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.FieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldInfo::IsInitialized() const {
  return true;
}

void FieldInfo::InternalSwap(FieldInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldInfo, fieldtype_)
      + sizeof(FieldInfo::fieldtype_)
      - PROTOBUF_FIELD_OFFSET(FieldInfo, hdrid_)>(
          reinterpret_cast<char*>(&hdrid_),
          reinterpret_cast<char*>(&other->hdrid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[6]);
}

// ===================================================================

class ModParserEntryReq::_Internal {
 public:
};

ModParserEntryReq::ModParserEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transfds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ModParserEntryReq)
}
ModParserEntryReq::ModParserEntryReq(const ModParserEntryReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transfds_(from.transfds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&miss_act_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(miss_act_));
  // @@protoc_insertion_point(copy_constructor:rp4.ModParserEntryReq)
}

void ModParserEntryReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&miss_act_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(miss_act_));
}

ModParserEntryReq::~ModParserEntryReq() {
  // @@protoc_insertion_point(destructor:rp4.ModParserEntryReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModParserEntryReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModParserEntryReq::ArenaDtor(void* object) {
  ModParserEntryReq* _this = reinterpret_cast< ModParserEntryReq* >(object);
  (void)_this;
}
void ModParserEntryReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModParserEntryReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModParserEntryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ModParserEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transfds_.Clear();
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_act_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(miss_act_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModParserEntryReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parserLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          parserlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hdrId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hdrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hdrLen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hdrlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nextState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          nextstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 transFieldNum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          transfieldnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rp4.FieldInfo transFds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transfds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 miss_act = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          miss_act_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModParserEntryReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ModParserEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 parserLevel = 2;
  if (this->_internal_parserlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parserlevel(), target);
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_state(), target);
  }

  // uint32 key = 4;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_key(), target);
  }

  // int32 mask = 5;
  if (this->_internal_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mask(), target);
  }

  // int32 hdrId = 6;
  if (this->_internal_hdrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_hdrid(), target);
  }

  // int32 hdrLen = 7;
  if (this->_internal_hdrlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hdrlen(), target);
  }

  // int32 nextState = 8;
  if (this->_internal_nextstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_nextstate(), target);
  }

  // int32 transFieldNum = 9;
  if (this->_internal_transfieldnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_transfieldnum(), target);
  }

  // repeated .rp4.FieldInfo transFds = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transfds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_transfds(i), target, stream);
  }

  // int32 miss_act = 11;
  if (this->_internal_miss_act() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_miss_act(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ModParserEntryReq)
  return target;
}

size_t ModParserEntryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ModParserEntryReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rp4.FieldInfo transFds = 10;
  total_size += 1UL * this->_internal_transfds_size();
  for (const auto& msg : this->transfds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 parserLevel = 2;
  if (this->_internal_parserlevel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_parserlevel());
  }

  // int32 state = 3;
  if (this->_internal_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // uint32 key = 4;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_key());
  }

  // int32 mask = 5;
  if (this->_internal_mask() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mask());
  }

  // int32 hdrId = 6;
  if (this->_internal_hdrid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hdrid());
  }

  // int32 hdrLen = 7;
  if (this->_internal_hdrlen() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hdrlen());
  }

  // int32 nextState = 8;
  if (this->_internal_nextstate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_nextstate());
  }

  // int32 transFieldNum = 9;
  if (this->_internal_transfieldnum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_transfieldnum());
  }

  // int32 miss_act = 11;
  if (this->_internal_miss_act() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_miss_act());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModParserEntryReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModParserEntryReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModParserEntryReq::GetClassData() const { return &_class_data_; }

void ModParserEntryReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModParserEntryReq *>(to)->MergeFrom(
      static_cast<const ModParserEntryReq &>(from));
}


void ModParserEntryReq::MergeFrom(const ModParserEntryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ModParserEntryReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transfds_.MergeFrom(from.transfds_);
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_parserlevel() != 0) {
    _internal_set_parserlevel(from._internal_parserlevel());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_mask() != 0) {
    _internal_set_mask(from._internal_mask());
  }
  if (from._internal_hdrid() != 0) {
    _internal_set_hdrid(from._internal_hdrid());
  }
  if (from._internal_hdrlen() != 0) {
    _internal_set_hdrlen(from._internal_hdrlen());
  }
  if (from._internal_nextstate() != 0) {
    _internal_set_nextstate(from._internal_nextstate());
  }
  if (from._internal_transfieldnum() != 0) {
    _internal_set_transfieldnum(from._internal_transfieldnum());
  }
  if (from._internal_miss_act() != 0) {
    _internal_set_miss_act(from._internal_miss_act());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModParserEntryReq::CopyFrom(const ModParserEntryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ModParserEntryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModParserEntryReq::IsInitialized() const {
  return true;
}

void ModParserEntryReq::InternalSwap(ModParserEntryReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transfds_.InternalSwap(&other->transfds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModParserEntryReq, miss_act_)
      + sizeof(ModParserEntryReq::miss_act_)
      - PROTOBUF_FIELD_OFFSET(ModParserEntryReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModParserEntryReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[7]);
}

// ===================================================================

class ModParserEntryResp::_Internal {
 public:
};

ModParserEntryResp::ModParserEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ModParserEntryResp)
}
ModParserEntryResp::ModParserEntryResp(const ModParserEntryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ModParserEntryResp)
}

void ModParserEntryResp::SharedCtor() {
res_ = 0;
}

ModParserEntryResp::~ModParserEntryResp() {
  // @@protoc_insertion_point(destructor:rp4.ModParserEntryResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModParserEntryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModParserEntryResp::ArenaDtor(void* object) {
  ModParserEntryResp* _this = reinterpret_cast< ModParserEntryResp* >(object);
  (void)_this;
}
void ModParserEntryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModParserEntryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModParserEntryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ModParserEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModParserEntryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModParserEntryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ModParserEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ModParserEntryResp)
  return target;
}

size_t ModParserEntryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ModParserEntryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModParserEntryResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModParserEntryResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModParserEntryResp::GetClassData() const { return &_class_data_; }

void ModParserEntryResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModParserEntryResp *>(to)->MergeFrom(
      static_cast<const ModParserEntryResp &>(from));
}


void ModParserEntryResp::MergeFrom(const ModParserEntryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ModParserEntryResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModParserEntryResp::CopyFrom(const ModParserEntryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ModParserEntryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModParserEntryResp::IsInitialized() const {
  return true;
}

void ModParserEntryResp::InternalSwap(ModParserEntryResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModParserEntryResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[8]);
}

// ===================================================================

class ClearParserReq::_Internal {
 public:
};

ClearParserReq::ClearParserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearParserReq)
}
ClearParserReq::ClearParserReq(const ClearParserReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procid_ = from.procid_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearParserReq)
}

void ClearParserReq::SharedCtor() {
procid_ = 0;
}

ClearParserReq::~ClearParserReq() {
  // @@protoc_insertion_point(destructor:rp4.ClearParserReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearParserReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearParserReq::ArenaDtor(void* object) {
  ClearParserReq* _this = reinterpret_cast< ClearParserReq* >(object);
  (void)_this;
}
void ClearParserReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearParserReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearParserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearParserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearParserReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearParserReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearParserReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearParserReq)
  return target;
}

size_t ClearParserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearParserReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearParserReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearParserReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearParserReq::GetClassData() const { return &_class_data_; }

void ClearParserReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearParserReq *>(to)->MergeFrom(
      static_cast<const ClearParserReq &>(from));
}


void ClearParserReq::MergeFrom(const ClearParserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearParserReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearParserReq::CopyFrom(const ClearParserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearParserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearParserReq::IsInitialized() const {
  return true;
}

void ClearParserReq::InternalSwap(ClearParserReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(procid_, other->procid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearParserReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[9]);
}

// ===================================================================

class ClearParserResp::_Internal {
 public:
};

ClearParserResp::ClearParserResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearParserResp)
}
ClearParserResp::ClearParserResp(const ClearParserResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearParserResp)
}

void ClearParserResp::SharedCtor() {
res_ = 0;
}

ClearParserResp::~ClearParserResp() {
  // @@protoc_insertion_point(destructor:rp4.ClearParserResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearParserResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearParserResp::ArenaDtor(void* object) {
  ClearParserResp* _this = reinterpret_cast< ClearParserResp* >(object);
  (void)_this;
}
void ClearParserResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearParserResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearParserResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearParserResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearParserResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearParserResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearParserResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearParserResp)
  return target;
}

size_t ClearParserResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearParserResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearParserResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearParserResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearParserResp::GetClassData() const { return &_class_data_; }

void ClearParserResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearParserResp *>(to)->MergeFrom(
      static_cast<const ClearParserResp &>(from));
}


void ClearParserResp::MergeFrom(const ClearParserResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearParserResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearParserResp::CopyFrom(const ClearParserResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearParserResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearParserResp::IsInitialized() const {
  return true;
}

void ClearParserResp::InternalSwap(ClearParserResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearParserResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[10]);
}

// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_val().empty()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  len_ = from.len_;
  // @@protoc_insertion_point(copy_constructor:rp4.Data)
}

void Data::SharedCtor() {
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
len_ = 0;
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:rp4.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
}
void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.ClearToEmpty();
  len_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 len = 1;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_len(), target);
  }

  // bytes val = 2;
  if (!this->_internal_val().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes val = 2;
  if (!this->_internal_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  // int32 len = 1;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }

void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data *>(to)->MergeFrom(
      static_cast<const Data &>(from));
}


void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.Data)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_val().empty()) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, lhs_arena,
      &other->val_, rhs_arena
  );
  swap(len_, other->len_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[11]);
}

// ===================================================================

class GateEntry::_Internal {
 public:
};

GateEntry::GateEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.GateEntry)
}
GateEntry::GateEntry(const GateEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:rp4.GateEntry)
}

void GateEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_));
}

GateEntry::~GateEntry() {
  // @@protoc_insertion_point(destructor:rp4.GateEntry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GateEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GateEntry::ArenaDtor(void* object) {
  GateEntry* _this = reinterpret_cast< GateEntry* >(object);
  (void)_this;
}
void GateEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GateEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GateEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.GateEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&type_)) + sizeof(val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GateEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.GateEntryType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rp4::GateEntryType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GateEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.GateEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.GateEntryType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 val = 2;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.GateEntry)
  return target;
}

size_t GateEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.GateEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.GateEntryType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 val = 2;
  if (this->_internal_val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GateEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GateEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GateEntry::GetClassData() const { return &_class_data_; }

void GateEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GateEntry *>(to)->MergeFrom(
      static_cast<const GateEntry &>(from));
}


void GateEntry::MergeFrom(const GateEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.GateEntry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GateEntry::CopyFrom(const GateEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.GateEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GateEntry::IsInitialized() const {
  return true;
}

void GateEntry::InternalSwap(GateEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GateEntry, val_)
      + sizeof(GateEntry::val_)
      - PROTOBUF_FIELD_OFFSET(GateEntry, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GateEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[12]);
}

// ===================================================================

class SetDefaultGateEntryReq::_Internal {
 public:
  static const ::rp4::GateEntry& default_entry(const SetDefaultGateEntryReq* msg);
};

const ::rp4::GateEntry&
SetDefaultGateEntryReq::_Internal::default_entry(const SetDefaultGateEntryReq* msg) {
  return *msg->default_entry_;
}
SetDefaultGateEntryReq::SetDefaultGateEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetDefaultGateEntryReq)
}
SetDefaultGateEntryReq::SetDefaultGateEntryReq(const SetDefaultGateEntryReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_entry()) {
    default_entry_ = new ::rp4::GateEntry(*from.default_entry_);
  } else {
    default_entry_ = nullptr;
  }
  proc_id_ = from.proc_id_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetDefaultGateEntryReq)
}

void SetDefaultGateEntryReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&default_entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proc_id_) -
    reinterpret_cast<char*>(&default_entry_)) + sizeof(proc_id_));
}

SetDefaultGateEntryReq::~SetDefaultGateEntryReq() {
  // @@protoc_insertion_point(destructor:rp4.SetDefaultGateEntryReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetDefaultGateEntryReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete default_entry_;
}

void SetDefaultGateEntryReq::ArenaDtor(void* object) {
  SetDefaultGateEntryReq* _this = reinterpret_cast< SetDefaultGateEntryReq* >(object);
  (void)_this;
}
void SetDefaultGateEntryReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDefaultGateEntryReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDefaultGateEntryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetDefaultGateEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && default_entry_ != nullptr) {
    delete default_entry_;
  }
  default_entry_ = nullptr;
  proc_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDefaultGateEntryReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 proc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          proc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.GateEntry default_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDefaultGateEntryReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetDefaultGateEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 proc_id = 1;
  if (this->_internal_proc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_proc_id(), target);
  }

  // .rp4.GateEntry default_entry = 2;
  if (this->_internal_has_default_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::default_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetDefaultGateEntryReq)
  return target;
}

size_t SetDefaultGateEntryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetDefaultGateEntryReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.GateEntry default_entry = 2;
  if (this->_internal_has_default_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_entry_);
  }

  // int32 proc_id = 1;
  if (this->_internal_proc_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_proc_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDefaultGateEntryReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetDefaultGateEntryReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDefaultGateEntryReq::GetClassData() const { return &_class_data_; }

void SetDefaultGateEntryReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetDefaultGateEntryReq *>(to)->MergeFrom(
      static_cast<const SetDefaultGateEntryReq &>(from));
}


void SetDefaultGateEntryReq::MergeFrom(const SetDefaultGateEntryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetDefaultGateEntryReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_default_entry()) {
    _internal_mutable_default_entry()->::rp4::GateEntry::MergeFrom(from._internal_default_entry());
  }
  if (from._internal_proc_id() != 0) {
    _internal_set_proc_id(from._internal_proc_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDefaultGateEntryReq::CopyFrom(const SetDefaultGateEntryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetDefaultGateEntryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDefaultGateEntryReq::IsInitialized() const {
  return true;
}

void SetDefaultGateEntryReq::InternalSwap(SetDefaultGateEntryReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetDefaultGateEntryReq, proc_id_)
      + sizeof(SetDefaultGateEntryReq::proc_id_)
      - PROTOBUF_FIELD_OFFSET(SetDefaultGateEntryReq, default_entry_)>(
          reinterpret_cast<char*>(&default_entry_),
          reinterpret_cast<char*>(&other->default_entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDefaultGateEntryReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[13]);
}

// ===================================================================

class SetDefaultGateEntryResp::_Internal {
 public:
};

SetDefaultGateEntryResp::SetDefaultGateEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetDefaultGateEntryResp)
}
SetDefaultGateEntryResp::SetDefaultGateEntryResp(const SetDefaultGateEntryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetDefaultGateEntryResp)
}

void SetDefaultGateEntryResp::SharedCtor() {
res_ = 0;
}

SetDefaultGateEntryResp::~SetDefaultGateEntryResp() {
  // @@protoc_insertion_point(destructor:rp4.SetDefaultGateEntryResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetDefaultGateEntryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetDefaultGateEntryResp::ArenaDtor(void* object) {
  SetDefaultGateEntryResp* _this = reinterpret_cast< SetDefaultGateEntryResp* >(object);
  (void)_this;
}
void SetDefaultGateEntryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetDefaultGateEntryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetDefaultGateEntryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetDefaultGateEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetDefaultGateEntryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetDefaultGateEntryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetDefaultGateEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetDefaultGateEntryResp)
  return target;
}

size_t SetDefaultGateEntryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetDefaultGateEntryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetDefaultGateEntryResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetDefaultGateEntryResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetDefaultGateEntryResp::GetClassData() const { return &_class_data_; }

void SetDefaultGateEntryResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetDefaultGateEntryResp *>(to)->MergeFrom(
      static_cast<const SetDefaultGateEntryResp &>(from));
}


void SetDefaultGateEntryResp::MergeFrom(const SetDefaultGateEntryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetDefaultGateEntryResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetDefaultGateEntryResp::CopyFrom(const SetDefaultGateEntryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetDefaultGateEntryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDefaultGateEntryResp::IsInitialized() const {
  return true;
}

void SetDefaultGateEntryResp::InternalSwap(SetDefaultGateEntryResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetDefaultGateEntryResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[14]);
}

// ===================================================================

class GatewayParam::_Internal {
 public:
  static const ::rp4::FieldInfo& field(const GatewayParam* msg);
  static const ::rp4::Data& data(const GatewayParam* msg);
};

const ::rp4::FieldInfo&
GatewayParam::_Internal::field(const GatewayParam* msg) {
  return *msg->value_.field_;
}
const ::rp4::Data&
GatewayParam::_Internal::data(const GatewayParam* msg) {
  return *msg->value_.data_;
}
void GatewayParam::set_allocated_field(::rp4::FieldInfo* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rp4::FieldInfo>::GetOwningArena(field);
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    set_has_field();
    value_.field_ = field;
  }
  // @@protoc_insertion_point(field_set_allocated:rp4.GatewayParam.field)
}
void GatewayParam::set_allocated_data(::rp4::Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rp4::Data>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    value_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:rp4.GatewayParam.data)
}
GatewayParam::GatewayParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.GatewayParam)
}
GatewayParam::GatewayParam(const GatewayParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paramtype_ = from.paramtype_;
  clear_has_value();
  switch (from.value_case()) {
    case kField: {
      _internal_mutable_field()->::rp4::FieldInfo::MergeFrom(from._internal_field());
      break;
    }
    case kData: {
      _internal_mutable_data()->::rp4::Data::MergeFrom(from._internal_data());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rp4.GatewayParam)
}

void GatewayParam::SharedCtor() {
paramtype_ = 0;
clear_has_value();
}

GatewayParam::~GatewayParam() {
  // @@protoc_insertion_point(destructor:rp4.GatewayParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GatewayParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void GatewayParam::ArenaDtor(void* object) {
  GatewayParam* _this = reinterpret_cast< GatewayParam* >(object);
  (void)_this;
}
void GatewayParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GatewayParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GatewayParam::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:rp4.GatewayParam)
  switch (value_case()) {
    case kField: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.field_;
      }
      break;
    }
    case kData: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.data_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void GatewayParam::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.GatewayParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramtype_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GatewayParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.ParameterType paramType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_paramtype(static_cast<::rp4::ParameterType>(val));
        } else
          goto handle_unusual;
        continue;
      // .rp4.FieldInfo field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.Data data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GatewayParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.GatewayParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.ParameterType paramType = 1;
  if (this->_internal_paramtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_paramtype(), target);
  }

  // .rp4.FieldInfo field = 2;
  if (_internal_has_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::field(this), target, stream);
  }

  // .rp4.Data data = 3;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.GatewayParam)
  return target;
}

size_t GatewayParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.GatewayParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.ParameterType paramType = 1;
  if (this->_internal_paramtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_paramtype());
  }

  switch (value_case()) {
    // .rp4.FieldInfo field = 2;
    case kField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.field_);
      break;
    }
    // .rp4.Data data = 3;
    case kData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.data_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GatewayParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GatewayParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GatewayParam::GetClassData() const { return &_class_data_; }

void GatewayParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GatewayParam *>(to)->MergeFrom(
      static_cast<const GatewayParam &>(from));
}


void GatewayParam::MergeFrom(const GatewayParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.GatewayParam)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_paramtype() != 0) {
    _internal_set_paramtype(from._internal_paramtype());
  }
  switch (from.value_case()) {
    case kField: {
      _internal_mutable_field()->::rp4::FieldInfo::MergeFrom(from._internal_field());
      break;
    }
    case kData: {
      _internal_mutable_data()->::rp4::Data::MergeFrom(from._internal_data());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GatewayParam::CopyFrom(const GatewayParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.GatewayParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatewayParam::IsInitialized() const {
  return true;
}

void GatewayParam::InternalSwap(GatewayParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(paramtype_, other->paramtype_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GatewayParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[15]);
}

// ===================================================================

class RelationExp::_Internal {
 public:
  static const ::rp4::GatewayParam& param1(const RelationExp* msg);
  static const ::rp4::GatewayParam& param2(const RelationExp* msg);
};

const ::rp4::GatewayParam&
RelationExp::_Internal::param1(const RelationExp* msg) {
  return *msg->param1_;
}
const ::rp4::GatewayParam&
RelationExp::_Internal::param2(const RelationExp* msg) {
  return *msg->param2_;
}
RelationExp::RelationExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.RelationExp)
}
RelationExp::RelationExp(const RelationExp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param1()) {
    param1_ = new ::rp4::GatewayParam(*from.param1_);
  } else {
    param1_ = nullptr;
  }
  if (from._internal_has_param2()) {
    param2_ = new ::rp4::GatewayParam(*from.param2_);
  } else {
    param2_ = nullptr;
  }
  relation_ = from.relation_;
  // @@protoc_insertion_point(copy_constructor:rp4.RelationExp)
}

void RelationExp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&param1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relation_) -
    reinterpret_cast<char*>(&param1_)) + sizeof(relation_));
}

RelationExp::~RelationExp() {
  // @@protoc_insertion_point(destructor:rp4.RelationExp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RelationExp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete param1_;
  if (this != internal_default_instance()) delete param2_;
}

void RelationExp::ArenaDtor(void* object) {
  RelationExp* _this = reinterpret_cast< RelationExp* >(object);
  (void)_this;
}
void RelationExp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RelationExp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RelationExp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.RelationExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && param1_ != nullptr) {
    delete param1_;
  }
  param1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && param2_ != nullptr) {
    delete param2_;
  }
  param2_ = nullptr;
  relation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelationExp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.GatewayParam param1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_param1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.GatewayParam param2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.RelationCode relation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_relation(static_cast<::rp4::RelationCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RelationExp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.RelationExp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.GatewayParam param1 = 1;
  if (this->_internal_has_param1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::param1(this), target, stream);
  }

  // .rp4.GatewayParam param2 = 2;
  if (this->_internal_has_param2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::param2(this), target, stream);
  }

  // .rp4.RelationCode relation = 3;
  if (this->_internal_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.RelationExp)
  return target;
}

size_t RelationExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.RelationExp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.GatewayParam param1 = 1;
  if (this->_internal_has_param1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param1_);
  }

  // .rp4.GatewayParam param2 = 2;
  if (this->_internal_has_param2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param2_);
  }

  // .rp4.RelationCode relation = 3;
  if (this->_internal_relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelationExp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RelationExp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelationExp::GetClassData() const { return &_class_data_; }

void RelationExp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RelationExp *>(to)->MergeFrom(
      static_cast<const RelationExp &>(from));
}


void RelationExp::MergeFrom(const RelationExp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.RelationExp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_param1()) {
    _internal_mutable_param1()->::rp4::GatewayParam::MergeFrom(from._internal_param1());
  }
  if (from._internal_has_param2()) {
    _internal_mutable_param2()->::rp4::GatewayParam::MergeFrom(from._internal_param2());
  }
  if (from._internal_relation() != 0) {
    _internal_set_relation(from._internal_relation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelationExp::CopyFrom(const RelationExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.RelationExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationExp::IsInitialized() const {
  return true;
}

void RelationExp::InternalSwap(RelationExp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelationExp, relation_)
      + sizeof(RelationExp::relation_)
      - PROTOBUF_FIELD_OFFSET(RelationExp, param1_)>(
          reinterpret_cast<char*>(&param1_),
          reinterpret_cast<char*>(&other->param1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelationExp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[16]);
}

// ===================================================================

class InsertRelationExpReq::_Internal {
 public:
  static const ::rp4::GatewayParam& param1(const InsertRelationExpReq* msg);
  static const ::rp4::GatewayParam& param2(const InsertRelationExpReq* msg);
};

const ::rp4::GatewayParam&
InsertRelationExpReq::_Internal::param1(const InsertRelationExpReq* msg) {
  return *msg->param1_;
}
const ::rp4::GatewayParam&
InsertRelationExpReq::_Internal::param2(const InsertRelationExpReq* msg) {
  return *msg->param2_;
}
InsertRelationExpReq::InsertRelationExpReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertRelationExpReq)
}
InsertRelationExpReq::InsertRelationExpReq(const InsertRelationExpReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_param1()) {
    param1_ = new ::rp4::GatewayParam(*from.param1_);
  } else {
    param1_ = nullptr;
  }
  if (from._internal_has_param2()) {
    param2_ = new ::rp4::GatewayParam(*from.param2_);
  } else {
    param2_ = nullptr;
  }
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&relation_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(relation_));
  // @@protoc_insertion_point(copy_constructor:rp4.InsertRelationExpReq)
}

void InsertRelationExpReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&param1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relation_) -
    reinterpret_cast<char*>(&param1_)) + sizeof(relation_));
}

InsertRelationExpReq::~InsertRelationExpReq() {
  // @@protoc_insertion_point(destructor:rp4.InsertRelationExpReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertRelationExpReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete param1_;
  if (this != internal_default_instance()) delete param2_;
}

void InsertRelationExpReq::ArenaDtor(void* object) {
  InsertRelationExpReq* _this = reinterpret_cast< InsertRelationExpReq* >(object);
  (void)_this;
}
void InsertRelationExpReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRelationExpReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertRelationExpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertRelationExpReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && param1_ != nullptr) {
    delete param1_;
  }
  param1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && param2_ != nullptr) {
    delete param2_;
  }
  param2_ = nullptr;
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relation_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(relation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRelationExpReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.GatewayParam param1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_param1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.GatewayParam param2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_param2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.RelationCode relation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_relation(static_cast<::rp4::RelationCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRelationExpReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertRelationExpReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // .rp4.GatewayParam param1 = 2;
  if (this->_internal_has_param1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::param1(this), target, stream);
  }

  // .rp4.GatewayParam param2 = 3;
  if (this->_internal_has_param2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::param2(this), target, stream);
  }

  // .rp4.RelationCode relation = 4;
  if (this->_internal_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertRelationExpReq)
  return target;
}

size_t InsertRelationExpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertRelationExpReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.GatewayParam param1 = 2;
  if (this->_internal_has_param1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param1_);
  }

  // .rp4.GatewayParam param2 = 3;
  if (this->_internal_has_param2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *param2_);
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // .rp4.RelationCode relation = 4;
  if (this->_internal_relation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRelationExpReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertRelationExpReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRelationExpReq::GetClassData() const { return &_class_data_; }

void InsertRelationExpReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertRelationExpReq *>(to)->MergeFrom(
      static_cast<const InsertRelationExpReq &>(from));
}


void InsertRelationExpReq::MergeFrom(const InsertRelationExpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertRelationExpReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_param1()) {
    _internal_mutable_param1()->::rp4::GatewayParam::MergeFrom(from._internal_param1());
  }
  if (from._internal_has_param2()) {
    _internal_mutable_param2()->::rp4::GatewayParam::MergeFrom(from._internal_param2());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_relation() != 0) {
    _internal_set_relation(from._internal_relation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRelationExpReq::CopyFrom(const InsertRelationExpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertRelationExpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRelationExpReq::IsInitialized() const {
  return true;
}

void InsertRelationExpReq::InternalSwap(InsertRelationExpReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertRelationExpReq, relation_)
      + sizeof(InsertRelationExpReq::relation_)
      - PROTOBUF_FIELD_OFFSET(InsertRelationExpReq, param1_)>(
          reinterpret_cast<char*>(&param1_),
          reinterpret_cast<char*>(&other->param1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRelationExpReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[17]);
}

// ===================================================================

class InsertRelationExpResp::_Internal {
 public:
};

InsertRelationExpResp::InsertRelationExpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertRelationExpResp)
}
InsertRelationExpResp::InsertRelationExpResp(const InsertRelationExpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.InsertRelationExpResp)
}

void InsertRelationExpResp::SharedCtor() {
res_ = 0;
}

InsertRelationExpResp::~InsertRelationExpResp() {
  // @@protoc_insertion_point(destructor:rp4.InsertRelationExpResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertRelationExpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InsertRelationExpResp::ArenaDtor(void* object) {
  InsertRelationExpResp* _this = reinterpret_cast< InsertRelationExpResp* >(object);
  (void)_this;
}
void InsertRelationExpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertRelationExpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertRelationExpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertRelationExpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertRelationExpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertRelationExpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertRelationExpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertRelationExpResp)
  return target;
}

size_t InsertRelationExpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertRelationExpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertRelationExpResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertRelationExpResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertRelationExpResp::GetClassData() const { return &_class_data_; }

void InsertRelationExpResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertRelationExpResp *>(to)->MergeFrom(
      static_cast<const InsertRelationExpResp &>(from));
}


void InsertRelationExpResp::MergeFrom(const InsertRelationExpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertRelationExpResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertRelationExpResp::CopyFrom(const InsertRelationExpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertRelationExpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertRelationExpResp::IsInitialized() const {
  return true;
}

void InsertRelationExpResp::InternalSwap(InsertRelationExpResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertRelationExpResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[18]);
}

// ===================================================================

class ClearRelationExpReq::_Internal {
 public:
};

ClearRelationExpReq::ClearRelationExpReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearRelationExpReq)
}
ClearRelationExpReq::ClearRelationExpReq(const ClearRelationExpReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procid_ = from.procid_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearRelationExpReq)
}

void ClearRelationExpReq::SharedCtor() {
procid_ = 0;
}

ClearRelationExpReq::~ClearRelationExpReq() {
  // @@protoc_insertion_point(destructor:rp4.ClearRelationExpReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearRelationExpReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearRelationExpReq::ArenaDtor(void* object) {
  ClearRelationExpReq* _this = reinterpret_cast< ClearRelationExpReq* >(object);
  (void)_this;
}
void ClearRelationExpReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearRelationExpReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearRelationExpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearRelationExpReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearRelationExpReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearRelationExpReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearRelationExpReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearRelationExpReq)
  return target;
}

size_t ClearRelationExpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearRelationExpReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearRelationExpReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearRelationExpReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearRelationExpReq::GetClassData() const { return &_class_data_; }

void ClearRelationExpReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearRelationExpReq *>(to)->MergeFrom(
      static_cast<const ClearRelationExpReq &>(from));
}


void ClearRelationExpReq::MergeFrom(const ClearRelationExpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearRelationExpReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearRelationExpReq::CopyFrom(const ClearRelationExpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearRelationExpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearRelationExpReq::IsInitialized() const {
  return true;
}

void ClearRelationExpReq::InternalSwap(ClearRelationExpReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(procid_, other->procid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearRelationExpReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[19]);
}

// ===================================================================

class ClearRelationExpResp::_Internal {
 public:
};

ClearRelationExpResp::ClearRelationExpResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearRelationExpResp)
}
ClearRelationExpResp::ClearRelationExpResp(const ClearRelationExpResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearRelationExpResp)
}

void ClearRelationExpResp::SharedCtor() {
res_ = 0;
}

ClearRelationExpResp::~ClearRelationExpResp() {
  // @@protoc_insertion_point(destructor:rp4.ClearRelationExpResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearRelationExpResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearRelationExpResp::ArenaDtor(void* object) {
  ClearRelationExpResp* _this = reinterpret_cast< ClearRelationExpResp* >(object);
  (void)_this;
}
void ClearRelationExpResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearRelationExpResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearRelationExpResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearRelationExpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearRelationExpResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearRelationExpResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearRelationExpResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearRelationExpResp)
  return target;
}

size_t ClearRelationExpResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearRelationExpResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearRelationExpResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearRelationExpResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearRelationExpResp::GetClassData() const { return &_class_data_; }

void ClearRelationExpResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearRelationExpResp *>(to)->MergeFrom(
      static_cast<const ClearRelationExpResp &>(from));
}


void ClearRelationExpResp::MergeFrom(const ClearRelationExpResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearRelationExpResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearRelationExpResp::CopyFrom(const ClearRelationExpResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearRelationExpResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearRelationExpResp::IsInitialized() const {
  return true;
}

void ClearRelationExpResp::InternalSwap(ClearRelationExpResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearRelationExpResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[20]);
}

// ===================================================================

class ClearResMapReq::_Internal {
 public:
};

ClearResMapReq::ClearResMapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearResMapReq)
}
ClearResMapReq::ClearResMapReq(const ClearResMapReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procid_ = from.procid_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearResMapReq)
}

void ClearResMapReq::SharedCtor() {
procid_ = 0;
}

ClearResMapReq::~ClearResMapReq() {
  // @@protoc_insertion_point(destructor:rp4.ClearResMapReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearResMapReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearResMapReq::ArenaDtor(void* object) {
  ClearResMapReq* _this = reinterpret_cast< ClearResMapReq* >(object);
  (void)_this;
}
void ClearResMapReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearResMapReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearResMapReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearResMapReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearResMapReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearResMapReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearResMapReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearResMapReq)
  return target;
}

size_t ClearResMapReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearResMapReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearResMapReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearResMapReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearResMapReq::GetClassData() const { return &_class_data_; }

void ClearResMapReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearResMapReq *>(to)->MergeFrom(
      static_cast<const ClearResMapReq &>(from));
}


void ClearResMapReq::MergeFrom(const ClearResMapReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearResMapReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearResMapReq::CopyFrom(const ClearResMapReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearResMapReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearResMapReq::IsInitialized() const {
  return true;
}

void ClearResMapReq::InternalSwap(ClearResMapReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(procid_, other->procid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearResMapReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[21]);
}

// ===================================================================

class ClearResMapResp::_Internal {
 public:
};

ClearResMapResp::ClearResMapResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearResMapResp)
}
ClearResMapResp::ClearResMapResp(const ClearResMapResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearResMapResp)
}

void ClearResMapResp::SharedCtor() {
res_ = 0;
}

ClearResMapResp::~ClearResMapResp() {
  // @@protoc_insertion_point(destructor:rp4.ClearResMapResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearResMapResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearResMapResp::ArenaDtor(void* object) {
  ClearResMapResp* _this = reinterpret_cast< ClearResMapResp* >(object);
  (void)_this;
}
void ClearResMapResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearResMapResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearResMapResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearResMapResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearResMapResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearResMapResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearResMapResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearResMapResp)
  return target;
}

size_t ClearResMapResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearResMapResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearResMapResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearResMapResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearResMapResp::GetClassData() const { return &_class_data_; }

void ClearResMapResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearResMapResp *>(to)->MergeFrom(
      static_cast<const ClearResMapResp &>(from));
}


void ClearResMapResp::MergeFrom(const ClearResMapResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearResMapResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearResMapResp::CopyFrom(const ClearResMapResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearResMapResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearResMapResp::IsInitialized() const {
  return true;
}

void ClearResMapResp::InternalSwap(ClearResMapResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearResMapResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[22]);
}

// ===================================================================

class ModResMapReq::_Internal {
 public:
  static const ::rp4::GateEntry& entry(const ModResMapReq* msg);
};

const ::rp4::GateEntry&
ModResMapReq::_Internal::entry(const ModResMapReq* msg) {
  return *msg->entry_;
}
ModResMapReq::ModResMapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ModResMapReq)
}
ModResMapReq::ModResMapReq(const ModResMapReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    entry_ = new ::rp4::GateEntry(*from.entry_);
  } else {
    entry_ = nullptr;
  }
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:rp4.ModResMapReq)
}

void ModResMapReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&entry_)) + sizeof(key_));
}

ModResMapReq::~ModResMapReq() {
  // @@protoc_insertion_point(destructor:rp4.ModResMapReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModResMapReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete entry_;
}

void ModResMapReq::ArenaDtor(void* object) {
  ModResMapReq* _this = reinterpret_cast< ModResMapReq* >(object);
  (void)_this;
}
void ModResMapReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModResMapReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModResMapReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ModResMapReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && entry_ != nullptr) {
    delete entry_;
  }
  entry_ = nullptr;
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModResMapReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.GateEntry entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModResMapReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ModResMapReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 key = 2;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_key(), target);
  }

  // .rp4.GateEntry entry = 3;
  if (this->_internal_has_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ModResMapReq)
  return target;
}

size_t ModResMapReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ModResMapReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.GateEntry entry = 3;
  if (this->_internal_has_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *entry_);
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 key = 2;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModResMapReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModResMapReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModResMapReq::GetClassData() const { return &_class_data_; }

void ModResMapReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModResMapReq *>(to)->MergeFrom(
      static_cast<const ModResMapReq &>(from));
}


void ModResMapReq::MergeFrom(const ModResMapReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ModResMapReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_entry()) {
    _internal_mutable_entry()->::rp4::GateEntry::MergeFrom(from._internal_entry());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModResMapReq::CopyFrom(const ModResMapReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ModResMapReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModResMapReq::IsInitialized() const {
  return true;
}

void ModResMapReq::InternalSwap(ModResMapReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModResMapReq, key_)
      + sizeof(ModResMapReq::key_)
      - PROTOBUF_FIELD_OFFSET(ModResMapReq, entry_)>(
          reinterpret_cast<char*>(&entry_),
          reinterpret_cast<char*>(&other->entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModResMapReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[23]);
}

// ===================================================================

class ModResMapResp::_Internal {
 public:
};

ModResMapResp::ModResMapResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ModResMapResp)
}
ModResMapResp::ModResMapResp(const ModResMapResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ModResMapResp)
}

void ModResMapResp::SharedCtor() {
res_ = 0;
}

ModResMapResp::~ModResMapResp() {
  // @@protoc_insertion_point(destructor:rp4.ModResMapResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModResMapResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModResMapResp::ArenaDtor(void* object) {
  ModResMapResp* _this = reinterpret_cast< ModResMapResp* >(object);
  (void)_this;
}
void ModResMapResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModResMapResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModResMapResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ModResMapResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModResMapResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModResMapResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ModResMapResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ModResMapResp)
  return target;
}

size_t ModResMapResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ModResMapResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModResMapResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModResMapResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModResMapResp::GetClassData() const { return &_class_data_; }

void ModResMapResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModResMapResp *>(to)->MergeFrom(
      static_cast<const ModResMapResp &>(from));
}


void ModResMapResp::MergeFrom(const ModResMapResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ModResMapResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModResMapResp::CopyFrom(const ModResMapResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ModResMapResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModResMapResp::IsInitialized() const {
  return true;
}

void ModResMapResp::InternalSwap(ModResMapResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModResMapResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[24]);
}

// ===================================================================

class SetNoTableReq::_Internal {
 public:
};

SetNoTableReq::SetNoTableReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetNoTableReq)
}
SetNoTableReq::SetNoTableReq(const SetNoTableReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&notable_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(notable_));
  // @@protoc_insertion_point(copy_constructor:rp4.SetNoTableReq)
}

void SetNoTableReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&notable_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(notable_));
}

SetNoTableReq::~SetNoTableReq() {
  // @@protoc_insertion_point(destructor:rp4.SetNoTableReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetNoTableReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetNoTableReq::ArenaDtor(void* object) {
  SetNoTableReq* _this = reinterpret_cast< SetNoTableReq* >(object);
  (void)_this;
}
void SetNoTableReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetNoTableReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetNoTableReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetNoTableReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&notable_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(notable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetNoTableReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool noTable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          notable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetNoTableReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetNoTableReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // bool noTable = 3;
  if (this->_internal_notable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_notable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetNoTableReq)
  return target;
}

size_t SetNoTableReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetNoTableReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  // bool noTable = 3;
  if (this->_internal_notable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetNoTableReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetNoTableReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetNoTableReq::GetClassData() const { return &_class_data_; }

void SetNoTableReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetNoTableReq *>(to)->MergeFrom(
      static_cast<const SetNoTableReq &>(from));
}


void SetNoTableReq::MergeFrom(const SetNoTableReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetNoTableReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  if (from._internal_notable() != 0) {
    _internal_set_notable(from._internal_notable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetNoTableReq::CopyFrom(const SetNoTableReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetNoTableReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNoTableReq::IsInitialized() const {
  return true;
}

void SetNoTableReq::InternalSwap(SetNoTableReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetNoTableReq, notable_)
      + sizeof(SetNoTableReq::notable_)
      - PROTOBUF_FIELD_OFFSET(SetNoTableReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetNoTableReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[25]);
}

// ===================================================================

class SetNoTableResp::_Internal {
 public:
};

SetNoTableResp::SetNoTableResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetNoTableResp)
}
SetNoTableResp::SetNoTableResp(const SetNoTableResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetNoTableResp)
}

void SetNoTableResp::SharedCtor() {
res_ = 0;
}

SetNoTableResp::~SetNoTableResp() {
  // @@protoc_insertion_point(destructor:rp4.SetNoTableResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetNoTableResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetNoTableResp::ArenaDtor(void* object) {
  SetNoTableResp* _this = reinterpret_cast< SetNoTableResp* >(object);
  (void)_this;
}
void SetNoTableResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetNoTableResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetNoTableResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetNoTableResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetNoTableResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetNoTableResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetNoTableResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetNoTableResp)
  return target;
}

size_t SetNoTableResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetNoTableResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetNoTableResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetNoTableResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetNoTableResp::GetClassData() const { return &_class_data_; }

void SetNoTableResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetNoTableResp *>(to)->MergeFrom(
      static_cast<const SetNoTableResp &>(from));
}


void SetNoTableResp::MergeFrom(const SetNoTableResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetNoTableResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetNoTableResp::CopyFrom(const SetNoTableResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetNoTableResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNoTableResp::IsInitialized() const {
  return true;
}

void SetNoTableResp::InternalSwap(SetNoTableResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetNoTableResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[26]);
}

// ===================================================================

class ActionProc::_Internal {
 public:
};

ActionProc::ActionProc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ActionProc)
}
ActionProc::ActionProc(const ActionProc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actionid_, &from.actionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&procid_) -
    reinterpret_cast<char*>(&actionid_)) + sizeof(procid_));
  // @@protoc_insertion_point(copy_constructor:rp4.ActionProc)
}

void ActionProc::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actionid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&procid_) -
    reinterpret_cast<char*>(&actionid_)) + sizeof(procid_));
}

ActionProc::~ActionProc() {
  // @@protoc_insertion_point(destructor:rp4.ActionProc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActionProc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionProc::ArenaDtor(void* object) {
  ActionProc* _this = reinterpret_cast< ActionProc* >(object);
  (void)_this;
}
void ActionProc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActionProc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActionProc::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ActionProc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&actionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procid_) -
      reinterpret_cast<char*>(&actionid_)) + sizeof(procid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionProc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 actionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 procId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionProc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ActionProc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actionid(), target);
  }

  // int32 procId = 2;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_procid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ActionProc)
  return target;
}

size_t ActionProc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ActionProc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 actionId = 1;
  if (this->_internal_actionid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  // int32 procId = 2;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionProc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActionProc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionProc::GetClassData() const { return &_class_data_; }

void ActionProc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActionProc *>(to)->MergeFrom(
      static_cast<const ActionProc &>(from));
}


void ActionProc::MergeFrom(const ActionProc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ActionProc)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionProc::CopyFrom(const ActionProc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ActionProc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProc::IsInitialized() const {
  return true;
}

void ActionProc::InternalSwap(ActionProc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionProc, procid_)
      + sizeof(ActionProc::procid_)
      - PROTOBUF_FIELD_OFFSET(ActionProc, actionid_)>(
          reinterpret_cast<char*>(&actionid_),
          reinterpret_cast<char*>(&other->actionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionProc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[27]);
}

// ===================================================================

class SetActionProcReq::_Internal {
 public:
};

SetActionProcReq::SetActionProcReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actionprocs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetActionProcReq)
}
SetActionProcReq::SetActionProcReq(const SetActionProcReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actionprocs_(from.actionprocs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matcherid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
  // @@protoc_insertion_point(copy_constructor:rp4.SetActionProcReq)
}

void SetActionProcReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matcherid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
}

SetActionProcReq::~SetActionProcReq() {
  // @@protoc_insertion_point(destructor:rp4.SetActionProcReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetActionProcReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetActionProcReq::ArenaDtor(void* object) {
  SetActionProcReq* _this = reinterpret_cast< SetActionProcReq* >(object);
  (void)_this;
}
void SetActionProcReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActionProcReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetActionProcReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetActionProcReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actionprocs_.Clear();
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matcherid_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActionProcReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rp4.ActionProc actionProcs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actionprocs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetActionProcReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetActionProcReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // repeated .rp4.ActionProc actionProcs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actionprocs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_actionprocs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetActionProcReq)
  return target;
}

size_t SetActionProcReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetActionProcReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rp4.ActionProc actionProcs = 3;
  total_size += 1UL * this->_internal_actionprocs_size();
  for (const auto& msg : this->actionprocs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetActionProcReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetActionProcReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetActionProcReq::GetClassData() const { return &_class_data_; }

void SetActionProcReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetActionProcReq *>(to)->MergeFrom(
      static_cast<const SetActionProcReq &>(from));
}


void SetActionProcReq::MergeFrom(const SetActionProcReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetActionProcReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actionprocs_.MergeFrom(from.actionprocs_);
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetActionProcReq::CopyFrom(const SetActionProcReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetActionProcReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActionProcReq::IsInitialized() const {
  return true;
}

void SetActionProcReq::InternalSwap(SetActionProcReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actionprocs_.InternalSwap(&other->actionprocs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetActionProcReq, matcherid_)
      + sizeof(SetActionProcReq::matcherid_)
      - PROTOBUF_FIELD_OFFSET(SetActionProcReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActionProcReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[28]);
}

// ===================================================================

class SetActionProcResp::_Internal {
 public:
};

SetActionProcResp::SetActionProcResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetActionProcResp)
}
SetActionProcResp::SetActionProcResp(const SetActionProcResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetActionProcResp)
}

void SetActionProcResp::SharedCtor() {
res_ = 0;
}

SetActionProcResp::~SetActionProcResp() {
  // @@protoc_insertion_point(destructor:rp4.SetActionProcResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetActionProcResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetActionProcResp::ArenaDtor(void* object) {
  SetActionProcResp* _this = reinterpret_cast< SetActionProcResp* >(object);
  (void)_this;
}
void SetActionProcResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetActionProcResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetActionProcResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetActionProcResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetActionProcResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetActionProcResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetActionProcResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetActionProcResp)
  return target;
}

size_t SetActionProcResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetActionProcResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetActionProcResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetActionProcResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetActionProcResp::GetClassData() const { return &_class_data_; }

void SetActionProcResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetActionProcResp *>(to)->MergeFrom(
      static_cast<const SetActionProcResp &>(from));
}


void SetActionProcResp::MergeFrom(const SetActionProcResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetActionProcResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetActionProcResp::CopyFrom(const SetActionProcResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetActionProcResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetActionProcResp::IsInitialized() const {
  return true;
}

void SetActionProcResp::InternalSwap(SetActionProcResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetActionProcResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[29]);
}

// ===================================================================

class SetMemConfigReq::_Internal {
 public:
};

SetMemConfigReq::SetMemConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetMemConfigReq)
}
SetMemConfigReq::SetMemConfigReq(const SetMemConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  keyconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_keyconfig().empty()) {
    keyconfig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_keyconfig(), 
      GetArenaForAllocation());
  }
  valueconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_valueconfig().empty()) {
    valueconfig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_valueconfig(), 
      GetArenaForAllocation());
  }
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&missactid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(missactid_));
  // @@protoc_insertion_point(copy_constructor:rp4.SetMemConfigReq)
}

void SetMemConfigReq::SharedCtor() {
keyconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
valueconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&missactid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(missactid_));
}

SetMemConfigReq::~SetMemConfigReq() {
  // @@protoc_insertion_point(destructor:rp4.SetMemConfigReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetMemConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keyconfig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valueconfig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetMemConfigReq::ArenaDtor(void* object) {
  SetMemConfigReq* _this = reinterpret_cast< SetMemConfigReq* >(object);
  (void)_this;
}
void SetMemConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMemConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMemConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetMemConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyconfig_.ClearToEmpty();
  valueconfig_.ClearToEmpty();
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&missactid_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(missactid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMemConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 keyWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keywidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 valueWidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          valuewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes keyConfig = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_keyconfig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes valueConfig = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_valueconfig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.MatchType matchType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_matchtype(static_cast<::rp4::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 depth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 missActId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          missactid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMemConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetMemConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // int32 keyWidth = 3;
  if (this->_internal_keywidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_keywidth(), target);
  }

  // int32 valueWidth = 4;
  if (this->_internal_valuewidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_valuewidth(), target);
  }

  // bytes keyConfig = 5;
  if (!this->_internal_keyconfig().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_keyconfig(), target);
  }

  // bytes valueConfig = 6;
  if (!this->_internal_valueconfig().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_valueconfig(), target);
  }

  // .rp4.MatchType matchType = 7;
  if (this->_internal_matchtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_matchtype(), target);
  }

  // int32 depth = 8;
  if (this->_internal_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_depth(), target);
  }

  // int32 missActId = 9;
  if (this->_internal_missactid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_missactid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetMemConfigReq)
  return target;
}

size_t SetMemConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetMemConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes keyConfig = 5;
  if (!this->_internal_keyconfig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_keyconfig());
  }

  // bytes valueConfig = 6;
  if (!this->_internal_valueconfig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_valueconfig());
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  // int32 keyWidth = 3;
  if (this->_internal_keywidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_keywidth());
  }

  // int32 valueWidth = 4;
  if (this->_internal_valuewidth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_valuewidth());
  }

  // .rp4.MatchType matchType = 7;
  if (this->_internal_matchtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }

  // int32 depth = 8;
  if (this->_internal_depth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  // int32 missActId = 9;
  if (this->_internal_missactid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_missactid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMemConfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMemConfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMemConfigReq::GetClassData() const { return &_class_data_; }

void SetMemConfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMemConfigReq *>(to)->MergeFrom(
      static_cast<const SetMemConfigReq &>(from));
}


void SetMemConfigReq::MergeFrom(const SetMemConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetMemConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keyconfig().empty()) {
    _internal_set_keyconfig(from._internal_keyconfig());
  }
  if (!from._internal_valueconfig().empty()) {
    _internal_set_valueconfig(from._internal_valueconfig());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  if (from._internal_keywidth() != 0) {
    _internal_set_keywidth(from._internal_keywidth());
  }
  if (from._internal_valuewidth() != 0) {
    _internal_set_valuewidth(from._internal_valuewidth());
  }
  if (from._internal_matchtype() != 0) {
    _internal_set_matchtype(from._internal_matchtype());
  }
  if (from._internal_depth() != 0) {
    _internal_set_depth(from._internal_depth());
  }
  if (from._internal_missactid() != 0) {
    _internal_set_missactid(from._internal_missactid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMemConfigReq::CopyFrom(const SetMemConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetMemConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMemConfigReq::IsInitialized() const {
  return true;
}

void SetMemConfigReq::InternalSwap(SetMemConfigReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &keyconfig_, lhs_arena,
      &other->keyconfig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &valueconfig_, lhs_arena,
      &other->valueconfig_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMemConfigReq, missactid_)
      + sizeof(SetMemConfigReq::missactid_)
      - PROTOBUF_FIELD_OFFSET(SetMemConfigReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMemConfigReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[30]);
}

// ===================================================================

class SetMemConfigResp::_Internal {
 public:
};

SetMemConfigResp::SetMemConfigResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetMemConfigResp)
}
SetMemConfigResp::SetMemConfigResp(const SetMemConfigResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetMemConfigResp)
}

void SetMemConfigResp::SharedCtor() {
res_ = 0;
}

SetMemConfigResp::~SetMemConfigResp() {
  // @@protoc_insertion_point(destructor:rp4.SetMemConfigResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetMemConfigResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMemConfigResp::ArenaDtor(void* object) {
  SetMemConfigResp* _this = reinterpret_cast< SetMemConfigResp* >(object);
  (void)_this;
}
void SetMemConfigResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMemConfigResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMemConfigResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetMemConfigResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMemConfigResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMemConfigResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetMemConfigResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetMemConfigResp)
  return target;
}

size_t SetMemConfigResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetMemConfigResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMemConfigResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMemConfigResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMemConfigResp::GetClassData() const { return &_class_data_; }

void SetMemConfigResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMemConfigResp *>(to)->MergeFrom(
      static_cast<const SetMemConfigResp &>(from));
}


void SetMemConfigResp::MergeFrom(const SetMemConfigResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetMemConfigResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMemConfigResp::CopyFrom(const SetMemConfigResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetMemConfigResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMemConfigResp::IsInitialized() const {
  return true;
}

void SetMemConfigResp::InternalSwap(SetMemConfigResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMemConfigResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[31]);
}

// ===================================================================

class SetFieldInfoReq::_Internal {
 public:
};

SetFieldInfoReq::SetFieldInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fdinfos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetFieldInfoReq)
}
SetFieldInfoReq::SetFieldInfoReq(const SetFieldInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fdinfos_(from.fdinfos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matcherid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
  // @@protoc_insertion_point(copy_constructor:rp4.SetFieldInfoReq)
}

void SetFieldInfoReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matcherid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
}

SetFieldInfoReq::~SetFieldInfoReq() {
  // @@protoc_insertion_point(destructor:rp4.SetFieldInfoReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetFieldInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetFieldInfoReq::ArenaDtor(void* object) {
  SetFieldInfoReq* _this = reinterpret_cast< SetFieldInfoReq* >(object);
  (void)_this;
}
void SetFieldInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetFieldInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetFieldInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetFieldInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fdinfos_.Clear();
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matcherid_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetFieldInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rp4.FieldInfo fdInfos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fdinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetFieldInfoReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetFieldInfoReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // repeated .rp4.FieldInfo fdInfos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fdinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_fdinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetFieldInfoReq)
  return target;
}

size_t SetFieldInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetFieldInfoReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rp4.FieldInfo fdInfos = 3;
  total_size += 1UL * this->_internal_fdinfos_size();
  for (const auto& msg : this->fdinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetFieldInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetFieldInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetFieldInfoReq::GetClassData() const { return &_class_data_; }

void SetFieldInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetFieldInfoReq *>(to)->MergeFrom(
      static_cast<const SetFieldInfoReq &>(from));
}


void SetFieldInfoReq::MergeFrom(const SetFieldInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetFieldInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fdinfos_.MergeFrom(from.fdinfos_);
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetFieldInfoReq::CopyFrom(const SetFieldInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetFieldInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFieldInfoReq::IsInitialized() const {
  return true;
}

void SetFieldInfoReq::InternalSwap(SetFieldInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fdinfos_.InternalSwap(&other->fdinfos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetFieldInfoReq, matcherid_)
      + sizeof(SetFieldInfoReq::matcherid_)
      - PROTOBUF_FIELD_OFFSET(SetFieldInfoReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetFieldInfoReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[32]);
}

// ===================================================================

class SetFieldInfoResp::_Internal {
 public:
};

SetFieldInfoResp::SetFieldInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetFieldInfoResp)
}
SetFieldInfoResp::SetFieldInfoResp(const SetFieldInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetFieldInfoResp)
}

void SetFieldInfoResp::SharedCtor() {
res_ = 0;
}

SetFieldInfoResp::~SetFieldInfoResp() {
  // @@protoc_insertion_point(destructor:rp4.SetFieldInfoResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetFieldInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetFieldInfoResp::ArenaDtor(void* object) {
  SetFieldInfoResp* _this = reinterpret_cast< SetFieldInfoResp* >(object);
  (void)_this;
}
void SetFieldInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetFieldInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetFieldInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetFieldInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetFieldInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetFieldInfoResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetFieldInfoResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetFieldInfoResp)
  return target;
}

size_t SetFieldInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetFieldInfoResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetFieldInfoResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetFieldInfoResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetFieldInfoResp::GetClassData() const { return &_class_data_; }

void SetFieldInfoResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetFieldInfoResp *>(to)->MergeFrom(
      static_cast<const SetFieldInfoResp &>(from));
}


void SetFieldInfoResp::MergeFrom(const SetFieldInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetFieldInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetFieldInfoResp::CopyFrom(const SetFieldInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetFieldInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetFieldInfoResp::IsInitialized() const {
  return true;
}

void SetFieldInfoResp::InternalSwap(SetFieldInfoResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetFieldInfoResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[33]);
}

// ===================================================================

class InsertSramEntryReq::_Internal {
 public:
};

InsertSramEntryReq::InsertSramEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertSramEntryReq)
}
InsertSramEntryReq::InsertSramEntryReq(const InsertSramEntryReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_byte_len_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(value_byte_len_));
  // @@protoc_insertion_point(copy_constructor:rp4.InsertSramEntryReq)
}

void InsertSramEntryReq::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_byte_len_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(value_byte_len_));
}

InsertSramEntryReq::~InsertSramEntryReq() {
  // @@protoc_insertion_point(destructor:rp4.InsertSramEntryReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertSramEntryReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertSramEntryReq::ArenaDtor(void* object) {
  InsertSramEntryReq* _this = reinterpret_cast< InsertSramEntryReq* >(object);
  (void)_this;
}
void InsertSramEntryReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertSramEntryReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertSramEntryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertSramEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_byte_len_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(value_byte_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertSramEntryReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 key_byte_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          key_byte_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value_byte_len = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          value_byte_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertSramEntryReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertSramEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_value(), target);
  }

  // int32 key_byte_len = 5;
  if (this->_internal_key_byte_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_key_byte_len(), target);
  }

  // int32 value_byte_len = 6;
  if (this->_internal_value_byte_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_value_byte_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertSramEntryReq)
  return target;
}

size_t InsertSramEntryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertSramEntryReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 4;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  // int32 key_byte_len = 5;
  if (this->_internal_key_byte_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key_byte_len());
  }

  // int32 value_byte_len = 6;
  if (this->_internal_value_byte_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value_byte_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertSramEntryReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertSramEntryReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertSramEntryReq::GetClassData() const { return &_class_data_; }

void InsertSramEntryReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertSramEntryReq *>(to)->MergeFrom(
      static_cast<const InsertSramEntryReq &>(from));
}


void InsertSramEntryReq::MergeFrom(const InsertSramEntryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertSramEntryReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  if (from._internal_key_byte_len() != 0) {
    _internal_set_key_byte_len(from._internal_key_byte_len());
  }
  if (from._internal_value_byte_len() != 0) {
    _internal_set_value_byte_len(from._internal_value_byte_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertSramEntryReq::CopyFrom(const InsertSramEntryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertSramEntryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertSramEntryReq::IsInitialized() const {
  return true;
}

void InsertSramEntryReq::InternalSwap(InsertSramEntryReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertSramEntryReq, value_byte_len_)
      + sizeof(InsertSramEntryReq::value_byte_len_)
      - PROTOBUF_FIELD_OFFSET(InsertSramEntryReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertSramEntryReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[34]);
}

// ===================================================================

class InsertSramEntryResp::_Internal {
 public:
};

InsertSramEntryResp::InsertSramEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertSramEntryResp)
}
InsertSramEntryResp::InsertSramEntryResp(const InsertSramEntryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.InsertSramEntryResp)
}

void InsertSramEntryResp::SharedCtor() {
res_ = 0;
}

InsertSramEntryResp::~InsertSramEntryResp() {
  // @@protoc_insertion_point(destructor:rp4.InsertSramEntryResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertSramEntryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InsertSramEntryResp::ArenaDtor(void* object) {
  InsertSramEntryResp* _this = reinterpret_cast< InsertSramEntryResp* >(object);
  (void)_this;
}
void InsertSramEntryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertSramEntryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertSramEntryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertSramEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertSramEntryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertSramEntryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertSramEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertSramEntryResp)
  return target;
}

size_t InsertSramEntryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertSramEntryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertSramEntryResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertSramEntryResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertSramEntryResp::GetClassData() const { return &_class_data_; }

void InsertSramEntryResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertSramEntryResp *>(to)->MergeFrom(
      static_cast<const InsertSramEntryResp &>(from));
}


void InsertSramEntryResp::MergeFrom(const InsertSramEntryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertSramEntryResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertSramEntryResp::CopyFrom(const InsertSramEntryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertSramEntryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertSramEntryResp::IsInitialized() const {
  return true;
}

void InsertSramEntryResp::InternalSwap(InsertSramEntryResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertSramEntryResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[35]);
}

// ===================================================================

class InsertTcamEntryReq::_Internal {
 public:
};

InsertTcamEntryReq::InsertTcamEntryReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertTcamEntryReq)
}
InsertTcamEntryReq::InsertTcamEntryReq(const InsertTcamEntryReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mask().empty()) {
    mask_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mask(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_byte_len_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(value_byte_len_));
  // @@protoc_insertion_point(copy_constructor:rp4.InsertTcamEntryReq)
}

void InsertTcamEntryReq::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_byte_len_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(value_byte_len_));
}

InsertTcamEntryReq::~InsertTcamEntryReq() {
  // @@protoc_insertion_point(destructor:rp4.InsertTcamEntryReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertTcamEntryReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertTcamEntryReq::ArenaDtor(void* object) {
  InsertTcamEntryReq* _this = reinterpret_cast< InsertTcamEntryReq* >(object);
  (void)_this;
}
void InsertTcamEntryReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertTcamEntryReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertTcamEntryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertTcamEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  mask_.ClearToEmpty();
  value_.ClearToEmpty();
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_byte_len_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(value_byte_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertTcamEntryReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 key_byte_len = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          key_byte_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 value_byte_len = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          value_byte_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertTcamEntryReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertTcamEntryReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_key(), target);
  }

  // bytes mask = 4;
  if (!this->_internal_mask().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mask(), target);
  }

  // bytes value = 5;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_value(), target);
  }

  // int32 key_byte_len = 6;
  if (this->_internal_key_byte_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_key_byte_len(), target);
  }

  // int32 value_byte_len = 7;
  if (this->_internal_value_byte_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_value_byte_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertTcamEntryReq)
  return target;
}

size_t InsertTcamEntryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertTcamEntryReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes mask = 4;
  if (!this->_internal_mask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mask());
  }

  // bytes value = 5;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  // int32 key_byte_len = 6;
  if (this->_internal_key_byte_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_key_byte_len());
  }

  // int32 value_byte_len = 7;
  if (this->_internal_value_byte_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value_byte_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertTcamEntryReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertTcamEntryReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertTcamEntryReq::GetClassData() const { return &_class_data_; }

void InsertTcamEntryReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertTcamEntryReq *>(to)->MergeFrom(
      static_cast<const InsertTcamEntryReq &>(from));
}


void InsertTcamEntryReq::MergeFrom(const InsertTcamEntryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertTcamEntryReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_mask().empty()) {
    _internal_set_mask(from._internal_mask());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  if (from._internal_key_byte_len() != 0) {
    _internal_set_key_byte_len(from._internal_key_byte_len());
  }
  if (from._internal_value_byte_len() != 0) {
    _internal_set_value_byte_len(from._internal_value_byte_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertTcamEntryReq::CopyFrom(const InsertTcamEntryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertTcamEntryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertTcamEntryReq::IsInitialized() const {
  return true;
}

void InsertTcamEntryReq::InternalSwap(InsertTcamEntryReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mask_, lhs_arena,
      &other->mask_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertTcamEntryReq, value_byte_len_)
      + sizeof(InsertTcamEntryReq::value_byte_len_)
      - PROTOBUF_FIELD_OFFSET(InsertTcamEntryReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertTcamEntryReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[36]);
}

// ===================================================================

class InsertTcamEntryResp::_Internal {
 public:
};

InsertTcamEntryResp::InsertTcamEntryResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertTcamEntryResp)
}
InsertTcamEntryResp::InsertTcamEntryResp(const InsertTcamEntryResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.InsertTcamEntryResp)
}

void InsertTcamEntryResp::SharedCtor() {
res_ = 0;
}

InsertTcamEntryResp::~InsertTcamEntryResp() {
  // @@protoc_insertion_point(destructor:rp4.InsertTcamEntryResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertTcamEntryResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InsertTcamEntryResp::ArenaDtor(void* object) {
  InsertTcamEntryResp* _this = reinterpret_cast< InsertTcamEntryResp* >(object);
  (void)_this;
}
void InsertTcamEntryResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertTcamEntryResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertTcamEntryResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertTcamEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertTcamEntryResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertTcamEntryResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertTcamEntryResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertTcamEntryResp)
  return target;
}

size_t InsertTcamEntryResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertTcamEntryResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertTcamEntryResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertTcamEntryResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertTcamEntryResp::GetClassData() const { return &_class_data_; }

void InsertTcamEntryResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertTcamEntryResp *>(to)->MergeFrom(
      static_cast<const InsertTcamEntryResp &>(from));
}


void InsertTcamEntryResp::MergeFrom(const InsertTcamEntryResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertTcamEntryResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertTcamEntryResp::CopyFrom(const InsertTcamEntryResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertTcamEntryResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertTcamEntryResp::IsInitialized() const {
  return true;
}

void InsertTcamEntryResp::InternalSwap(InsertTcamEntryResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertTcamEntryResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[37]);
}

// ===================================================================

class ClearOldConfigReq::_Internal {
 public:
};

ClearOldConfigReq::ClearOldConfigReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearOldConfigReq)
}
ClearOldConfigReq::ClearOldConfigReq(const ClearOldConfigReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matcherid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
  // @@protoc_insertion_point(copy_constructor:rp4.ClearOldConfigReq)
}

void ClearOldConfigReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&matcherid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
}

ClearOldConfigReq::~ClearOldConfigReq() {
  // @@protoc_insertion_point(destructor:rp4.ClearOldConfigReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearOldConfigReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearOldConfigReq::ArenaDtor(void* object) {
  ClearOldConfigReq* _this = reinterpret_cast< ClearOldConfigReq* >(object);
  (void)_this;
}
void ClearOldConfigReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearOldConfigReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearOldConfigReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearOldConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matcherid_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(matcherid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearOldConfigReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearOldConfigReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearOldConfigReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearOldConfigReq)
  return target;
}

size_t ClearOldConfigReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearOldConfigReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearOldConfigReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearOldConfigReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearOldConfigReq::GetClassData() const { return &_class_data_; }

void ClearOldConfigReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearOldConfigReq *>(to)->MergeFrom(
      static_cast<const ClearOldConfigReq &>(from));
}


void ClearOldConfigReq::MergeFrom(const ClearOldConfigReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearOldConfigReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearOldConfigReq::CopyFrom(const ClearOldConfigReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearOldConfigReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearOldConfigReq::IsInitialized() const {
  return true;
}

void ClearOldConfigReq::InternalSwap(ClearOldConfigReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearOldConfigReq, matcherid_)
      + sizeof(ClearOldConfigReq::matcherid_)
      - PROTOBUF_FIELD_OFFSET(ClearOldConfigReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearOldConfigReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[38]);
}

// ===================================================================

class ClearOldConfigResp::_Internal {
 public:
};

ClearOldConfigResp::ClearOldConfigResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearOldConfigResp)
}
ClearOldConfigResp::ClearOldConfigResp(const ClearOldConfigResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearOldConfigResp)
}

void ClearOldConfigResp::SharedCtor() {
res_ = 0;
}

ClearOldConfigResp::~ClearOldConfigResp() {
  // @@protoc_insertion_point(destructor:rp4.ClearOldConfigResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearOldConfigResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearOldConfigResp::ArenaDtor(void* object) {
  ClearOldConfigResp* _this = reinterpret_cast< ClearOldConfigResp* >(object);
  (void)_this;
}
void ClearOldConfigResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearOldConfigResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearOldConfigResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearOldConfigResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearOldConfigResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearOldConfigResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearOldConfigResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearOldConfigResp)
  return target;
}

size_t ClearOldConfigResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearOldConfigResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearOldConfigResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearOldConfigResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearOldConfigResp::GetClassData() const { return &_class_data_; }

void ClearOldConfigResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearOldConfigResp *>(to)->MergeFrom(
      static_cast<const ClearOldConfigResp &>(from));
}


void ClearOldConfigResp::MergeFrom(const ClearOldConfigResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearOldConfigResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearOldConfigResp::CopyFrom(const ClearOldConfigResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearOldConfigResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearOldConfigResp::IsInitialized() const {
  return true;
}

void ClearOldConfigResp::InternalSwap(ClearOldConfigResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearOldConfigResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[39]);
}

// ===================================================================

class SetMissActIdReq::_Internal {
 public:
};

SetMissActIdReq::SetMissActIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetMissActIdReq)
}
SetMissActIdReq::SetMissActIdReq(const SetMissActIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&miss_act_id_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(miss_act_id_));
  // @@protoc_insertion_point(copy_constructor:rp4.SetMissActIdReq)
}

void SetMissActIdReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&miss_act_id_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(miss_act_id_));
}

SetMissActIdReq::~SetMissActIdReq() {
  // @@protoc_insertion_point(destructor:rp4.SetMissActIdReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetMissActIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMissActIdReq::ArenaDtor(void* object) {
  SetMissActIdReq* _this = reinterpret_cast< SetMissActIdReq* >(object);
  (void)_this;
}
void SetMissActIdReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMissActIdReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMissActIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetMissActIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_act_id_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(miss_act_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMissActIdReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 matcherId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          matcherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 miss_act_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          miss_act_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMissActIdReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetMissActIdReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_matcherid(), target);
  }

  // int32 miss_act_id = 3;
  if (this->_internal_miss_act_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_miss_act_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetMissActIdReq)
  return target;
}

size_t SetMissActIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetMissActIdReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 matcherId = 2;
  if (this->_internal_matcherid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_matcherid());
  }

  // int32 miss_act_id = 3;
  if (this->_internal_miss_act_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_miss_act_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMissActIdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMissActIdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMissActIdReq::GetClassData() const { return &_class_data_; }

void SetMissActIdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMissActIdReq *>(to)->MergeFrom(
      static_cast<const SetMissActIdReq &>(from));
}


void SetMissActIdReq::MergeFrom(const SetMissActIdReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetMissActIdReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_matcherid() != 0) {
    _internal_set_matcherid(from._internal_matcherid());
  }
  if (from._internal_miss_act_id() != 0) {
    _internal_set_miss_act_id(from._internal_miss_act_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMissActIdReq::CopyFrom(const SetMissActIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetMissActIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMissActIdReq::IsInitialized() const {
  return true;
}

void SetMissActIdReq::InternalSwap(SetMissActIdReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMissActIdReq, miss_act_id_)
      + sizeof(SetMissActIdReq::miss_act_id_)
      - PROTOBUF_FIELD_OFFSET(SetMissActIdReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMissActIdReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[40]);
}

// ===================================================================

class SetMissActIdResp::_Internal {
 public:
};

SetMissActIdResp::SetMissActIdResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.SetMissActIdResp)
}
SetMissActIdResp::SetMissActIdResp(const SetMissActIdResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.SetMissActIdResp)
}

void SetMissActIdResp::SharedCtor() {
res_ = 0;
}

SetMissActIdResp::~SetMissActIdResp() {
  // @@protoc_insertion_point(destructor:rp4.SetMissActIdResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetMissActIdResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetMissActIdResp::ArenaDtor(void* object) {
  SetMissActIdResp* _this = reinterpret_cast< SetMissActIdResp* >(object);
  (void)_this;
}
void SetMissActIdResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMissActIdResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetMissActIdResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.SetMissActIdResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMissActIdResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMissActIdResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.SetMissActIdResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.SetMissActIdResp)
  return target;
}

size_t SetMissActIdResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.SetMissActIdResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMissActIdResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetMissActIdResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMissActIdResp::GetClassData() const { return &_class_data_; }

void SetMissActIdResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetMissActIdResp *>(to)->MergeFrom(
      static_cast<const SetMissActIdResp &>(from));
}


void SetMissActIdResp::MergeFrom(const SetMissActIdResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.SetMissActIdResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMissActIdResp::CopyFrom(const SetMissActIdResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.SetMissActIdResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMissActIdResp::IsInitialized() const {
  return true;
}

void SetMissActIdResp::InternalSwap(SetMissActIdResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMissActIdResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[41]);
}

// ===================================================================

class Parameter::_Internal {
 public:
  static const ::rp4::FieldInfo& field(const Parameter* msg);
  static const ::rp4::Data& constantdata(const Parameter* msg);
};

const ::rp4::FieldInfo&
Parameter::_Internal::field(const Parameter* msg) {
  return *msg->val_.field_;
}
const ::rp4::Data&
Parameter::_Internal::constantdata(const Parameter* msg) {
  return *msg->val_.constantdata_;
}
void Parameter::set_allocated_field(::rp4::FieldInfo* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_val();
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rp4::FieldInfo>::GetOwningArena(field);
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    set_has_field();
    val_.field_ = field;
  }
  // @@protoc_insertion_point(field_set_allocated:rp4.Parameter.field)
}
void Parameter::set_allocated_constantdata(::rp4::Data* constantdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_val();
  if (constantdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::rp4::Data>::GetOwningArena(constantdata);
    if (message_arena != submessage_arena) {
      constantdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constantdata, submessage_arena);
    }
    set_has_constantdata();
    val_.constantdata_ = constantdata;
  }
  // @@protoc_insertion_point(field_set_allocated:rp4.Parameter.constantData)
}
Parameter::Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_val();
  switch (from.val_case()) {
    case kHdrId: {
      _internal_set_hdrid(from._internal_hdrid());
      break;
    }
    case kField: {
      _internal_mutable_field()->::rp4::FieldInfo::MergeFrom(from._internal_field());
      break;
    }
    case kConstantData: {
      _internal_mutable_constantdata()->::rp4::Data::MergeFrom(from._internal_constantdata());
      break;
    }
    case kActionParaId: {
      _internal_set_actionparaid(from._internal_actionparaid());
      break;
    }
    case kOp: {
      _internal_set_op(from._internal_op());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rp4.Parameter)
}

void Parameter::SharedCtor() {
type_ = 0;
clear_has_val();
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:rp4.Parameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_val()) {
    clear_val();
  }
}

void Parameter::ArenaDtor(void* object) {
  Parameter* _this = reinterpret_cast< Parameter* >(object);
  (void)_this;
}
void Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter::clear_val() {
// @@protoc_insertion_point(one_of_clear_start:rp4.Parameter)
  switch (val_case()) {
    case kHdrId: {
      // No need to clear
      break;
    }
    case kField: {
      if (GetArenaForAllocation() == nullptr) {
        delete val_.field_;
      }
      break;
    }
    case kConstantData: {
      if (GetArenaForAllocation() == nullptr) {
        delete val_.constantdata_;
      }
      break;
    }
    case kActionParaId: {
      // No need to clear
      break;
    }
    case kOp: {
      // No need to clear
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VAL_NOT_SET;
}


void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_val();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.ParameterType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::rp4::ParameterType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 hdrId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_hdrid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.FieldInfo field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.Data constantData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_constantdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 actionParaId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_actionparaid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.OpCode op = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::rp4::OpCode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.ParameterType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 hdrId = 2;
  if (_internal_has_hdrid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hdrid(), target);
  }

  // .rp4.FieldInfo field = 3;
  if (_internal_has_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::field(this), target, stream);
  }

  // .rp4.Data constantData = 4;
  if (_internal_has_constantdata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::constantdata(this), target, stream);
  }

  // int32 actionParaId = 5;
  if (_internal_has_actionparaid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_actionparaid(), target);
  }

  // .rp4.OpCode op = 6;
  if (_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_op(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.Parameter)
  return target;
}

size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.ParameterType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (val_case()) {
    // int32 hdrId = 2;
    case kHdrId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hdrid());
      break;
    }
    // .rp4.FieldInfo field = 3;
    case kField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *val_.field_);
      break;
    }
    // .rp4.Data constantData = 4;
    case kConstantData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *val_.constantdata_);
      break;
    }
    // int32 actionParaId = 5;
    case kActionParaId: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actionparaid());
      break;
    }
    // .rp4.OpCode op = 6;
    case kOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameter::GetClassData() const { return &_class_data_; }

void Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parameter *>(to)->MergeFrom(
      static_cast<const Parameter &>(from));
}


void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.val_case()) {
    case kHdrId: {
      _internal_set_hdrid(from._internal_hdrid());
      break;
    }
    case kField: {
      _internal_mutable_field()->::rp4::FieldInfo::MergeFrom(from._internal_field());
      break;
    }
    case kConstantData: {
      _internal_mutable_constantdata()->::rp4::Data::MergeFrom(from._internal_constantdata());
      break;
    }
    case kActionParaId: {
      _internal_set_actionparaid(from._internal_actionparaid());
      break;
    }
    case kOp: {
      _internal_set_op(from._internal_op());
      break;
    }
    case VAL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(val_, other->val_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[42]);
}

// ===================================================================

class ExpTreeNode::_Internal {
 public:
  static const ::rp4::Parameter& opt(const ExpTreeNode* msg);
  static const ::rp4::ExpTreeNode& left(const ExpTreeNode* msg);
  static const ::rp4::ExpTreeNode& right(const ExpTreeNode* msg);
};

const ::rp4::Parameter&
ExpTreeNode::_Internal::opt(const ExpTreeNode* msg) {
  return *msg->opt_;
}
const ::rp4::ExpTreeNode&
ExpTreeNode::_Internal::left(const ExpTreeNode* msg) {
  return *msg->left_;
}
const ::rp4::ExpTreeNode&
ExpTreeNode::_Internal::right(const ExpTreeNode* msg) {
  return *msg->right_;
}
ExpTreeNode::ExpTreeNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ExpTreeNode)
}
ExpTreeNode::ExpTreeNode(const ExpTreeNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_opt()) {
    opt_ = new ::rp4::Parameter(*from.opt_);
  } else {
    opt_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::rp4::ExpTreeNode(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::rp4::ExpTreeNode(*from.right_);
  } else {
    right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rp4.ExpTreeNode)
}

void ExpTreeNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&opt_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&opt_)) + sizeof(right_));
}

ExpTreeNode::~ExpTreeNode() {
  // @@protoc_insertion_point(destructor:rp4.ExpTreeNode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExpTreeNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete opt_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void ExpTreeNode::ArenaDtor(void* object) {
  ExpTreeNode* _this = reinterpret_cast< ExpTreeNode* >(object);
  (void)_this;
}
void ExpTreeNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpTreeNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpTreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ExpTreeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && opt_ != nullptr) {
    delete opt_;
  }
  opt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpTreeNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Parameter opt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_opt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.ExpTreeNode left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.ExpTreeNode right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpTreeNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ExpTreeNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Parameter opt = 1;
  if (this->_internal_has_opt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::opt(this), target, stream);
  }

  // .rp4.ExpTreeNode left = 2;
  if (this->_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .rp4.ExpTreeNode right = 3;
  if (this->_internal_has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ExpTreeNode)
  return target;
}

size_t ExpTreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ExpTreeNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Parameter opt = 1;
  if (this->_internal_has_opt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *opt_);
  }

  // .rp4.ExpTreeNode left = 2;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .rp4.ExpTreeNode right = 3;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpTreeNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExpTreeNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpTreeNode::GetClassData() const { return &_class_data_; }

void ExpTreeNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExpTreeNode *>(to)->MergeFrom(
      static_cast<const ExpTreeNode &>(from));
}


void ExpTreeNode::MergeFrom(const ExpTreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ExpTreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_opt()) {
    _internal_mutable_opt()->::rp4::Parameter::MergeFrom(from._internal_opt());
  }
  if (from._internal_has_left()) {
    _internal_mutable_left()->::rp4::ExpTreeNode::MergeFrom(from._internal_left());
  }
  if (from._internal_has_right()) {
    _internal_mutable_right()->::rp4::ExpTreeNode::MergeFrom(from._internal_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpTreeNode::CopyFrom(const ExpTreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ExpTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpTreeNode::IsInitialized() const {
  return true;
}

void ExpTreeNode::InternalSwap(ExpTreeNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpTreeNode, right_)
      + sizeof(ExpTreeNode::right_)
      - PROTOBUF_FIELD_OFFSET(ExpTreeNode, opt_)>(
          reinterpret_cast<char*>(&opt_),
          reinterpret_cast<char*>(&other->opt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpTreeNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[43]);
}

// ===================================================================

class Prim::_Internal {
 public:
  static const ::rp4::FieldInfo& lvalue(const Prim* msg);
  static const ::rp4::ExpTreeNode& root(const Prim* msg);
};

const ::rp4::FieldInfo&
Prim::_Internal::lvalue(const Prim* msg) {
  return *msg->lvalue_;
}
const ::rp4::ExpTreeNode&
Prim::_Internal::root(const Prim* msg) {
  return *msg->root_;
}
Prim::Prim(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.Prim)
}
Prim::Prim(const Prim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lvalue()) {
    lvalue_ = new ::rp4::FieldInfo(*from.lvalue_);
  } else {
    lvalue_ = nullptr;
  }
  if (from._internal_has_root()) {
    root_ = new ::rp4::ExpTreeNode(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rp4.Prim)
}

void Prim::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lvalue_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&root_) -
    reinterpret_cast<char*>(&lvalue_)) + sizeof(root_));
}

Prim::~Prim() {
  // @@protoc_insertion_point(destructor:rp4.Prim)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Prim::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lvalue_;
  if (this != internal_default_instance()) delete root_;
}

void Prim::ArenaDtor(void* object) {
  Prim* _this = reinterpret_cast< Prim* >(object);
  (void)_this;
}
void Prim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Prim::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.Prim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && lvalue_ != nullptr) {
    delete lvalue_;
  }
  lvalue_ = nullptr;
  if (GetArenaForAllocation() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.FieldInfo lvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.ExpTreeNode root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.Prim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.FieldInfo lvalue = 1;
  if (this->_internal_has_lvalue()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lvalue(this), target, stream);
  }

  // .rp4.ExpTreeNode root = 2;
  if (this->_internal_has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::root(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.Prim)
  return target;
}

size_t Prim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.Prim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.FieldInfo lvalue = 1;
  if (this->_internal_has_lvalue()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lvalue_);
  }

  // .rp4.ExpTreeNode root = 2;
  if (this->_internal_has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Prim::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Prim::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Prim::GetClassData() const { return &_class_data_; }

void Prim::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Prim *>(to)->MergeFrom(
      static_cast<const Prim &>(from));
}


void Prim::MergeFrom(const Prim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.Prim)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lvalue()) {
    _internal_mutable_lvalue()->::rp4::FieldInfo::MergeFrom(from._internal_lvalue());
  }
  if (from._internal_has_root()) {
    _internal_mutable_root()->::rp4::ExpTreeNode::MergeFrom(from._internal_root());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Prim::CopyFrom(const Prim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.Prim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prim::IsInitialized() const {
  return true;
}

void Prim::InternalSwap(Prim* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prim, root_)
      + sizeof(Prim::root_)
      - PROTOBUF_FIELD_OFFSET(Prim, lvalue_)>(
          reinterpret_cast<char*>(&lvalue_),
          reinterpret_cast<char*>(&other->lvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prim::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[44]);
}

// ===================================================================

class Action::_Internal {
 public:
};

Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  prims_(arena),
  actionparalens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prims_(from.prims_),
      actionparalens_(from.actionparalens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paranum_ = from.paranum_;
  // @@protoc_insertion_point(copy_constructor:rp4.Action)
}

void Action::SharedCtor() {
paranum_ = 0;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:rp4.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prims_.Clear();
  actionparalens_.Clear();
  paranum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 paraNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          paranum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rp4.Prim prims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prims(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 actionParaLens = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_actionparalens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_actionparalens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 paraNum = 1;
  if (this->_internal_paranum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_paranum(), target);
  }

  // repeated .rp4.Prim prims = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prims_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_prims(i), target, stream);
  }

  // repeated int32 actionParaLens = 4;
  {
    int byte_size = _actionparalens_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_actionparalens(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rp4.Prim prims = 2;
  total_size += 1UL * this->_internal_prims_size();
  for (const auto& msg : this->prims_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 actionParaLens = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->actionparalens_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actionparalens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 paraNum = 1;
  if (this->_internal_paranum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_paranum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.Action)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prims_.MergeFrom(from.prims_);
  actionparalens_.MergeFrom(from.actionparalens_);
  if (from._internal_paranum() != 0) {
    _internal_set_paranum(from._internal_paranum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  prims_.InternalSwap(&other->prims_);
  actionparalens_.InternalSwap(&other->actionparalens_);
  swap(paranum_, other->paranum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[45]);
}

// ===================================================================

class InsertActionReq::_Internal {
 public:
  static const ::rp4::Action& action(const InsertActionReq* msg);
};

const ::rp4::Action&
InsertActionReq::_Internal::action(const InsertActionReq* msg) {
  return *msg->action_;
}
InsertActionReq::InsertActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertActionReq)
}
InsertActionReq::InsertActionReq(const InsertActionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::rp4::Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:rp4.InsertActionReq)
}

void InsertActionReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&action_)) + sizeof(actionid_));
}

InsertActionReq::~InsertActionReq() {
  // @@protoc_insertion_point(destructor:rp4.InsertActionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertActionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void InsertActionReq::ArenaDtor(void* object) {
  InsertActionReq* _this = reinterpret_cast< InsertActionReq* >(object);
  (void)_this;
}
void InsertActionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertActionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertActionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(actionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertActionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rp4.Action action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 actionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertActionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertActionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // .rp4.Action action = 2;
  if (this->_internal_has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::action(this), target, stream);
  }

  // int32 actionId = 3;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertActionReq)
  return target;
}

size_t InsertActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertActionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Action action = 2;
  if (this->_internal_has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 actionId = 3;
  if (this->_internal_actionid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertActionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertActionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertActionReq::GetClassData() const { return &_class_data_; }

void InsertActionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertActionReq *>(to)->MergeFrom(
      static_cast<const InsertActionReq &>(from));
}


void InsertActionReq::MergeFrom(const InsertActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_action()) {
    _internal_mutable_action()->::rp4::Action::MergeFrom(from._internal_action());
  }
  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertActionReq::CopyFrom(const InsertActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertActionReq::IsInitialized() const {
  return true;
}

void InsertActionReq::InternalSwap(InsertActionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertActionReq, actionid_)
      + sizeof(InsertActionReq::actionid_)
      - PROTOBUF_FIELD_OFFSET(InsertActionReq, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertActionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[46]);
}

// ===================================================================

class InsertActionResp::_Internal {
 public:
};

InsertActionResp::InsertActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.InsertActionResp)
}
InsertActionResp::InsertActionResp(const InsertActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.InsertActionResp)
}

void InsertActionResp::SharedCtor() {
res_ = 0;
}

InsertActionResp::~InsertActionResp() {
  // @@protoc_insertion_point(destructor:rp4.InsertActionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InsertActionResp::ArenaDtor(void* object) {
  InsertActionResp* _this = reinterpret_cast< InsertActionResp* >(object);
  (void)_this;
}
void InsertActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.InsertActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.InsertActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.InsertActionResp)
  return target;
}

size_t InsertActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.InsertActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertActionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertActionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertActionResp::GetClassData() const { return &_class_data_; }

void InsertActionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertActionResp *>(to)->MergeFrom(
      static_cast<const InsertActionResp &>(from));
}


void InsertActionResp::MergeFrom(const InsertActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.InsertActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertActionResp::CopyFrom(const InsertActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.InsertActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertActionResp::IsInitialized() const {
  return true;
}

void InsertActionResp::InternalSwap(InsertActionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertActionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[47]);
}

// ===================================================================

class ClearActionReq::_Internal {
 public:
};

ClearActionReq::ClearActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearActionReq)
}
ClearActionReq::ClearActionReq(const ClearActionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  procid_ = from.procid_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearActionReq)
}

void ClearActionReq::SharedCtor() {
procid_ = 0;
}

ClearActionReq::~ClearActionReq() {
  // @@protoc_insertion_point(destructor:rp4.ClearActionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearActionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearActionReq::ArenaDtor(void* object) {
  ClearActionReq* _this = reinterpret_cast< ClearActionReq* >(object);
  (void)_this;
}
void ClearActionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearActionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearActionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  procid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearActionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearActionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearActionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearActionReq)
  return target;
}

size_t ClearActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearActionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearActionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearActionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearActionReq::GetClassData() const { return &_class_data_; }

void ClearActionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearActionReq *>(to)->MergeFrom(
      static_cast<const ClearActionReq &>(from));
}


void ClearActionReq::MergeFrom(const ClearActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearActionReq::CopyFrom(const ClearActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearActionReq::IsInitialized() const {
  return true;
}

void ClearActionReq::InternalSwap(ClearActionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(procid_, other->procid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearActionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[48]);
}

// ===================================================================

class ClearActionResp::_Internal {
 public:
};

ClearActionResp::ClearActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.ClearActionResp)
}
ClearActionResp::ClearActionResp(const ClearActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.ClearActionResp)
}

void ClearActionResp::SharedCtor() {
res_ = 0;
}

ClearActionResp::~ClearActionResp() {
  // @@protoc_insertion_point(destructor:rp4.ClearActionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClearActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClearActionResp::ArenaDtor(void* object) {
  ClearActionResp* _this = reinterpret_cast< ClearActionResp* >(object);
  (void)_this;
}
void ClearActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClearActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.ClearActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.ClearActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.ClearActionResp)
  return target;
}

size_t ClearActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.ClearActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClearActionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClearActionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClearActionResp::GetClassData() const { return &_class_data_; }

void ClearActionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClearActionResp *>(to)->MergeFrom(
      static_cast<const ClearActionResp &>(from));
}


void ClearActionResp::MergeFrom(const ClearActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.ClearActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClearActionResp::CopyFrom(const ClearActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.ClearActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearActionResp::IsInitialized() const {
  return true;
}

void ClearActionResp::InternalSwap(ClearActionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearActionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[49]);
}

// ===================================================================

class DelActionReq::_Internal {
 public:
};

DelActionReq::DelActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.DelActionReq)
}
DelActionReq::DelActionReq(const DelActionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&procid_, &from.procid_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(actionid_));
  // @@protoc_insertion_point(copy_constructor:rp4.DelActionReq)
}

void DelActionReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&procid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&procid_)) + sizeof(actionid_));
}

DelActionReq::~DelActionReq() {
  // @@protoc_insertion_point(destructor:rp4.DelActionReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelActionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelActionReq::ArenaDtor(void* object) {
  DelActionReq* _this = reinterpret_cast< DelActionReq* >(object);
  (void)_this;
}
void DelActionReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelActionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.DelActionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&procid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actionid_) -
      reinterpret_cast<char*>(&procid_)) + sizeof(actionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelActionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 procId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          procid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 actionId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelActionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.DelActionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_procid(), target);
  }

  // int32 actionId = 2;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_actionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.DelActionReq)
  return target;
}

size_t DelActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.DelActionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 procId = 1;
  if (this->_internal_procid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_procid());
  }

  // int32 actionId = 2;
  if (this->_internal_actionid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelActionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelActionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelActionReq::GetClassData() const { return &_class_data_; }

void DelActionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelActionReq *>(to)->MergeFrom(
      static_cast<const DelActionReq &>(from));
}


void DelActionReq::MergeFrom(const DelActionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.DelActionReq)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_procid() != 0) {
    _internal_set_procid(from._internal_procid());
  }
  if (from._internal_actionid() != 0) {
    _internal_set_actionid(from._internal_actionid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelActionReq::CopyFrom(const DelActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.DelActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelActionReq::IsInitialized() const {
  return true;
}

void DelActionReq::InternalSwap(DelActionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelActionReq, actionid_)
      + sizeof(DelActionReq::actionid_)
      - PROTOBUF_FIELD_OFFSET(DelActionReq, procid_)>(
          reinterpret_cast<char*>(&procid_),
          reinterpret_cast<char*>(&other->procid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelActionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[50]);
}

// ===================================================================

class DelActionResp::_Internal {
 public:
};

DelActionResp::DelActionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rp4.DelActionResp)
}
DelActionResp::DelActionResp(const DelActionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  res_ = from.res_;
  // @@protoc_insertion_point(copy_constructor:rp4.DelActionResp)
}

void DelActionResp::SharedCtor() {
res_ = 0;
}

DelActionResp::~DelActionResp() {
  // @@protoc_insertion_point(destructor:rp4.DelActionResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DelActionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DelActionResp::ArenaDtor(void* object) {
  DelActionResp* _this = reinterpret_cast< DelActionResp* >(object);
  (void)_this;
}
void DelActionResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DelActionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DelActionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:rp4.DelActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  res_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelActionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rp4.Res res = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_res(static_cast<::rp4::Res>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DelActionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rp4.DelActionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_res(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rp4.DelActionResp)
  return target;
}

size_t DelActionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rp4.DelActionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rp4.Res res = 1;
  if (this->_internal_res() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_res());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelActionResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DelActionResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelActionResp::GetClassData() const { return &_class_data_; }

void DelActionResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DelActionResp *>(to)->MergeFrom(
      static_cast<const DelActionResp &>(from));
}


void DelActionResp::MergeFrom(const DelActionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rp4.DelActionResp)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_res() != 0) {
    _internal_set_res(from._internal_res());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelActionResp::CopyFrom(const DelActionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rp4.DelActionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelActionResp::IsInitialized() const {
  return true;
}

void DelActionResp::InternalSwap(DelActionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(res_, other->res_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelActionResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_controller_5fto_5fdataplane_2eproto_getter, &descriptor_table_controller_5fto_5fdataplane_2eproto_once,
      file_level_metadata_controller_5fto_5fdataplane_2eproto[51]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rp4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rp4::HeaderInfo* Arena::CreateMaybeMessage< ::rp4::HeaderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::HeaderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetMetadataReq* Arena::CreateMaybeMessage< ::rp4::SetMetadataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetMetadataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetMetadataResp* Arena::CreateMaybeMessage< ::rp4::SetMetadataResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetMetadataResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearStageReq* Arena::CreateMaybeMessage< ::rp4::ClearStageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearStageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ParserLevelReq* Arena::CreateMaybeMessage< ::rp4::ParserLevelReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ParserLevelReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ParserLevelResp* Arena::CreateMaybeMessage< ::rp4::ParserLevelResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ParserLevelResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::FieldInfo* Arena::CreateMaybeMessage< ::rp4::FieldInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::FieldInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ModParserEntryReq* Arena::CreateMaybeMessage< ::rp4::ModParserEntryReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ModParserEntryReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ModParserEntryResp* Arena::CreateMaybeMessage< ::rp4::ModParserEntryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ModParserEntryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearParserReq* Arena::CreateMaybeMessage< ::rp4::ClearParserReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearParserReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearParserResp* Arena::CreateMaybeMessage< ::rp4::ClearParserResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearParserResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::Data* Arena::CreateMaybeMessage< ::rp4::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::GateEntry* Arena::CreateMaybeMessage< ::rp4::GateEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::GateEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetDefaultGateEntryReq* Arena::CreateMaybeMessage< ::rp4::SetDefaultGateEntryReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetDefaultGateEntryReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetDefaultGateEntryResp* Arena::CreateMaybeMessage< ::rp4::SetDefaultGateEntryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetDefaultGateEntryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::GatewayParam* Arena::CreateMaybeMessage< ::rp4::GatewayParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::GatewayParam >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::RelationExp* Arena::CreateMaybeMessage< ::rp4::RelationExp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::RelationExp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertRelationExpReq* Arena::CreateMaybeMessage< ::rp4::InsertRelationExpReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertRelationExpReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertRelationExpResp* Arena::CreateMaybeMessage< ::rp4::InsertRelationExpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertRelationExpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearRelationExpReq* Arena::CreateMaybeMessage< ::rp4::ClearRelationExpReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearRelationExpReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearRelationExpResp* Arena::CreateMaybeMessage< ::rp4::ClearRelationExpResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearRelationExpResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearResMapReq* Arena::CreateMaybeMessage< ::rp4::ClearResMapReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearResMapReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearResMapResp* Arena::CreateMaybeMessage< ::rp4::ClearResMapResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearResMapResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ModResMapReq* Arena::CreateMaybeMessage< ::rp4::ModResMapReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ModResMapReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ModResMapResp* Arena::CreateMaybeMessage< ::rp4::ModResMapResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ModResMapResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetNoTableReq* Arena::CreateMaybeMessage< ::rp4::SetNoTableReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetNoTableReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetNoTableResp* Arena::CreateMaybeMessage< ::rp4::SetNoTableResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetNoTableResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ActionProc* Arena::CreateMaybeMessage< ::rp4::ActionProc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ActionProc >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetActionProcReq* Arena::CreateMaybeMessage< ::rp4::SetActionProcReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetActionProcReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetActionProcResp* Arena::CreateMaybeMessage< ::rp4::SetActionProcResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetActionProcResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetMemConfigReq* Arena::CreateMaybeMessage< ::rp4::SetMemConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetMemConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetMemConfigResp* Arena::CreateMaybeMessage< ::rp4::SetMemConfigResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetMemConfigResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetFieldInfoReq* Arena::CreateMaybeMessage< ::rp4::SetFieldInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetFieldInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetFieldInfoResp* Arena::CreateMaybeMessage< ::rp4::SetFieldInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetFieldInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertSramEntryReq* Arena::CreateMaybeMessage< ::rp4::InsertSramEntryReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertSramEntryReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertSramEntryResp* Arena::CreateMaybeMessage< ::rp4::InsertSramEntryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertSramEntryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertTcamEntryReq* Arena::CreateMaybeMessage< ::rp4::InsertTcamEntryReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertTcamEntryReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertTcamEntryResp* Arena::CreateMaybeMessage< ::rp4::InsertTcamEntryResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertTcamEntryResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearOldConfigReq* Arena::CreateMaybeMessage< ::rp4::ClearOldConfigReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearOldConfigReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearOldConfigResp* Arena::CreateMaybeMessage< ::rp4::ClearOldConfigResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearOldConfigResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetMissActIdReq* Arena::CreateMaybeMessage< ::rp4::SetMissActIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetMissActIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::SetMissActIdResp* Arena::CreateMaybeMessage< ::rp4::SetMissActIdResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::SetMissActIdResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::Parameter* Arena::CreateMaybeMessage< ::rp4::Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ExpTreeNode* Arena::CreateMaybeMessage< ::rp4::ExpTreeNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ExpTreeNode >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::Prim* Arena::CreateMaybeMessage< ::rp4::Prim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::Prim >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::Action* Arena::CreateMaybeMessage< ::rp4::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertActionReq* Arena::CreateMaybeMessage< ::rp4::InsertActionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertActionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::InsertActionResp* Arena::CreateMaybeMessage< ::rp4::InsertActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::InsertActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearActionReq* Arena::CreateMaybeMessage< ::rp4::ClearActionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearActionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::ClearActionResp* Arena::CreateMaybeMessage< ::rp4::ClearActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::ClearActionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::DelActionReq* Arena::CreateMaybeMessage< ::rp4::DelActionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::DelActionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::rp4::DelActionResp* Arena::CreateMaybeMessage< ::rp4::DelActionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rp4::DelActionResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
